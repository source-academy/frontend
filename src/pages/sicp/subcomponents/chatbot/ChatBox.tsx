import { Button } from '@blueprintjs/core';
import React, { useEffect, useRef, useState } from 'react';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { useTokens } from 'src/commons/utils/Hooks';
import { chat } from 'src/features/sicp/chatCompletion/api';
import { buildPrompt, SicpSection } from 'src/features/sicp/chatCompletion/chatCompletion';
import { SourceTheme } from 'src/features/sicp/SourceTheme';
import classes from 'src/styles/Chatbot.module.scss';

type Props = {
  getSection: () => SicpSection;
  getText: () => string;
};

type ChatMessage = { role: 'user' | 'bot'; content: string[] };
const initialMessage: ChatMessage = {
  content: ['Ask me something about this paragraph!'],
  role: 'bot'
};
const botErrorMessage: ChatMessage = {
  content: ['Sorry, I am down with a cold, please try again later.'],
  role: 'bot'
};

type Payload = { role: 'user' | 'assistant' | 'system'; content: string }[];
/** At most CONTEXT_SIZE messages are passed for chat completion. */
const CONTEXT_SIZE = 20;

const ChatBox: React.FC<Props> = ({ getSection, getText }) => {
  const chatRef = useRef<HTMLDivElement>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [messages, setMessages] = useState<ChatMessage[]>([initialMessage]);
  const [userInput, setUserInput] = useState('');
  const tokens = useTokens();

  const handleUserInput = (event: React.ChangeEvent<HTMLInputElement>) => {
    setUserInput(event.target.value);
  };

  // TODO: Reimplement
  // // To get code snippets
  // const codeBlocks = (temp: string) => {
  //   return temp.split('```');
  // };

  const sendMessage = async () => {
    if (userInput.trim() === '') {
      return;
    }
    setUserInput('');
    setMessages(prev => [...prev, { role: 'user', content: [userInput] }]);
  };

  // Watch whenever a new message comes in
  useEffect(() => {
    if (messages.length === 0) {
      return;
    }

    const lastMessage = messages[messages.length - 1];
    if (lastMessage.role === 'bot') {
      // Bot has responded
      return;
    }

    // User just sent a message
    setIsLoading(true);

    // Bot needs to respond, send payload to chat completion
    const prompt = buildPrompt(getSection(), getText());
    const payload: Payload = [
      { role: 'system', content: prompt },
      ...messages.slice(-CONTEXT_SIZE).map(message => {
        const role = message.role === 'user' ? 'user' : 'assistant';
        const content = message.content.join('\n');
        const segment: Payload[number] = { role, content };
        return segment;
      })
    ];

    chat(tokens, payload)
      .then(text => {
        // TODO: + '\n\nThe answer is generated by GPT-4 and may not be correct.'
        setMessages(prev => [...prev, { role: 'bot', content: [text] }]);
      })
      .catch(e => {
        setMessages(prev => [...prev, botErrorMessage]);
      })
      .finally(() => {
        setIsLoading(false);
      });
  }, [getSection, getText, messages, tokens]);

  const resetChat = () => {
    setMessages([initialMessage]);
  };

  const renderMessageContent = (message: string | string[]) => {
    if (!Array.isArray(message)) {
      return message;
    }

    return message.map((block, index) =>
      // Assume that only javascript code snippets will appear
      block.substring(0, 10) === 'javascript' ? (
        <SyntaxHighlighter language="javascript" style={SourceTheme} key={index}>
          {block.substring(11, block.length)}
        </SyntaxHighlighter>
      ) : (
        block
      )
    );
  };

  const keyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === 'Enter') {
      sendMessage();
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, isLoading]);

  const scrollToBottom = () => {
    chatRef.current?.scrollTo({ top: chatRef.current?.scrollHeight });
  };

  return (
    <div className={classes['chat-container']}>
      <div className={classes['chat-message']} ref={chatRef}>
        {messages.map((message, index) => (
          <div
            key={index}
            className={classes[`${message.role}`]}
            style={{ whiteSpace: 'pre-line' }}
          >
            {renderMessageContent(message.content)}
          </div>
        ))}
        {isLoading && <p>loading...</p>}
      </div>
      <input
        type="text"
        className={classes['user-input']}
        placeholder="Type your message here..."
        value={userInput}
        onChange={handleUserInput}
        onKeyDown={keyDown}
      />
      <div className={classes['button-container']}>
        <Button className={classes['button-send']} onClick={sendMessage}>
          Send
        </Button>
        <Button className={classes['button-clean']} onClick={resetChat}>
          Clean
        </Button>
      </div>
    </div>
  );
};

export default ChatBox;
