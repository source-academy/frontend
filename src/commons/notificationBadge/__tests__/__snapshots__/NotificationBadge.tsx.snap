// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Badge does not render with no notifications 1`] = `"<NotificationBadge notifications={{...}} handleAcknowledgeNotifications={[Function: handleAcknowledgeNotifications]} />"`;

exports[`Badge renders properly with notifications 1`] = `
"<NotificationBadge notifications={{...}} handleAcknowledgeNotifications={[Function: handleAcknowledgeNotifications]}>
  <Blueprint3.Popover2 className={[undefined]} content={{...}} interactionKind=\\"hover\\" placement=\\"right\\" hoverOpenDelay={50} hoverCloseDelay={50} lazy={true} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} disabled={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} minimal={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" transitionDuration={300} usePortal={true}>
    <Manager>
      <Reference>
        <Blueprint3.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
          <span aria-haspopup=\\"true\\" className=\\"bp3-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
            <Blueprint3.Tag intent=\\"danger\\" round={true} large={[undefined]} className=\\"\\" disabled={[undefined]} tabIndex={0}>
              <span disabled={[undefined]} className=\\"bp3-tag bp3-intent-danger bp3-round\\" tabIndex={[undefined]}>
                <Blueprint3.Icon icon={[undefined]} />
                <Blueprint3.Text className=\\"bp3-fill\\" ellipsize={true} tagName=\\"span\\" title={[undefined]}>
                  <span className=\\"bp3-fill bp3-text-overflow-ellipsis\\" title={[undefined]}>
                    4
                  </span>
                </Blueprint3.Text>
                <Blueprint3.Icon icon={[undefined]} />
              </span>
            </Blueprint3.Tag>
          </span>
        </Blueprint3.ResizeSensor2>
      </Reference>
      <Popper innerRef={[Function (anonymous)]} placement=\\"right\\" strategy=\\"absolute\\" modifiers={{...}}>
        <Blueprint3.Overlay autoFocus={false} backdropClassName=\\"bp3-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={true} canOutsideClickClose={false} enforceFocus={true} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={300} transitionName=\\"bp3-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
      </Popper>
    </Manager>
  </Blueprint3.Popover2>
</NotificationBadge>"
`;

exports[`Badge with filter, filterNotificationsByAssessment renders properly 1`] = `
"<NotificationBadge notifications={{...}} handleAcknowledgeNotifications={[Function: handleAcknowledgeNotifications]} notificationFilter={[Function (anonymous)]}>
  <Blueprint3.Popover2 className={[undefined]} content={{...}} interactionKind=\\"hover\\" placement=\\"right\\" hoverOpenDelay={50} hoverCloseDelay={50} lazy={true} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} disabled={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} minimal={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" transitionDuration={300} usePortal={true}>
    <Manager>
      <Reference>
        <Blueprint3.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
          <span aria-haspopup=\\"true\\" className=\\"bp3-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
            <Blueprint3.Tag intent=\\"danger\\" round={true} large={[undefined]} className=\\"\\" disabled={[undefined]} tabIndex={0}>
              <span disabled={[undefined]} className=\\"bp3-tag bp3-intent-danger bp3-round\\" tabIndex={[undefined]}>
                <Blueprint3.Icon icon={[undefined]} />
                <Blueprint3.Text className=\\"bp3-fill\\" ellipsize={true} tagName=\\"span\\" title={[undefined]}>
                  <span className=\\"bp3-fill bp3-text-overflow-ellipsis\\" title={[undefined]}>
                    4
                  </span>
                </Blueprint3.Text>
                <Blueprint3.Icon icon={[undefined]} />
              </span>
            </Blueprint3.Tag>
          </span>
        </Blueprint3.ResizeSensor2>
      </Reference>
      <Popper innerRef={[Function (anonymous)]} placement=\\"right\\" strategy=\\"absolute\\" modifiers={{...}}>
        <Blueprint3.Overlay autoFocus={false} backdropClassName=\\"bp3-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={true} canOutsideClickClose={false} enforceFocus={true} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={300} transitionName=\\"bp3-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
      </Popper>
    </Manager>
  </Blueprint3.Popover2>
</NotificationBadge>"
`;

exports[`Badge with filter, filterNotificationsByAssessment renders properly 2`] = `
"<NotificationBadge notifications={{...}} handleAcknowledgeNotifications={[Function: handleAcknowledgeNotifications]} notificationFilter={[Function (anonymous)]}>
  <Blueprint3.Popover2 className={[undefined]} content={{...}} interactionKind=\\"hover\\" placement=\\"right\\" hoverOpenDelay={50} hoverCloseDelay={50} lazy={true} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} disabled={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} minimal={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" transitionDuration={300} usePortal={true}>
    <Manager>
      <Reference>
        <Blueprint3.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
          <span aria-haspopup=\\"true\\" className=\\"bp3-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
            <Blueprint3.Tag intent=\\"danger\\" round={true} large={[undefined]} className=\\"\\" disabled={[undefined]} tabIndex={0}>
              <span disabled={[undefined]} className=\\"bp3-tag bp3-intent-danger bp3-round\\" tabIndex={[undefined]}>
                <Blueprint3.Icon icon={[undefined]} />
                <Blueprint3.Text className=\\"bp3-fill\\" ellipsize={true} tagName=\\"span\\" title={[undefined]}>
                  <span className=\\"bp3-fill bp3-text-overflow-ellipsis\\" title={[undefined]}>
                    4
                  </span>
                </Blueprint3.Text>
                <Blueprint3.Icon icon={[undefined]} />
              </span>
            </Blueprint3.Tag>
          </span>
        </Blueprint3.ResizeSensor2>
      </Reference>
      <Popper innerRef={[Function (anonymous)]} placement=\\"right\\" strategy=\\"absolute\\" modifiers={{...}}>
        <Blueprint3.Overlay autoFocus={false} backdropClassName=\\"bp3-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={true} canOutsideClickClose={false} enforceFocus={true} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={300} transitionName=\\"bp3-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
      </Popper>
    </Manager>
  </Blueprint3.Popover2>
</NotificationBadge>"
`;

exports[`Badge with filter, filterNotificationsBySubmission renders properly 1`] = `"<NotificationBadge notifications={{...}} handleAcknowledgeNotifications={[Function: handleAcknowledgeNotifications]} notificationFilter={[Function (anonymous)]} />"`;
