// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Code output renders correctly 1`] = `
<Blueprint5.Card
  elevation={0}
  interactive={false}
>
  <ForwardRef
    className="code-output"
  >
    display('');
  </ForwardRef>
</Blueprint5.Card>
`;

exports[`Empty output renders an empty card 1`] = `
<Blueprint5.Card
  elevation={0}
  interactive={false}
>
  ''
</Blueprint5.Card>
`;

exports[`Error output (no consoleLogs) renders correctly 1`] = `
<Blueprint5.Card
  elevation={0}
  interactive={false}
>
  <ForwardRef
    className="error-output"
  >
    Expected , got .
  </ForwardRef>
</Blueprint5.Card>
`;

exports[`Error output (with consoleLogs) renders correctly 1`] = `
<Blueprint5.Card
  elevation={0}
  interactive={false}
>
  <ForwardRef
    className="log-output"
  >
    a
bb
cccccccccccccccccccccccccccccccc
d
  </ForwardRef>
  <br />
  <ForwardRef
    className="error-output"
  >
    Expected , got .
  </ForwardRef>
</Blueprint5.Card>
`;

exports[`Repl renders correctly 1`] = `
<div
  className="Repl"
  style={
    {
      "display": undefined,
    }
  }
>
  <div
    className="repl-output-parent"
  >
    <Output
      isHtml={false}
      output={
        {
          "consoleLogs": [],
          "type": "result",
          "value": 42,
        }
      }
      usingSubst={false}
    />
    <Output
      isHtml={false}
      output={
        {
          "type": "code",
          "value": "display('');",
        }
      }
      usingSubst={false}
    />
    <Output
      isHtml={false}
      output={
        {
          "consoleLogs": [],
          "errors": [
            TypeError {
              "chapter": 4,
              "expected": "",
              "got": "",
              "location": {
                "end": {
                  "column": -1,
                  "line": -1,
                },
                "start": {
                  "column": -1,
                  "line": -1,
                },
              },
              "severity": "Error",
              "side": "",
              "type": "Runtime",
            },
          ],
          "type": "errors",
        }
      }
      usingSubst={false}
    />
    <Output
      isHtml={false}
      output={
        {
          "consoleLogs": [
            "a",
            "bb",
            "cccccccccccccccccccccccccccccccc",
            "d",
          ],
          "type": "running",
        }
      }
      usingSubst={false}
    />
    <Blueprint5.Card
      className="repl-input-parent row"
      elevation={0}
      interactive={false}
    >
      <ReplInput
        externalLibrary="NONE"
        handleBrowseHistoryDown={[Function]}
        handleBrowseHistoryUp={[Function]}
        handleReplEval={[Function]}
        handleReplOutputClear={[Function]}
        handleReplValueChange={[Function]}
        output={
          [
            {
              "consoleLogs": [],
              "type": "result",
              "value": 42,
            },
            {
              "type": "code",
              "value": "display('');",
            },
            {
              "consoleLogs": [],
              "errors": [
                TypeError {
                  "chapter": 4,
                  "expected": "",
                  "got": "",
                  "location": {
                    "end": {
                      "column": -1,
                      "line": -1,
                    },
                    "start": {
                      "column": -1,
                      "line": -1,
                    },
                  },
                  "severity": "Error",
                  "side": "",
                  "type": "Runtime",
                },
              ],
              "type": "errors",
            },
            {
              "consoleLogs": [
                "a",
                "bb",
                "cccccccccccccccccccccccccccccccc",
                "d",
              ],
              "type": "running",
            },
          ]
        }
        replButtons={[]}
        replValue=""
        sourceChapter={1}
        sourceVariant="default"
      />
    </Blueprint5.Card>
  </div>
</div>
`;

exports[`Result output (no consoleLogs) renders correctly 1`] = `
<ResultOutputDisplay
  output={
    {
      "consoleLogs": [],
      "type": "result",
      "value": 42,
    }
  }
/>
`;

exports[`Result output (with consoleLogs) renders correctly 1`] = `
<ResultOutputDisplay
  output={
    {
      "consoleLogs": [
        "a",
        "bb",
        "cccccccccccccccccccccccccccccccc",
        "d",
      ],
      "type": "result",
      "value": 42,
    }
  }
/>
`;

exports[`Running output renders correctly 1`] = `
<Blueprint5.Card
  elevation={0}
  interactive={false}
>
  <ForwardRef
    className="log-output"
  >
    a
bb
cccccccccccccccccccccccccccccccc
d
  </ForwardRef>
</Blueprint5.Card>
`;
