// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AssessmentWorkspace page "loading" content renders correctly 1`] = `
"<Provider store={{...}}>
  <AssessmentWorkspace assessmentId={0} autogradingResults={{...}} notAttempted={true} canSave={true} assessmentConfiguration={{...}} programPrependValue=\\"\\" programPostpendValue=\\"\\" editorTestcases={{...}} hasUnsavedChanges={false} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ] ], instances: [ { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '' } ], invocationCallOrder: [ 1 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, '' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handleReplEval={[Function: handleReplEval]} handleSave={[Function: handleSave]} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} isRunning={false} isDebugging={false} enableDebugging={false} output={{...}} questionId={0} replValue=\\"\\">
    <Blueprint4.NonIdealState className=\\"WorkspaceParent bp4-dark\\" description=\\"Getting mission ready...\\" icon={{...}} iconSize={48} layout=\\"vertical\\">
      <div className=\\"bp4-non-ideal-state bp4-non-ideal-state-vertical WorkspaceParent bp4-dark\\">
        <div className=\\"bp4-non-ideal-state-visual\\" style={{...}}>
          <Blueprint4.Icon icon={{...}} size={48} aria-hidden={true} tabIndex={-1}>
            <Blueprint4.Spinner size={100}>
              <div aria-valuemax={100} aria-valuemin={0} aria-valuenow={[undefined]} className=\\"bp4-spinner\\" role=\\"progressbar\\" size={100}>
                <div className=\\"bp4-spinner-animation\\">
                  <svg width={100} height={100} strokeWidth=\\"4.00\\" viewBox=\\"3.00 3.00 94.00 94.00\\">
                    <path className=\\"bp4-spinner-track\\" d=\\"M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90\\" />
                    <path className=\\"bp4-spinner-head\\" d=\\"M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90\\" pathLength={280} strokeDasharray=\\"280 280\\" strokeDashoffset={210} />
                  </svg>
                </div>
              </div>
            </Blueprint4.Spinner>
          </Blueprint4.Icon>
        </div>
        <div className=\\"bp4-non-ideal-state-text\\">
          <div>
            Getting mission ready...
          </div>
        </div>
      </div>
    </Blueprint4.NonIdealState>
  </AssessmentWorkspace>
</Provider>"
`;

exports[`AssessmentWorkspace page with ContestVoting question renders correctly 1`] = `
"<Provider store={{...}}>
  <AssessmentWorkspace assessmentId={7} autogradingResults={{...}} notAttempted={true} canSave={true} assessmentConfiguration={{...}} programPrependValue=\\"\\" programPostpendValue=\\"\\" editorTestcases={{...}} hasUnsavedChanges={false} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, '' ] ], instances: [ { assessmentId: 7, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Others', id: 7, title: 'A sample contest voting assessment', longSummary: 'Vote for your favourite contest entries here!', missionPDF: 'www.google.com', questions: [Array] } }, { assessmentId: 7, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Others', id: 7, title: 'A sample contest voting assessment', longSummary: 'Vote for your favourite contest entries here!', missionPDF: 'www.google.com', questions: [Array] } } ], invocationCallOrder: [ 12, 13 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, '' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handleReplEval={[Function: handleReplEval]} handleSave={[Function: handleSave]} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} isRunning={false} isDebugging={false} enableDebugging={false} output={{...}} questionId={0} replValue=\\"\\" assessment={{...}}>
    <div className=\\"WorkspaceParent bp4-dark\\">
      <Blueprint4.Dialog className=\\"assessment-briefing\\" isOpen={true} canOutsideClickClose={true}>
        <Blueprint4.Overlay className=\\"bp4-overlay-scroll-container\\" isOpen={true} canOutsideClickClose={true} hasBackdrop={true} autoFocus={true} backdropProps={{...}} canEscapeKeyClose={true} enforceFocus={true} lazy={true} shouldReturnFocusOnClose={true} transitionDuration={300} transitionName=\\"bp4-overlay\\" usePortal={true}>
          <Blueprint4.Portal className={[undefined]} container={{...}}>
            <Portal containerInfo={{...}}>
              <TransitionGroup appear={true} aria-live=\\"polite\\" className=\\"bp4-overlay bp4-overlay-open bp4-overlay-scroll-container\\" component=\\"div\\" onKeyDown={[Function (anonymous)]} childFactory={[Function: childFactory]}>
                <div aria-live=\\"polite\\" className=\\"bp4-overlay bp4-overlay-open bp4-overlay-scroll-container\\" onKeyDown={[Function (anonymous)]}>
                  <CSSTransition classNames=\\"bp4-overlay\\" addEndListener={[Function (anonymous)]} timeout={300} unmountOnExit={true} onExited={[Function: bound bound handleExited]} in={true} exit={[undefined]} enter={[undefined]}>
                    <Transition addEndListener={[Function (anonymous)]} timeout={300} unmountOnExit={true} onExited={[Function (anonymous)]} in={true} exit={true} enter={true} onEnter={[Function (anonymous)]} onEntered={[Function (anonymous)]} onEntering={[Function (anonymous)]} onExit={[Function (anonymous)]} onExiting={[Function (anonymous)]} mountOnEnter={false} appear={false}>
                      <div tabIndex={0} className=\\"bp4-overlay-start-focus-trap\\" onFocus={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} />
                    </Transition>
                  </CSSTransition>
                  <CSSTransition classNames=\\"bp4-overlay\\" timeout={300} addEndListener={[Function (anonymous)]} onExited={[Function: bound bound handleExited]} in={true} exit={[undefined]} enter={[undefined]}>
                    <Transition timeout={300} addEndListener={[Function (anonymous)]} onExited={[Function (anonymous)]} in={true} exit={true} enter={true} onEnter={[Function (anonymous)]} onEntered={[Function (anonymous)]} onEntering={[Function (anonymous)]} onExit={[Function (anonymous)]} onExiting={[Function (anonymous)]} mountOnEnter={false} unmountOnExit={false} appear={false}>
                      <div className=\\"bp4-overlay-backdrop\\" onMouseDown={[Function (anonymous)]} />
                    </Transition>
                  </CSSTransition>
                  <CSSTransition classNames=\\"bp4-overlay\\" onEntering={[undefined]} onEntered={[undefined]} onExiting={[undefined]} onExited={[Function: bound bound handleExited]} timeout={300} addEndListener={[Function (anonymous)]} in={true} exit={[undefined]} enter={[undefined]}>
                    <Transition onEntering={[Function (anonymous)]} onEntered={[Function (anonymous)]} onExiting={[Function (anonymous)]} onExited={[Function (anonymous)]} timeout={300} addEndListener={[Function (anonymous)]} in={true} exit={true} enter={true} onEnter={[Function (anonymous)]} onExit={[Function (anonymous)]} mountOnEnter={false} unmountOnExit={false} appear={false}>
                      <div className=\\"bp4-dialog-container bp4-overlay-content\\">
                        <div className=\\"bp4-dialog assessment-briefing\\" role=\\"dialog\\" aria-labelledby={[undefined]} aria-describedby={[undefined]} style={[undefined]}>
                          <Blueprint4.Card elevation={0} interactive={false}>
                            <div className=\\"bp4-card bp4-elevation-0\\">
                              <Memo(Markdown) content=\\"Vote for your favourite contest entries here!\\">
                                <div className=\\"md bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                              </Memo(Markdown)>
                              <Blueprint4.Button className=\\"assessment-briefing-button\\" onClick={[Function: onClick]} text=\\"Continue\\">
                                <button type=\\"button\\" className=\\"bp4-button assessment-briefing-button\\" onClick={[Function: onClick]} disabled={false} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                  <Blueprint4.Icon icon={[undefined]} />
                                  <span className=\\"bp4-button-text\\">
                                    Continue
                                  </span>
                                  <Blueprint4.Icon icon={[undefined]} />
                                </button>
                              </Blueprint4.Button>
                            </div>
                          </Blueprint4.Card>
                        </div>
                      </div>
                    </Transition>
                  </CSSTransition>
                  <CSSTransition classNames=\\"bp4-overlay\\" addEndListener={[Function (anonymous)]} timeout={300} unmountOnExit={true} onExited={[Function: bound bound handleExited]} in={true} exit={[undefined]} enter={[undefined]}>
                    <Transition addEndListener={[Function (anonymous)]} timeout={300} unmountOnExit={true} onExited={[Function (anonymous)]} in={true} exit={true} enter={true} onEnter={[Function (anonymous)]} onEntered={[Function (anonymous)]} onEntering={[Function (anonymous)]} onExit={[Function (anonymous)]} onExiting={[Function (anonymous)]} mountOnEnter={false} appear={false}>
                      <div tabIndex={0} className=\\"bp4-overlay-end-focus-trap\\" onFocus={[Function (anonymous)]} />
                    </Transition>
                  </CSSTransition>
                </div>
              </TransitionGroup>
            </Portal>
          </Blueprint4.Portal>
        </Blueprint4.Overlay>
      </Blueprint4.Dialog>
      <Blueprint4.Dialog className=\\"assessment-reset\\" icon=\\"error\\" isCloseButtonShown={true} isOpen={false} onClose={[Function: closeOverlay]} title=\\"Confirmation: Reset editor?\\" canOutsideClickClose={true}>
        <Blueprint4.Overlay className=\\"bp4-overlay-scroll-container\\" icon=\\"error\\" isCloseButtonShown={true} isOpen={false} onClose={[Function: closeOverlay]} title=\\"Confirmation: Reset editor?\\" canOutsideClickClose={true} hasBackdrop={true} autoFocus={true} backdropProps={{...}} canEscapeKeyClose={true} enforceFocus={true} lazy={true} shouldReturnFocusOnClose={true} transitionDuration={300} transitionName=\\"bp4-overlay\\" usePortal={true} />
      </Blueprint4.Dialog>
      <Workspace controlBarProps={{...}} editorContainerProps={{...}} handleSideContentHeightChange={[Function: handleSideContentHeightChange]} hasUnsavedChanges={false} mcqProps={{...}} sideBarProps={{...}} sideContentHeight={[undefined]} sideContentProps={{...}} replProps={{...}}>
        <div className=\\"workspace\\">
          <ControlBar editorButtons={{...}} flowButtons={{...}}>
            <div className=\\"ControlBar\\">
              <div className=\\"ControlBar_editor bp4-button-group\\">
                <ControlBarRunButton isEntrypointFileDefined={true} handleEditorEval={[Function: handleEval]}>
                  <Blueprint4.Tooltip2 content=\\"...or press shift-enter in the editor\\" placement=\\"top\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                    <Tooltip2Provider>
                      <Blueprint4.Popover2 modifiers={{...}} content=\\"...or press shift-enter in the editor\\" placement=\\"top\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                        <Manager>
                          <Reference>
                            <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                              <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                <ControlButton label=\\"Run\\" icon=\\"play\\" onClick={[Function: handleEval]} options={{...}} isDisabled={false} className=\\"\\" disabled={[undefined]} tabIndex={0}>
                                  <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className={[undefined]} type={[undefined]} onClick={[Function: handleEval]} icon={{...}} rightIcon={false}>
                                    <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: handleEval]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                      <Blueprint4.Icon icon={{...}}>
                                        <Blueprint4.Icon icon=\\"play\\" color={[undefined]}>
                                          <span aria-hidden={true} icon=\\"play\\" className=\\"bp4-icon bp4-icon-play\\" title={[undefined]}>
                                            <svg fill={[undefined]} data-icon=\\"play\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                              <path d=\\"M12 8c0-.35-.19-.64-.46-.82l.01-.02-6-4-.01.02A.969.969 0 005 3c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1 .21 0 .39-.08.54-.18l.01.02 6-4-.01-.02c.27-.18.46-.47.46-.82z\\" fillRule=\\"evenodd\\" />
                                            </svg>
                                          </span>
                                        </Blueprint4.Icon>
                                      </Blueprint4.Icon>
                                      <span className=\\"bp4-button-text\\">
                                        Run
                                      </span>
                                      <Blueprint4.Icon icon={false} />
                                    </button>
                                  </Blueprint4.Button>
                                </ControlButton>
                              </span>
                            </Blueprint4.ResizeSensor2>
                          </Reference>
                          <Popper innerRef={[Function (anonymous)]} placement=\\"top\\" strategy=\\"absolute\\" modifiers={{...}}>
                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                          </Popper>
                        </Manager>
                      </Blueprint4.Popover2>
                    </Tooltip2Provider>
                  </Blueprint4.Tooltip2>
                </ControlBarRunButton>
                <ControlBarResetButton onClick={[Function: onClickResetTemplate]}>
                  <ControlButton label=\\"Reset\\" icon=\\"repeat\\" onClick={[Function: onClickResetTemplate]}>
                    <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: onClickResetTemplate]} icon={{...}} rightIcon={false}>
                      <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: onClickResetTemplate]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                        <Blueprint4.Icon icon={{...}}>
                          <Blueprint4.Icon icon=\\"repeat\\" color={[undefined]}>
                            <span aria-hidden={true} icon=\\"repeat\\" className=\\"bp4-icon bp4-icon-repeat\\" title={[undefined]}>
                              <svg fill={[undefined]} data-icon=\\"repeat\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                <path d=\\"M10 5c0 .55.45 1 1 1h4c.55 0 1-.45 1-1V1c0-.55-.45-1-1-1s-1 .45-1 1v1.74A7.95 7.95 0 008 0C3.58 0 0 3.58 0 8c0 4.06 3.02 7.4 6.94 7.92.02 0 .04.01.06.01.33.04.66.07 1 .07 4.42 0 8-3.58 8-8 0-.55-.45-1-1-1s-1 .45-1 1c0 3.31-2.69 6-6 6-.71 0-1.37-.15-2-.38v.01C3.67 12.81 2 10.61 2 8c0-3.31 2.69-6 6-6 1.77 0 3.36.78 4.46 2H11c-.55 0-1 .45-1 1z\\" fillRule=\\"evenodd\\" />
                              </svg>
                            </span>
                          </Blueprint4.Icon>
                        </Blueprint4.Icon>
                        <span className=\\"bp4-button-text\\">
                          Reset
                        </span>
                        <Blueprint4.Icon icon={false} />
                      </button>
                    </Blueprint4.Button>
                  </ControlButton>
                </ControlBarResetButton>
                <ControlBarChapterSelect handleChapterSelect={[Function: handleChapterSelect]} isFolderModeEnabled={false} sourceChapter={1} sourceVariant=\\"default\\" disabled={true}>
                  <Blueprint4.Select items={{...}} onItemSelect={[Function: handleChapterSelect]} itemRenderer={[Function (anonymous)]} itemListRenderer={[Function: chapterListRenderer]} filterable={false} disabled={true}>
                    <Blueprint4.QueryList items={{...}} onItemSelect={[Function (anonymous)]} itemRenderer={[Function (anonymous)]} itemListRenderer={[Function: chapterListRenderer]} disabled={true} renderer={[Function (anonymous)]} resetOnQuery={true}>
                      <Blueprint4.Popover autoFocus={false} enforceFocus={false} isOpen={false} disabled={true} position=\\"bottom-left\\" className=\\"\\" onInteraction={[Function (anonymous)]} popoverClassName=\\"bp4-select-popover\\" onOpening={[Function (anonymous)]} onOpened={[Function (anonymous)]} onClosing={[Function (anonymous)]} boundary=\\"scrollParent\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} hoverCloseDelay={300} hoverOpenDelay={150} inheritDarkTheme={true} interactionKind=\\"click\\" minimal={false} modifiers={{...}} openOnTargetFocus={true} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" transitionDuration={300} usePortal={true} wrapperTagName=\\"span\\">
                        <Manager>
                          <span className=\\"bp4-popover-wrapper\\">
                            <Reference innerRef={[Function (anonymous)]}>
                              <InnerReference setReferenceNode={[Function (anonymous)]} innerRef={[Function (anonymous)]}>
                                <Blueprint4.ResizeSensor onResize={[Function (anonymous)]}>
                                  <span onClick={[Function (anonymous)]} aria-haspopup=\\"true\\" className=\\"bp4-popover-target\\">
                                    <div onKeyDown={[Function (anonymous)]} onKeyUp={[undefined]} className=\\"\\" disabled={[undefined]} tabIndex={[undefined]}>
                                      <Blueprint4.Button className=\\"bp4-minimal\\" text=\\"Source §1\\" rightIcon={{...}} disabled={true}>
                                        <button type=\\"button\\" className=\\"bp4-button bp4-disabled bp4-minimal\\" disabled={true} onBlur={[Function (anonymous)]} onClick={[undefined]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={-1}>
                                          <Blueprint4.Icon icon={[undefined]} />
                                          <span className=\\"bp4-button-text\\">
                                            Source §1
                                          </span>
                                          <Blueprint4.Icon icon={{...}} />
                                        </button>
                                      </Blueprint4.Button>
                                    </div>
                                  </span>
                                </Blueprint4.ResizeSensor>
                              </InnerReference>
                            </Reference>
                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover-backdrop\\" backdropProps={{...}} canEscapeKeyClose={true} canOutsideClickClose={true} className={[undefined]} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[Function (anonymous)]} onOpened={[Function (anonymous)]} onOpening={[Function (anonymous)]} transitionDuration={300} transitionName=\\"bp4-popover\\" usePortal={true} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                          </span>
                        </Manager>
                      </Blueprint4.Popover>
                    </Blueprint4.QueryList>
                  </Blueprint4.Select>
                </ControlBarChapterSelect>
              </div>
              <div className=\\"ControlBar_flow bp4-button-group\\">
                <ControlBarPreviousButton onClick={[Function: onClickPrevious]} questionProgress={{...}} />
                <ControlBarQuestionViewButton questionProgress={{...}}>
                  <ControlButton label=\\"Question 1 of 1  \\" isDisabled={true}>
                    <Blueprint4.Button disabled={true} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[undefined]} icon={[undefined]} rightIcon={false}>
                      <button type={[undefined]} disabled={true} className=\\"bp4-button bp4-disabled bp4-minimal\\" onClick={[undefined]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={-1}>
                        <Blueprint4.Icon icon={[undefined]} />
                        <span className=\\"bp4-button-text\\">
                          Question 1 of 1  
                        </span>
                        <Blueprint4.Icon icon={false} />
                      </button>
                    </Blueprint4.Button>
                  </ControlButton>
                </ControlBarQuestionViewButton>
                <ControlBarNextButton onClickNext={[Function: onClickNext]} onClickReturn={[Function: onClickReturn]} questionProgress={{...}}>
                  <ControlBarReturnToAcademyButton onClick={[Function: onClickReturn]}>
                    <ControlButton label=\\"Return to Academy\\" icon=\\"arrow-right\\" onClick={[Function: onClickReturn]} options={{...}}>
                      <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: onClickReturn]} icon={false} rightIcon={{...}}>
                        <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: onClickReturn]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                          <Blueprint4.Icon icon={false} />
                          <span className=\\"bp4-button-text\\">
                            Return to Academy
                          </span>
                          <Blueprint4.Icon icon={{...}}>
                            <Blueprint4.Icon icon=\\"arrow-right\\" color={[undefined]}>
                              <span aria-hidden={true} icon=\\"arrow-right\\" className=\\"bp4-icon bp4-icon-arrow-right\\" title={[undefined]}>
                                <svg fill={[undefined]} data-icon=\\"arrow-right\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                  <path d=\\"M14.7 7.29l-5-5a.965.965 0 00-.71-.3 1.003 1.003 0 00-.71 1.71l3.29 3.29H1.99c-.55 0-1 .45-1 1s.45 1 1 1h9.59l-3.29 3.29a1.003 1.003 0 001.42 1.42l5-5c.18-.18.29-.43.29-.71s-.12-.52-.3-.7z\\" fillRule=\\"evenodd\\" />
                                </svg>
                              </span>
                            </Blueprint4.Icon>
                          </Blueprint4.Icon>
                        </button>
                      </Blueprint4.Button>
                    </ControlButton>
                  </ControlBarReturnToAcademyButton>
                </ControlBarNextButton>
              </div>
              <div className=\\"ControlBar_editingWorkspace bp4-button-group\\" />
            </div>
          </ControlBar>
          <div className=\\"workspace-parent\\">
            <Resizable enable={{...}} minWidth=\\"auto\\" maxWidth=\\"50%\\" onResize={[Function: toggleSideBarDividerDisplay]} onResizeStop={[Function: onResizeStop]} size={{...}} defaultSize={{...}} as=\\"div\\" onResizeStart={[Function: onResizeStart]} style={{...}} grid={{...}} lockAspectRatio={false} lockAspectRatioExtraWidth={0} lockAspectRatioExtraHeight={0} scale={1} resizeRatio={1} snapGap={0}>
              <div style={{...}} className={[undefined]}>
                <SideBar tabs={{...}} isExpanded={true} expandSideBar={[Function: expandSideBar]} collapseSideBar={[Function: collapseSideBar]}>
                  <div className=\\"sidebar-container\\" />
                </SideBar>
                <div className={[undefined]} style={[undefined]} />
              </div>
            </Resizable>
            <div className=\\"row content-parent\\">
              <div className=\\"editor-divider\\" />
              <Resizable className=\\"resize-editor left-parent\\" enable={{...}} minWidth={0} onResize={[Function: toggleEditorDividerDisplay]} defaultSize={{...}} as=\\"div\\" onResizeStart={[Function: onResizeStart]} onResizeStop={[Function: onResizeStop]} style={{...}} grid={{...}} lockAspectRatio={false} lockAspectRatioExtraWidth={0} lockAspectRatioExtraHeight={0} scale={1} resizeRatio={1} snapGap={0}>
                <div style={{...}} className=\\"resize-editor left-parent\\">
                  <EditorContainer editorVariant=\\"normal\\" isFolderModeEnabled={false} activeEditorTabIndex={0} setActiveEditorTabIndex={[Function (anonymous)]} removeEditorTabByIndex={[Function (anonymous)]} editorTabs={{...}} editorSessionId=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibraryName=\\"NONE\\" handleDeclarationNavigate={[Function: handleDeclarationNavigate]} handleEditorEval={[Function: handleEval]} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, '' ] ], instances: [ { assessmentId: 7, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Others', id: 7, title: 'A sample contest voting assessment', longSummary: 'Vote for your favourite contest entries here!', missionPDF: 'www.google.com', questions: [Array] } }, { assessmentId: 7, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Others', id: 7, title: 'A sample contest voting assessment', longSummary: 'Vote for your favourite contest entries here!', missionPDF: 'www.google.com', questions: [Array] } } ], invocationCallOrder: [ 12, 13 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, '' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handlePromptAutocomplete={[Function: handlePromptAutocomplete]} isEditorAutorun={false} onChange={[Function: onChangeMethod]} onCursorChange={[Function: onCursorChangeMethod]} onSelectionChange={[Function: onSelectionChangeMethod]}>
                    <div className=\\"editor-container\\">
                      <Component editorVariant=\\"normal\\" editorSessionId=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibraryName=\\"NONE\\" handleDeclarationNavigate={[Function: handleDeclarationNavigate]} handleEditorEval={[Function: handleEval]} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, '' ] ], instances: [ { assessmentId: 7, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Others', id: 7, title: 'A sample contest voting assessment', longSummary: 'Vote for your favourite contest entries here!', missionPDF: 'www.google.com', questions: [Array] } }, { assessmentId: 7, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Others', id: 7, title: 'A sample contest voting assessment', longSummary: 'Vote for your favourite contest entries here!', missionPDF: 'www.google.com', questions: [Array] } } ], invocationCallOrder: [ 12, 13 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, '' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handlePromptAutocomplete={[Function: handlePromptAutocomplete]} isEditorAutorun={false} onChange={[Function: onChangeMethod]} onCursorChange={[Function: onCursorChangeMethod]} onSelectionChange={[Function: onSelectionChangeMethod]} editorTabIndex={0} editorValue=\\"\\" filePath={[undefined]} highlightedLines={{...}} breakpoints={{...}}>
                        <MockEditor editorVariant=\\"normal\\" editorSessionId=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibraryName=\\"NONE\\" handleDeclarationNavigate={[Function: handleDeclarationNavigate]} handleEditorEval={[Function: handleEval]} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, '' ] ], instances: [ { assessmentId: 7, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Others', id: 7, title: 'A sample contest voting assessment', longSummary: 'Vote for your favourite contest entries here!', missionPDF: 'www.google.com', questions: [Array] } }, { assessmentId: 7, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Others', id: 7, title: 'A sample contest voting assessment', longSummary: 'Vote for your favourite contest entries here!', missionPDF: 'www.google.com', questions: [Array] } } ], invocationCallOrder: [ 12, 13 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, '' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handlePromptAutocomplete={[Function: handlePromptAutocomplete]} isEditorAutorun={false} onChange={[Function: onChangeMethod]} onCursorChange={[Function: onCursorChangeMethod]} onSelectionChange={[Function: onSelectionChangeMethod]} editorTabIndex={0} editorValue=\\"\\" filePath={[undefined]} highlightedLines={{...}} breakpoints={{...}}>
                          <div id=\\"mock-editor\\" />
                        </MockEditor>
                      </Component>
                    </div>
                  </EditorContainer>
                  <div className={[undefined]} style={[undefined]}>
                    <Resizer direction=\\"right\\" onResizeStart={[Function: bound ]} replaceStyles={[undefined]} className={[undefined]}>
                      <div className=\\"\\" style={{...}} onMouseDown={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} />
                    </Resizer>
                  </div>
                </div>
              </Resizable>
              <div className=\\"right-parent\\">
                <Resizable bounds=\\"parent\\" className=\\"resize-side-content\\" enable={{...}} onResize={[Function: toggleDividerDisplay]} onResizeStop={[Function: onResizeStop]} as=\\"div\\" onResizeStart={[Function: onResizeStart]} style={{...}} grid={{...}} lockAspectRatio={false} lockAspectRatioExtraWidth={0} lockAspectRatioExtraHeight={0} scale={1} resizeRatio={1} snapGap={0}>
                  <div style={{...}} className=\\"resize-side-content\\">
                    <SideContent selectedTabId=\\"question_overview\\" tabs={{...}} onChange={[Function: onChangeTabs]} workspaceLocation=\\"assessment\\">
                      <GenericSideContent tabs={{...}} onChange={[Function: onChangeTabs]} workspaceLocation=\\"assessment\\" renderFunction={[Function: renderFunction]}>
                        <div className=\\"side-content\\">
                          <Blueprint4.Card elevation={0} interactive={false}>
                            <div className=\\"bp4-card bp4-elevation-0\\">
                              <div className=\\"side-content-tabs\\">
                                <Blueprint4.Tabs id=\\"side-content-tabs\\" onChange={[Function (anonymous)]} renderActiveTabPanelOnly={false} selectedTabId=\\"question_overview\\" animate={true} fill={false} large={false} vertical={false}>
                                  <div className=\\"bp4-tabs\\">
                                    <div className=\\"bp4-tab-list\\" onKeyDown={[Function (anonymous)]} onKeyPress={[Function (anonymous)]} role=\\"tablist\\">
                                      <div className=\\"bp4-tab-indicator-wrapper\\" style={{...}}>
                                        <div className=\\"bp4-tab-indicator\\" />
                                      </div>
                                      <Blueprint4.TabTitle id=\\"question_overview\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={true}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_question_overview\\" aria-disabled={false} aria-expanded={true} aria-selected={true} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"question_overview\\" id=\\"bp4-tab-title_side-content-tabs_question_overview\\" role=\\"tab\\" tabIndex={0}>
                                          <Blueprint4.Tooltip2 content=\\"Question 1\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Question 1\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"question_overview-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"ninja\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"ninja\\" className=\\"bp4-icon bp4-icon-ninja\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"ninja\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M20 6s-2.98 2.43-6.12 2.19C13.52 5.31 12.05 0 6 0c0 0 2.41 2.99 2.16 6.12C5.27 6.49 0 7.97 0 14c0 0 2.98-2.43 6.11-2.19C6.47 14.69 7.94 20 14 20c0 0-2.42-2.99-2.16-6.13C14.73 13.51 20 12.02 20 6zm-10 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                      <Blueprint4.TabTitle id=\\"briefing\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={false}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_briefing\\" aria-disabled={false} aria-expanded={false} aria-selected={false} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"briefing\\" id=\\"bp4-tab-title_side-content-tabs_briefing\\" role=\\"tab\\" tabIndex={-1}>
                                          <Blueprint4.Tooltip2 content=\\"Contest Voting Briefing\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Contest Voting Briefing\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"briefing-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"briefcase\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"briefcase\\" className=\\"bp4-icon bp4-icon-briefcase\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"briefcase\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M19 5h-4V2c0-.55-.45-1-1-1H6c-.55 0-1 .45-1 1v3H1c-.55 0-1 .45-1 1v5h4v-1h2v1h8v-1h2v1h4V6c0-.55-.45-1-1-1zm-6 0H7V3h6v2zm3 8h-2v-1H6v1H4v-1H0v6c0 .55.45 1 1 1h18c.55 0 1-.45 1-1v-6h-4v1z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                      <Blueprint4.TabTitle id=\\"contest_voting\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={false}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_contest_voting\\" aria-disabled={false} aria-expanded={false} aria-selected={false} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"contest_voting\\" id=\\"bp4-tab-title_side-content-tabs_contest_voting\\" role=\\"tab\\" tabIndex={-1}>
                                          <Blueprint4.Tooltip2 content=\\"Contest Voting\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Contest Voting\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"contest_voting-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"new-layers\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"new-layers\\" className=\\"bp4-icon bp4-icon-new-layers\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"new-layers\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M17 3h2a1 1 0 010 2h-2v2a1 1 0 01-2 0V5h-2a1 1 0 010-2h2V1a1 1 0 012 0v2zm-1.252 5.984L10.5 11.9c-.2.1-.3.1-.5.1s-.3 0-.5-.1l-9-5C.2 6.7 0 6.4 0 6s.2-.7.5-.9l9-5c.2-.1.3-.1.5-.1s.3 0 .5.1L13.92 2H13a2 2 0 100 4h1v1a2 2 0 001.748 1.984zm2.07-1.15C17.935 7.58 18 7.298 18 7V6h1c.353 0 .684-.091.972-.251.018.078.028.162.028.251 0 .4-.2.7-.5.9l-1.682.934zM19 9c.6 0 1 .4 1 1 0 .4-.2.7-.5.9l-9 5c-.2.1-.3.1-.5.1s-.3 0-.5-.1l-9-5c-.3-.2-.5-.5-.5-.9 0-.6.4-1 1-1 .2 0 .3 0 .5.1l8.5 4.8 8.5-4.8c.2-.1.3-.1.5-.1zm0 4c.6 0 1 .4 1 1 0 .4-.2.7-.5.9l-9 5c-.2.1-.3.1-.5.1s-.3 0-.5-.1l-9-5c-.3-.2-.5-.5-.5-.9 0-.6.4-1 1-1 .2 0 .3 0 .5.2l8.5 4.7 8.5-4.8c.2-.1.3-.1.5-.1z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                      <Blueprint4.TabTitle id=\\"contest_leaderboard\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={false}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_contest_leaderboard\\" aria-disabled={false} aria-expanded={false} aria-selected={false} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"contest_leaderboard\\" id=\\"bp4-tab-title_side-content-tabs_contest_leaderboard\\" role=\\"tab\\" tabIndex={-1}>
                                          <Blueprint4.Tooltip2 content=\\"Contest Leaderboard\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Contest Leaderboard\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"contest_leaderboard-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"crown\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"crown\\" className=\\"bp4-icon bp4-icon-crown\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"crown\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M2 8l4 2 4-5 4 5 4-2-1 7H3L2 8zm8-6a1 1 0 110 2 1 1 0 010-2zM1 5a1 1 0 110 2 1 1 0 010-2zm18 0a1 1 0 110 2 1 1 0 010-2zM3 16h14v2H3v-2z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_question_overview\\" aria-hidden={false} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_question_overview\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <Memo(Markdown) content=\\"Sample Contest Voting Question\\" workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <div className=\\"md bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                                        </Memo(Markdown)>
                                      </div>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_briefing\\" aria-hidden={true} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_briefing\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <Memo(Markdown) content=\\"Vote for your favourite contest entries here!\\" workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <div className=\\"md bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                                        </Memo(Markdown)>
                                      </div>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_contest_voting\\" aria-hidden={true} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_contest_voting\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <SideContentContestVotingContainer canSave={true} handleSave={[Function: handleSave]} handleContestEntryClick={[Function: handleContestEntryClick]} contestEntries={{...}} workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <SideContentContestVoting isValid={true} canSave={true} handleContestEntryClick={[Function: handleContestEntryClick]} handleVotingSubmissionChange={[Function: handleVotingSubmissionChange]} contestEntries={{...}} minScore={9} maxScore={10}>
                                            <div className=\\"ContestEntryVoting\\">
                                              <Blueprint4.Button className=\\"collapse-button\\" icon=\\"caret-down\\" minimal={true} onClick={[Function: onClick]}>
                                                <button type=\\"button\\" className=\\"bp4-button bp4-minimal collapse-button\\" onClick={[Function: onClick]} disabled={false} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                  <Blueprint4.Icon icon=\\"caret-down\\">
                                                    <span aria-hidden={true} icon=\\"caret-down\\" className=\\"bp4-icon bp4-icon-caret-down\\" title={[undefined]}>
                                                      <svg fill={[undefined]} data-icon=\\"caret-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                        <path d=\\"M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z\\" fillRule=\\"evenodd\\" />
                                                      </svg>
                                                    </span>
                                                  </Blueprint4.Icon>
                                                  <span className=\\"bp4-button-text\\">
                                                    <span>
                                                      Contest Voting
                                                    </span>
                                                    <Blueprint4.Tooltip2 content={{...}} compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                                      <Tooltip2Provider>
                                                        <Blueprint4.Popover2 modifiers={{...}} content={{...}} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                          <Manager>
                                                            <Reference>
                                                              <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                                <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                                  <Blueprint4.Icon icon=\\"help\\" className=\\"\\" disabled={[undefined]} tabIndex={0}>
                                                                    <span aria-hidden={true} icon=\\"help\\" disabled={[undefined]} tabIndex={0} className=\\"bp4-icon bp4-icon-help\\" title={[undefined]}>
                                                                      <svg fill={[undefined]} data-icon=\\"help\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                        <path d=\\"M8 0C3.58 0 0 3.58 0 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm1 13H7v-2h2v2zm1.93-6.52c-.14.32-.35.64-.62.97L9.25 8.83c-.12.15-.24.29-.28.42-.04.13-.09.3-.09.52V10H7.12V8.88s.05-.51.21-.71L8.4 6.73c.22-.26.35-.49.44-.68.09-.19.12-.38.12-.58 0-.3-.1-.55-.28-.75-.18-.19-.44-.28-.76-.28-.33 0-.59.1-.78.29-.19.19-.33.46-.4.81-.03.11-.1.15-.2.14l-1.7-.25c-.12-.01-.16-.08-.14-.19.12-.82.46-1.47 1.03-1.94.57-.48 1.32-.72 2.25-.72.47 0 .9.07 1.29.22s.72.34 1 .59c.28.25.49.55.65.89.15.35.22.72.22 1.12s-.07.75-.21 1.08z\\" fillRule=\\"evenodd\\" />
                                                                      </svg>
                                                                    </span>
                                                                  </Blueprint4.Icon>
                                                                </span>
                                                              </Blueprint4.ResizeSensor2>
                                                            </Reference>
                                                            <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                              <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                            </Popper>
                                                          </Manager>
                                                        </Blueprint4.Popover2>
                                                      </Tooltip2Provider>
                                                    </Blueprint4.Tooltip2>
                                                  </span>
                                                  <Blueprint4.Icon icon={[undefined]} />
                                                </button>
                                              </Blueprint4.Button>
                                              <Blueprint4.Collapse isOpen={true} keepChildrenMounted={true} component=\\"div\\" transitionDuration={200}>
                                                <div className=\\"bp4-collapse\\" style={{...}}>
                                                  <div className=\\"bp4-collapse-body\\" style={{...}} aria-hidden={false}>
                                                    <div>
                                                      <div className=\\"contestentries-header\\">
                                                        <div className=\\"header-entryid\\">
                                                          Entry Id
                                                          <Blueprint4.Icon icon=\\"caret-down\\">
                                                            <span aria-hidden={true} icon=\\"caret-down\\" className=\\"bp4-icon bp4-icon-caret-down\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"caret-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                        <div className=\\"header-entryrank\\">
                                                          Score
                                                          <Blueprint4.Icon icon=\\"caret-down\\">
                                                            <span aria-hidden={true} icon=\\"caret-down\\" className=\\"bp4-icon bp4-icon-caret-down\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"caret-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </div>
                                                      <SideContentContestEntryCard isValid={true} canSave={true} entryNumber={1} handleContestEntryClick={[Function: handleContestEntryClick]} handleVotingSubmissionChange={[Function: handleVotingSubmissionChange]} contestEntry={{...}} minScore={9} maxScore={10}>
                                                        <div className=\\"ContestEntryCard\\">
                                                          <Blueprint4.Card className=\\"bp4-interactive\\" elevation={1} onClick={[Function: onClick]} interactive={false}>
                                                            <div className=\\"bp4-card bp4-elevation-1 bp4-interactive\\" onClick={[Function: onClick]}>
                                                              <Component className=\\"contestentry-entryid\\">
                                                                <pre className=\\"bp4-code-block contestentry-entryid\\">
                                                                  1
                                                                </pre>
                                                              </Component>
                                                              <Component className=\\"contestentry-rank\\">
                                                                <pre className=\\"bp4-code-block contestentry-rank\\">
                                                                  <Blueprint4.NumericInput disabled={false} value={[undefined]} onValueChange={[Function: onValueChange]} placeholder=\\"Enter score for entry 1\\" min={9} max={10} allowNumericCharactersOnly={true} fill={true} minorStepSize={{...}} buttonPosition=\\"right\\" clampValueOnBlur={false} defaultValue=\\"\\" large={false} majorStepSize={10} selectAllOnFocus={false} selectAllOnIncrement={false} stepSize={1}>
                                                                    <Blueprint4.ControlGroup className=\\"bp4-numeric-input\\" fill={true}>
                                                                      <div className=\\"bp4-control-group bp4-fill bp4-numeric-input\\">
                                                                        <Blueprint4.InputGroup asyncControl={[undefined]} autoComplete=\\"off\\" id=\\"numericInput-0\\" role=\\"spinbutton\\" disabled={false} value=\\"\\" placeholder=\\"Enter score for entry 1\\" min={9} max={10} aria-valuemax={10} aria-valuemin={9} aria-valuenow={0} intent={[undefined]} inputClassName={[undefined]} inputRef={[Function (anonymous)]} large={false} leftElement={[undefined]} leftIcon={[undefined]} onFocus={[Function (anonymous)]} onBlur={[Function (anonymous)]} onChange={[Function (anonymous)]} onCompositionEnd={[Function (anonymous)]} onCompositionUpdate={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} onKeyPress={[Function (anonymous)]} onPaste={[Function (anonymous)]} rightElement={[undefined]}>
                                                                          <div className=\\"bp4-input-group\\">
                                                                            <input type=\\"text\\" autoComplete=\\"off\\" id=\\"numericInput-0\\" role=\\"spinbutton\\" disabled={false} value=\\"\\" placeholder=\\"Enter score for entry 1\\" min={9} max={10} aria-valuemax={10} aria-valuemin={9} aria-valuenow={0} onFocus={[Function (anonymous)]} onBlur={[Function (anonymous)]} onChange={[Function (anonymous)]} onCompositionEnd={[Function (anonymous)]} onCompositionUpdate={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} onKeyPress={[Function (anonymous)]} onPaste={[Function (anonymous)]} className=\\"bp4-input\\" style={{...}} />
                                                                          </div>
                                                                        </Blueprint4.InputGroup>
                                                                        <Blueprint4.ButtonGroup className=\\"bp4-fixed\\" vertical={true}>
                                                                          <div className=\\"bp4-button-group bp4-vertical bp4-fixed\\">
                                                                            <Blueprint4.Button aria-label=\\"increment\\" aria-controls=\\"numericInput-0\\" disabled={false} icon=\\"chevron-up\\" intent={[undefined]} onKeyDown={[Function: onKeyDown]} onMouseDown={[Function: onMouseDown]}>
                                                                              <button type=\\"button\\" aria-label=\\"increment\\" aria-controls=\\"numericInput-0\\" disabled={false} onKeyDown={[Function (anonymous)]} onMouseDown={[Function: onMouseDown]} className=\\"bp4-button\\" onBlur={[Function (anonymous)]} onClick={[undefined]} onFocus={[undefined]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                                                <Blueprint4.Icon icon=\\"chevron-up\\">
                                                                                  <span aria-hidden={true} icon=\\"chevron-up\\" className=\\"bp4-icon bp4-icon-chevron-up\\" title={[undefined]}>
                                                                                    <svg fill={[undefined]} data-icon=\\"chevron-up\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                                      <path d=\\"M12.71 9.29l-4-4C8.53 5.11 8.28 5 8 5s-.53.11-.71.29l-4 4a1.003 1.003 0 001.42 1.42L8 7.41l3.29 3.29c.18.19.43.3.71.3a1.003 1.003 0 00.71-1.71z\\" fillRule=\\"evenodd\\" />
                                                                                    </svg>
                                                                                  </span>
                                                                                </Blueprint4.Icon>
                                                                                <Blueprint4.Icon icon={[undefined]} />
                                                                              </button>
                                                                            </Blueprint4.Button>
                                                                            <Blueprint4.Button aria-label=\\"decrement\\" aria-controls=\\"numericInput-0\\" disabled={false} icon=\\"chevron-down\\" intent={[undefined]} onKeyDown={[Function: onKeyDown]} onMouseDown={[Function: onMouseDown]}>
                                                                              <button type=\\"button\\" aria-label=\\"decrement\\" aria-controls=\\"numericInput-0\\" disabled={false} onKeyDown={[Function (anonymous)]} onMouseDown={[Function: onMouseDown]} className=\\"bp4-button\\" onBlur={[Function (anonymous)]} onClick={[undefined]} onFocus={[undefined]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                                                <Blueprint4.Icon icon=\\"chevron-down\\">
                                                                                  <span aria-hidden={true} icon=\\"chevron-down\\" className=\\"bp4-icon bp4-icon-chevron-down\\" title={[undefined]}>
                                                                                    <svg fill={[undefined]} data-icon=\\"chevron-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                                      <path d=\\"M12 5c-.28 0-.53.11-.71.29L8 8.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42l4 4c.18.18.43.29.71.29s.53-.11.71-.29l4-4A1.003 1.003 0 0012 5z\\" fillRule=\\"evenodd\\" />
                                                                                    </svg>
                                                                                  </span>
                                                                                </Blueprint4.Icon>
                                                                                <Blueprint4.Icon icon={[undefined]} />
                                                                              </button>
                                                                            </Blueprint4.Button>
                                                                          </div>
                                                                        </Blueprint4.ButtonGroup>
                                                                      </div>
                                                                    </Blueprint4.ControlGroup>
                                                                  </Blueprint4.NumericInput>
                                                                </pre>
                                                              </Component>
                                                            </div>
                                                          </Blueprint4.Card>
                                                        </div>
                                                      </SideContentContestEntryCard>
                                                      <SideContentContestEntryCard isValid={true} canSave={true} entryNumber={2} handleContestEntryClick={[Function: handleContestEntryClick]} handleVotingSubmissionChange={[Function: handleVotingSubmissionChange]} contestEntry={{...}} minScore={9} maxScore={10}>
                                                        <div className=\\"ContestEntryCard\\">
                                                          <Blueprint4.Card className=\\"bp4-interactive\\" elevation={1} onClick={[Function: onClick]} interactive={false}>
                                                            <div className=\\"bp4-card bp4-elevation-1 bp4-interactive\\" onClick={[Function: onClick]}>
                                                              <Component className=\\"contestentry-entryid\\">
                                                                <pre className=\\"bp4-code-block contestentry-entryid\\">
                                                                  2
                                                                </pre>
                                                              </Component>
                                                              <Component className=\\"contestentry-rank\\">
                                                                <pre className=\\"bp4-code-block contestentry-rank\\">
                                                                  <Blueprint4.NumericInput disabled={false} value={[undefined]} onValueChange={[Function: onValueChange]} placeholder=\\"Enter score for entry 2\\" min={9} max={10} allowNumericCharactersOnly={true} fill={true} minorStepSize={{...}} buttonPosition=\\"right\\" clampValueOnBlur={false} defaultValue=\\"\\" large={false} majorStepSize={10} selectAllOnFocus={false} selectAllOnIncrement={false} stepSize={1}>
                                                                    <Blueprint4.ControlGroup className=\\"bp4-numeric-input\\" fill={true}>
                                                                      <div className=\\"bp4-control-group bp4-fill bp4-numeric-input\\">
                                                                        <Blueprint4.InputGroup asyncControl={[undefined]} autoComplete=\\"off\\" id=\\"numericInput-1\\" role=\\"spinbutton\\" disabled={false} value=\\"\\" placeholder=\\"Enter score for entry 2\\" min={9} max={10} aria-valuemax={10} aria-valuemin={9} aria-valuenow={0} intent={[undefined]} inputClassName={[undefined]} inputRef={[Function (anonymous)]} large={false} leftElement={[undefined]} leftIcon={[undefined]} onFocus={[Function (anonymous)]} onBlur={[Function (anonymous)]} onChange={[Function (anonymous)]} onCompositionEnd={[Function (anonymous)]} onCompositionUpdate={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} onKeyPress={[Function (anonymous)]} onPaste={[Function (anonymous)]} rightElement={[undefined]}>
                                                                          <div className=\\"bp4-input-group\\">
                                                                            <input type=\\"text\\" autoComplete=\\"off\\" id=\\"numericInput-1\\" role=\\"spinbutton\\" disabled={false} value=\\"\\" placeholder=\\"Enter score for entry 2\\" min={9} max={10} aria-valuemax={10} aria-valuemin={9} aria-valuenow={0} onFocus={[Function (anonymous)]} onBlur={[Function (anonymous)]} onChange={[Function (anonymous)]} onCompositionEnd={[Function (anonymous)]} onCompositionUpdate={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} onKeyPress={[Function (anonymous)]} onPaste={[Function (anonymous)]} className=\\"bp4-input\\" style={{...}} />
                                                                          </div>
                                                                        </Blueprint4.InputGroup>
                                                                        <Blueprint4.ButtonGroup className=\\"bp4-fixed\\" vertical={true}>
                                                                          <div className=\\"bp4-button-group bp4-vertical bp4-fixed\\">
                                                                            <Blueprint4.Button aria-label=\\"increment\\" aria-controls=\\"numericInput-1\\" disabled={false} icon=\\"chevron-up\\" intent={[undefined]} onKeyDown={[Function: onKeyDown]} onMouseDown={[Function: onMouseDown]}>
                                                                              <button type=\\"button\\" aria-label=\\"increment\\" aria-controls=\\"numericInput-1\\" disabled={false} onKeyDown={[Function (anonymous)]} onMouseDown={[Function: onMouseDown]} className=\\"bp4-button\\" onBlur={[Function (anonymous)]} onClick={[undefined]} onFocus={[undefined]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                                                <Blueprint4.Icon icon=\\"chevron-up\\">
                                                                                  <span aria-hidden={true} icon=\\"chevron-up\\" className=\\"bp4-icon bp4-icon-chevron-up\\" title={[undefined]}>
                                                                                    <svg fill={[undefined]} data-icon=\\"chevron-up\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                                      <path d=\\"M12.71 9.29l-4-4C8.53 5.11 8.28 5 8 5s-.53.11-.71.29l-4 4a1.003 1.003 0 001.42 1.42L8 7.41l3.29 3.29c.18.19.43.3.71.3a1.003 1.003 0 00.71-1.71z\\" fillRule=\\"evenodd\\" />
                                                                                    </svg>
                                                                                  </span>
                                                                                </Blueprint4.Icon>
                                                                                <Blueprint4.Icon icon={[undefined]} />
                                                                              </button>
                                                                            </Blueprint4.Button>
                                                                            <Blueprint4.Button aria-label=\\"decrement\\" aria-controls=\\"numericInput-1\\" disabled={false} icon=\\"chevron-down\\" intent={[undefined]} onKeyDown={[Function: onKeyDown]} onMouseDown={[Function: onMouseDown]}>
                                                                              <button type=\\"button\\" aria-label=\\"decrement\\" aria-controls=\\"numericInput-1\\" disabled={false} onKeyDown={[Function (anonymous)]} onMouseDown={[Function: onMouseDown]} className=\\"bp4-button\\" onBlur={[Function (anonymous)]} onClick={[undefined]} onFocus={[undefined]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                                                <Blueprint4.Icon icon=\\"chevron-down\\">
                                                                                  <span aria-hidden={true} icon=\\"chevron-down\\" className=\\"bp4-icon bp4-icon-chevron-down\\" title={[undefined]}>
                                                                                    <svg fill={[undefined]} data-icon=\\"chevron-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                                      <path d=\\"M12 5c-.28 0-.53.11-.71.29L8 8.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42l4 4c.18.18.43.29.71.29s.53-.11.71-.29l4-4A1.003 1.003 0 0012 5z\\" fillRule=\\"evenodd\\" />
                                                                                    </svg>
                                                                                  </span>
                                                                                </Blueprint4.Icon>
                                                                                <Blueprint4.Icon icon={[undefined]} />
                                                                              </button>
                                                                            </Blueprint4.Button>
                                                                          </div>
                                                                        </Blueprint4.ButtonGroup>
                                                                      </div>
                                                                    </Blueprint4.ControlGroup>
                                                                  </Blueprint4.NumericInput>
                                                                </pre>
                                                              </Component>
                                                            </div>
                                                          </Blueprint4.Card>
                                                        </div>
                                                      </SideContentContestEntryCard>
                                                    </div>
                                                  </div>
                                                </div>
                                              </Blueprint4.Collapse>
                                            </div>
                                          </SideContentContestVoting>
                                        </SideContentContestVotingContainer>
                                      </div>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_contest_leaderboard\\" aria-hidden={true} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_contest_leaderboard\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <SideContentContestLeaderboard handleContestEntryClick={[Function: handleContestEntryClick]} orderedContestEntries={{...}} workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <div className=\\"ContestLeaderboard\\">
                                            <Blueprint4.Button className=\\"collapse-button\\" icon=\\"caret-down\\" minimal={true} onClick={[Function: onClick]}>
                                              <button type=\\"button\\" className=\\"bp4-button bp4-minimal collapse-button\\" onClick={[Function: onClick]} disabled={false} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                <Blueprint4.Icon icon=\\"caret-down\\">
                                                  <span aria-hidden={true} icon=\\"caret-down\\" className=\\"bp4-icon bp4-icon-caret-down\\" title={[undefined]}>
                                                    <svg fill={[undefined]} data-icon=\\"caret-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                      <path d=\\"M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z\\" fillRule=\\"evenodd\\" />
                                                    </svg>
                                                  </span>
                                                </Blueprint4.Icon>
                                                <span className=\\"bp4-button-text\\">
                                                  <span>
                                                    Contest Leaderboard
                                                  </span>
                                                  <Blueprint4.Tooltip2 content=\\"View the top-rated contest entries!\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                                    <Tooltip2Provider>
                                                      <Blueprint4.Popover2 modifiers={{...}} content=\\"View the top-rated contest entries!\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                        <Manager>
                                                          <Reference>
                                                            <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                              <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                                <Blueprint4.Icon icon=\\"help\\" className=\\"\\" disabled={[undefined]} tabIndex={0}>
                                                                  <span aria-hidden={true} icon=\\"help\\" disabled={[undefined]} tabIndex={0} className=\\"bp4-icon bp4-icon-help\\" title={[undefined]}>
                                                                    <svg fill={[undefined]} data-icon=\\"help\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                      <path d=\\"M8 0C3.58 0 0 3.58 0 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm1 13H7v-2h2v2zm1.93-6.52c-.14.32-.35.64-.62.97L9.25 8.83c-.12.15-.24.29-.28.42-.04.13-.09.3-.09.52V10H7.12V8.88s.05-.51.21-.71L8.4 6.73c.22-.26.35-.49.44-.68.09-.19.12-.38.12-.58 0-.3-.1-.55-.28-.75-.18-.19-.44-.28-.76-.28-.33 0-.59.1-.78.29-.19.19-.33.46-.4.81-.03.11-.1.15-.2.14l-1.7-.25c-.12-.01-.16-.08-.14-.19.12-.82.46-1.47 1.03-1.94.57-.48 1.32-.72 2.25-.72.47 0 .9.07 1.29.22s.72.34 1 .59c.28.25.49.55.65.89.15.35.22.72.22 1.12s-.07.75-.21 1.08z\\" fillRule=\\"evenodd\\" />
                                                                    </svg>
                                                                  </span>
                                                                </Blueprint4.Icon>
                                                              </span>
                                                            </Blueprint4.ResizeSensor2>
                                                          </Reference>
                                                          <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                          </Popper>
                                                        </Manager>
                                                      </Blueprint4.Popover2>
                                                    </Tooltip2Provider>
                                                  </Blueprint4.Tooltip2>
                                                </span>
                                                <Blueprint4.Icon icon={[undefined]} />
                                              </button>
                                            </Blueprint4.Button>
                                            <Blueprint4.Collapse isOpen={true} keepChildrenMounted={true} component=\\"div\\" transitionDuration={200}>
                                              <div className=\\"bp4-collapse\\" style={{...}}>
                                                <div className=\\"bp4-collapse-body\\" style={{...}} aria-hidden={false}>
                                                  <div>
                                                    <div className=\\"leaderboard-header\\">
                                                      <div className=\\"header-entryid\\">
                                                        Student Name
                                                        <Blueprint4.Icon icon=\\"caret-down\\">
                                                          <span aria-hidden={true} icon=\\"caret-down\\" className=\\"bp4-icon bp4-icon-caret-down\\" title={[undefined]}>
                                                            <svg fill={[undefined]} data-icon=\\"caret-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                              <path d=\\"M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z\\" fillRule=\\"evenodd\\" />
                                                            </svg>
                                                          </span>
                                                        </Blueprint4.Icon>
                                                      </div>
                                                      <div className=\\"header-entryrank\\">
                                                        Rank
                                                        <Blueprint4.Icon icon=\\"caret-down\\">
                                                          <span aria-hidden={true} icon=\\"caret-down\\" className=\\"bp4-icon bp4-icon-caret-down\\" title={[undefined]}>
                                                            <svg fill={[undefined]} data-icon=\\"caret-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                              <path d=\\"M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z\\" fillRule=\\"evenodd\\" />
                                                            </svg>
                                                          </span>
                                                        </Blueprint4.Icon>
                                                      </div>
                                                      <div className=\\"header-score\\">
                                                        Score
                                                        <Blueprint4.Icon icon=\\"caret-down\\">
                                                          <span aria-hidden={true} icon=\\"caret-down\\" className=\\"bp4-icon bp4-icon-caret-down\\" title={[undefined]}>
                                                            <svg fill={[undefined]} data-icon=\\"caret-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                              <path d=\\"M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z\\" fillRule=\\"evenodd\\" />
                                                            </svg>
                                                          </span>
                                                        </Blueprint4.Icon>
                                                      </div>
                                                    </div>
                                                    <SideContentLeaderboardCard handleContestEntryClick={[Function: handleContestEntryClick]} contestEntry={{...}} rank={1}>
                                                      <div className=\\"LeaderboardCard\\">
                                                        <Blueprint4.Card className=\\"bp4-interactive\\" elevation={1} onClick={[Function: onClick]} interactive={false}>
                                                          <div className=\\"bp4-card bp4-elevation-1 bp4-interactive\\" onClick={[Function: onClick]}>
                                                            <Component className=\\"contestentry-entryid\\">
                                                              <pre className=\\"bp4-code-block contestentry-entryid\\">
                                                                student_1
                                                              </pre>
                                                            </Component>
                                                            <Component className=\\"contestentry-rank\\">
                                                              <pre className=\\"bp4-code-block contestentry-rank\\">
                                                                1
                                                              </pre>
                                                            </Component>
                                                            <Component className=\\"contestentry-score\\">
                                                              <pre className=\\"bp4-code-block contestentry-score\\" />
                                                            </Component>
                                                          </div>
                                                        </Blueprint4.Card>
                                                      </div>
                                                    </SideContentLeaderboardCard>
                                                    <SideContentLeaderboardCard handleContestEntryClick={[Function: handleContestEntryClick]} contestEntry={{...}} rank={2}>
                                                      <div className=\\"LeaderboardCard\\">
                                                        <Blueprint4.Card className=\\"bp4-interactive\\" elevation={1} onClick={[Function: onClick]} interactive={false}>
                                                          <div className=\\"bp4-card bp4-elevation-1 bp4-interactive\\" onClick={[Function: onClick]}>
                                                            <Component className=\\"contestentry-entryid\\">
                                                              <pre className=\\"bp4-code-block contestentry-entryid\\">
                                                                student_2
                                                              </pre>
                                                            </Component>
                                                            <Component className=\\"contestentry-rank\\">
                                                              <pre className=\\"bp4-code-block contestentry-rank\\">
                                                                2
                                                              </pre>
                                                            </Component>
                                                            <Component className=\\"contestentry-score\\">
                                                              <pre className=\\"bp4-code-block contestentry-score\\" />
                                                            </Component>
                                                          </div>
                                                        </Blueprint4.Card>
                                                      </div>
                                                    </SideContentLeaderboardCard>
                                                  </div>
                                                </div>
                                              </div>
                                            </Blueprint4.Collapse>
                                          </div>
                                        </SideContentContestLeaderboard>
                                      </div>
                                    </div>
                                  </div>
                                </Blueprint4.Tabs>
                              </div>
                            </div>
                          </Blueprint4.Card>
                        </div>
                      </GenericSideContent>
                    </SideContent>
                    <div className=\\"side-content-divider\\" />
                    <div className={[undefined]} style={[undefined]}>
                      <Resizer direction=\\"bottom\\" onResizeStart={[Function: bound ]} replaceStyles={[undefined]} className={[undefined]}>
                        <div className=\\"\\" style={{...}} onMouseDown={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} />
                      </Resizer>
                    </div>
                  </div>
                </Resizable>
                <Repl handleBrowseHistoryDown={[Function: handleBrowseHistoryDown]} handleBrowseHistoryUp={[Function: handleBrowseHistoryUp]} handleReplEval={[Function: handleReplEval]} handleReplValueChange={[Function: handleReplValueChange]} output={{...}} replValue=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibrary=\\"NONE\\" replButtons={{...}}>
                  <div className=\\"Repl\\" style={{...}}>
                    <div className=\\"repl-output-parent\\">
                      <HotKeysEnabled className=\\"repl-input-parent row bp4-card bp4-elevation-0\\" handlers={{...}}>
                        <HotKeysWrapper hotKeys={{...}} className=\\"repl-input-parent row bp4-card bp4-elevation-0\\">
                          <div onFocus={[Function: bound _handleFocus]} onBlur={[Function: bound _handleBlur]} tabIndex=\\"-1\\" className=\\"repl-input-parent row bp4-card bp4-elevation-0\\">
                            <ReplInput handleBrowseHistoryDown={[Function: handleBrowseHistoryDown]} handleBrowseHistoryUp={[Function: handleBrowseHistoryUp]} handleReplEval={[Function: handleReplEval]} handleReplValueChange={[Function: handleReplValueChange]} output={{...}} replValue=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibrary=\\"NONE\\" replButtons={{...}}>
                              <ReactAce className=\\"repl-react-ace react-ace\\" mode=\\"source1defaultNONE\\" theme=\\"source\\" height=\\"1px\\" width=\\"100%\\" value=\\"\\" onChange={[Function: handleReplValueChange]} commands={{...}} minLines={1} maxLines={20} fontSize={17} highlightActiveLine={false} showGutter={false} showPrintMargin={false} setOptions={{...}} name=\\"ace-editor\\" focus={false} enableSnippets={false} onPaste={{...}} onLoad={{...}} onScroll={{...}} readOnly={false} tabSize={4} cursorStart={1} editorProps={{...}} style={{...}} scrollMargin={{...}} wrapEnabled={false} enableBasicAutocompletion={false} enableLiveAutocompletion={false} placeholder={{...}} navigateToFileEnd={true}>
                                <div id=\\"ace-editor\\" style={{...}} />
                              </ReactAce>
                              <div className=\\"bp4-button-group bp4-dark\\">
                                <ControlBarEvalButton handleReplEval={[Function: handleReplEval]} isRunning={false}>
                                  <Blueprint4.Tooltip2 content=\\"...or press shift-enter in the REPL\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                    <Tooltip2Provider>
                                      <Blueprint4.Popover2 modifiers={{...}} content=\\"...or press shift-enter in the REPL\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                        <Manager>
                                          <Reference>
                                            <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                              <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                <ControlButton label=\\"Eval\\" icon=\\"code\\" onClick={[Function: handleReplEval]} className=\\"\\" disabled={[undefined]} tabIndex={0}>
                                                  <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: handleReplEval]} icon={{...}} rightIcon={false}>
                                                    <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: handleReplEval]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                      <Blueprint4.Icon icon={{...}}>
                                                        <Blueprint4.Icon icon=\\"code\\" color={[undefined]}>
                                                          <span aria-hidden={true} icon=\\"code\\" className=\\"bp4-icon bp4-icon-code\\" title={[undefined]}>
                                                            <svg fill={[undefined]} data-icon=\\"code\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                              <path d=\\"M15.71 7.29l-3-3a1.003 1.003 0 00-1.42 1.42L13.59 8l-2.29 2.29c-.19.18-.3.43-.3.71a1.003 1.003 0 001.71.71l3-3c.18-.18.29-.43.29-.71 0-.28-.11-.53-.29-.71zM5 5a1.003 1.003 0 00-1.71-.71l-3 3C.11 7.47 0 7.72 0 8c0 .28.11.53.29.71l3 3a1.003 1.003 0 001.42-1.42L2.41 8 4.7 5.71c.19-.18.3-.43.3-.71zm4-3c-.48 0-.87.35-.96.81l-2 10c-.01.06-.04.12-.04.19 0 .55.45 1 1 1 .48 0 .87-.35.96-.81l2-10c.01-.06.04-.12.04-.19 0-.55-.45-1-1-1z\\" fillRule=\\"evenodd\\" />
                                                            </svg>
                                                          </span>
                                                        </Blueprint4.Icon>
                                                      </Blueprint4.Icon>
                                                      <span className=\\"bp4-button-text\\">
                                                        Eval
                                                      </span>
                                                      <Blueprint4.Icon icon={false} />
                                                    </button>
                                                  </Blueprint4.Button>
                                                </ControlButton>
                                              </span>
                                            </Blueprint4.ResizeSensor2>
                                          </Reference>
                                          <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                          </Popper>
                                        </Manager>
                                      </Blueprint4.Popover2>
                                    </Tooltip2Provider>
                                  </Blueprint4.Tooltip2>
                                </ControlBarEvalButton>
                                <ControlBarClearButton handleReplOutputClear={[Function: handleReplOutputClear]}>
                                  <ControlButton label=\\"Clear\\" icon=\\"remove\\" onClick={[Function: handleReplOutputClear]}>
                                    <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: handleReplOutputClear]} icon={{...}} rightIcon={false}>
                                      <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: handleReplOutputClear]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                        <Blueprint4.Icon icon={{...}}>
                                          <Blueprint4.Icon icon=\\"remove\\" color={[undefined]}>
                                            <span aria-hidden={true} icon=\\"remove\\" className=\\"bp4-icon bp4-icon-remove\\" title={[undefined]}>
                                              <svg fill={[undefined]} data-icon=\\"remove\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                <path d=\\"M10.99 6.99h-6c-.55 0-1 .45-1 1s.45 1 1 1h6c.55 0 1-.45 1-1s-.45-1-1-1zm-3-7c-4.42 0-8 3.58-8 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.68 6-6 6z\\" fillRule=\\"evenodd\\" />
                                              </svg>
                                            </span>
                                          </Blueprint4.Icon>
                                        </Blueprint4.Icon>
                                        <span className=\\"bp4-button-text\\">
                                          Clear
                                        </span>
                                        <Blueprint4.Icon icon={false} />
                                      </button>
                                    </Blueprint4.Button>
                                  </ControlButton>
                                </ControlBarClearButton>
                              </div>
                              <MediaQuery minWidth={769} />
                            </ReplInput>
                          </div>
                        </HotKeysWrapper>
                      </HotKeysEnabled>
                    </div>
                  </div>
                </Repl>
              </div>
            </div>
          </div>
        </div>
      </Workspace>
    </div>
  </AssessmentWorkspace>
</Provider>"
`;

exports[`AssessmentWorkspace page with MCQ question renders correctly 1`] = `
"<Provider store={{...}}>
  <AssessmentWorkspace assessmentId={0} autogradingResults={{...}} notAttempted={true} canSave={true} assessmentConfiguration={{...}} programPrependValue=\\"\\" programPostpendValue=\\"\\" editorTestcases={{...}} hasUnsavedChanges={false} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, '' ] ], instances: [ { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 2, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 2, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } } ], invocationCallOrder: [ 10, 11 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, '' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handleReplEval={[Function: handleReplEval]} handleSave={[Function: handleSave]} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} isRunning={false} isDebugging={false} enableDebugging={false} output={{...}} questionId={2} replValue=\\"\\" assessment={{...}}>
    <div className=\\"WorkspaceParent bp4-dark\\">
      <Blueprint4.Dialog className=\\"assessment-briefing\\" isOpen={false} canOutsideClickClose={true}>
        <Blueprint4.Overlay className=\\"bp4-overlay-scroll-container\\" isOpen={false} canOutsideClickClose={true} hasBackdrop={true} autoFocus={true} backdropProps={{...}} canEscapeKeyClose={true} enforceFocus={true} lazy={true} shouldReturnFocusOnClose={true} transitionDuration={300} transitionName=\\"bp4-overlay\\" usePortal={true} />
      </Blueprint4.Dialog>
      <Blueprint4.Dialog className=\\"assessment-reset\\" icon=\\"error\\" isCloseButtonShown={true} isOpen={false} onClose={[Function: closeOverlay]} title=\\"Confirmation: Reset editor?\\" canOutsideClickClose={true}>
        <Blueprint4.Overlay className=\\"bp4-overlay-scroll-container\\" icon=\\"error\\" isCloseButtonShown={true} isOpen={false} onClose={[Function: closeOverlay]} title=\\"Confirmation: Reset editor?\\" canOutsideClickClose={true} hasBackdrop={true} autoFocus={true} backdropProps={{...}} canEscapeKeyClose={true} enforceFocus={true} lazy={true} shouldReturnFocusOnClose={true} transitionDuration={300} transitionName=\\"bp4-overlay\\" usePortal={true} />
      </Blueprint4.Dialog>
      <Workspace controlBarProps={{...}} editorContainerProps={[undefined]} handleSideContentHeightChange={[Function: handleSideContentHeightChange]} hasUnsavedChanges={false} mcqProps={{...}} sideBarProps={{...}} sideContentHeight={[undefined]} sideContentProps={{...}} replProps={{...}}>
        <div className=\\"workspace\\">
          <ControlBar editorButtons={{...}} flowButtons={{...}}>
            <div className=\\"ControlBar\\">
              <div className=\\"ControlBar_editor bp4-button-group\\">
                <ControlBarRunButton isEntrypointFileDefined={true} handleEditorEval={[Function: handleEval]}>
                  <Blueprint4.Tooltip2 content=\\"...or press shift-enter in the editor\\" placement=\\"top\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                    <Tooltip2Provider>
                      <Blueprint4.Popover2 modifiers={{...}} content=\\"...or press shift-enter in the editor\\" placement=\\"top\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                        <Manager>
                          <Reference>
                            <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                              <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                <ControlButton label=\\"Run\\" icon=\\"play\\" onClick={[Function: handleEval]} options={{...}} isDisabled={false} className=\\"\\" disabled={[undefined]} tabIndex={0}>
                                  <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className={[undefined]} type={[undefined]} onClick={[Function: handleEval]} icon={{...}} rightIcon={false}>
                                    <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: handleEval]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                      <Blueprint4.Icon icon={{...}}>
                                        <Blueprint4.Icon icon=\\"play\\" color={[undefined]}>
                                          <span aria-hidden={true} icon=\\"play\\" className=\\"bp4-icon bp4-icon-play\\" title={[undefined]}>
                                            <svg fill={[undefined]} data-icon=\\"play\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                              <path d=\\"M12 8c0-.35-.19-.64-.46-.82l.01-.02-6-4-.01.02A.969.969 0 005 3c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1 .21 0 .39-.08.54-.18l.01.02 6-4-.01-.02c.27-.18.46-.47.46-.82z\\" fillRule=\\"evenodd\\" />
                                            </svg>
                                          </span>
                                        </Blueprint4.Icon>
                                      </Blueprint4.Icon>
                                      <span className=\\"bp4-button-text\\">
                                        Run
                                      </span>
                                      <Blueprint4.Icon icon={false} />
                                    </button>
                                  </Blueprint4.Button>
                                </ControlButton>
                              </span>
                            </Blueprint4.ResizeSensor2>
                          </Reference>
                          <Popper innerRef={[Function (anonymous)]} placement=\\"top\\" strategy=\\"absolute\\" modifiers={{...}}>
                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                          </Popper>
                        </Manager>
                      </Blueprint4.Popover2>
                    </Tooltip2Provider>
                  </Blueprint4.Tooltip2>
                </ControlBarRunButton>
                <ControlBarChapterSelect handleChapterSelect={[Function: handleChapterSelect]} isFolderModeEnabled={false} sourceChapter={1} sourceVariant=\\"default\\" disabled={true}>
                  <Blueprint4.Select items={{...}} onItemSelect={[Function: handleChapterSelect]} itemRenderer={[Function (anonymous)]} itemListRenderer={[Function: chapterListRenderer]} filterable={false} disabled={true}>
                    <Blueprint4.QueryList items={{...}} onItemSelect={[Function (anonymous)]} itemRenderer={[Function (anonymous)]} itemListRenderer={[Function: chapterListRenderer]} disabled={true} renderer={[Function (anonymous)]} resetOnQuery={true}>
                      <Blueprint4.Popover autoFocus={false} enforceFocus={false} isOpen={false} disabled={true} position=\\"bottom-left\\" className=\\"\\" onInteraction={[Function (anonymous)]} popoverClassName=\\"bp4-select-popover\\" onOpening={[Function (anonymous)]} onOpened={[Function (anonymous)]} onClosing={[Function (anonymous)]} boundary=\\"scrollParent\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} hoverCloseDelay={300} hoverOpenDelay={150} inheritDarkTheme={true} interactionKind=\\"click\\" minimal={false} modifiers={{...}} openOnTargetFocus={true} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" transitionDuration={300} usePortal={true} wrapperTagName=\\"span\\">
                        <Manager>
                          <span className=\\"bp4-popover-wrapper\\">
                            <Reference innerRef={[Function (anonymous)]}>
                              <InnerReference setReferenceNode={[Function (anonymous)]} innerRef={[Function (anonymous)]}>
                                <Blueprint4.ResizeSensor onResize={[Function (anonymous)]}>
                                  <span onClick={[Function (anonymous)]} aria-haspopup=\\"true\\" className=\\"bp4-popover-target\\">
                                    <div onKeyDown={[Function (anonymous)]} onKeyUp={[undefined]} className=\\"\\" disabled={[undefined]} tabIndex={[undefined]}>
                                      <Blueprint4.Button className=\\"bp4-minimal\\" text=\\"Source §1\\" rightIcon={{...}} disabled={true}>
                                        <button type=\\"button\\" className=\\"bp4-button bp4-disabled bp4-minimal\\" disabled={true} onBlur={[Function (anonymous)]} onClick={[undefined]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={-1}>
                                          <Blueprint4.Icon icon={[undefined]} />
                                          <span className=\\"bp4-button-text\\">
                                            Source §1
                                          </span>
                                          <Blueprint4.Icon icon={{...}} />
                                        </button>
                                      </Blueprint4.Button>
                                    </div>
                                  </span>
                                </Blueprint4.ResizeSensor>
                              </InnerReference>
                            </Reference>
                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover-backdrop\\" backdropProps={{...}} canEscapeKeyClose={true} canOutsideClickClose={true} className={[undefined]} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[Function (anonymous)]} onOpened={[Function (anonymous)]} onOpening={[Function (anonymous)]} transitionDuration={300} transitionName=\\"bp4-popover\\" usePortal={true} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                          </span>
                        </Manager>
                      </Blueprint4.Popover>
                    </Blueprint4.QueryList>
                  </Blueprint4.Select>
                </ControlBarChapterSelect>
              </div>
              <div className=\\"ControlBar_flow bp4-button-group\\">
                <ControlBarPreviousButton onClick={[Function: onClickPrevious]} questionProgress={{...}}>
                  <ControlButton label=\\"Previous\\" icon=\\"arrow-left\\" onClick={[Function: onClickPrevious]}>
                    <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: onClickPrevious]} icon={{...}} rightIcon={false}>
                      <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: onClickPrevious]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                        <Blueprint4.Icon icon={{...}}>
                          <Blueprint4.Icon icon=\\"arrow-left\\" color={[undefined]}>
                            <span aria-hidden={true} icon=\\"arrow-left\\" className=\\"bp4-icon bp4-icon-arrow-left\\" title={[undefined]}>
                              <svg fill={[undefined]} data-icon=\\"arrow-left\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                <path d=\\"M13.99 6.99H4.41L7.7 3.7a1.003 1.003 0 00-1.42-1.42l-5 5a1.014 1.014 0 000 1.42l5 5a1.003 1.003 0 001.42-1.42L4.41 8.99H14c.55 0 1-.45 1-1s-.46-1-1.01-1z\\" fillRule=\\"evenodd\\" />
                              </svg>
                            </span>
                          </Blueprint4.Icon>
                        </Blueprint4.Icon>
                        <span className=\\"bp4-button-text\\">
                          Previous
                        </span>
                        <Blueprint4.Icon icon={false} />
                      </button>
                    </Blueprint4.Button>
                  </ControlButton>
                </ControlBarPreviousButton>
                <ControlBarQuestionViewButton questionProgress={{...}}>
                  <ControlButton label=\\"Question 3 of 5  \\" isDisabled={true}>
                    <Blueprint4.Button disabled={true} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[undefined]} icon={[undefined]} rightIcon={false}>
                      <button type={[undefined]} disabled={true} className=\\"bp4-button bp4-disabled bp4-minimal\\" onClick={[undefined]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={-1}>
                        <Blueprint4.Icon icon={[undefined]} />
                        <span className=\\"bp4-button-text\\">
                          Question 3 of 5  
                        </span>
                        <Blueprint4.Icon icon={false} />
                      </button>
                    </Blueprint4.Button>
                  </ControlButton>
                </ControlBarQuestionViewButton>
                <ControlBarNextButton onClickNext={[Function: onClickNext]} onClickReturn={[Function: onClickReturn]} questionProgress={{...}}>
                  <ControlButton label=\\"Next\\" icon=\\"arrow-right\\" onClick={[Function: onClickNext]} options={{...}}>
                    <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: onClickNext]} icon={false} rightIcon={{...}}>
                      <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: onClickNext]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                        <Blueprint4.Icon icon={false} />
                        <span className=\\"bp4-button-text\\">
                          Next
                        </span>
                        <Blueprint4.Icon icon={{...}}>
                          <Blueprint4.Icon icon=\\"arrow-right\\" color={[undefined]}>
                            <span aria-hidden={true} icon=\\"arrow-right\\" className=\\"bp4-icon bp4-icon-arrow-right\\" title={[undefined]}>
                              <svg fill={[undefined]} data-icon=\\"arrow-right\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                <path d=\\"M14.7 7.29l-5-5a.965.965 0 00-.71-.3 1.003 1.003 0 00-.71 1.71l3.29 3.29H1.99c-.55 0-1 .45-1 1s.45 1 1 1h9.59l-3.29 3.29a1.003 1.003 0 001.42 1.42l5-5c.18-.18.29-.43.29-.71s-.12-.52-.3-.7z\\" fillRule=\\"evenodd\\" />
                              </svg>
                            </span>
                          </Blueprint4.Icon>
                        </Blueprint4.Icon>
                      </button>
                    </Blueprint4.Button>
                  </ControlButton>
                </ControlBarNextButton>
              </div>
              <div className=\\"ControlBar_editingWorkspace bp4-button-group\\" />
            </div>
          </ControlBar>
          <div className=\\"workspace-parent\\">
            <Resizable enable={{...}} minWidth=\\"auto\\" maxWidth=\\"50%\\" onResize={[Function: toggleSideBarDividerDisplay]} onResizeStop={[Function: onResizeStop]} size={{...}} defaultSize={{...}} as=\\"div\\" onResizeStart={[Function: onResizeStart]} style={{...}} grid={{...}} lockAspectRatio={false} lockAspectRatioExtraWidth={0} lockAspectRatioExtraHeight={0} scale={1} resizeRatio={1} snapGap={0}>
              <div style={{...}} className={[undefined]}>
                <SideBar tabs={{...}} isExpanded={true} expandSideBar={[Function: expandSideBar]} collapseSideBar={[Function: collapseSideBar]}>
                  <div className=\\"sidebar-container\\" />
                </SideBar>
                <div className={[undefined]} style={[undefined]} />
              </div>
            </Resizable>
            <div className=\\"row content-parent\\">
              <div className=\\"editor-divider\\" />
              <Resizable className=\\"resize-editor left-parent\\" enable={{...}} minWidth={0} onResize={[Function: toggleEditorDividerDisplay]} defaultSize={{...}} as=\\"div\\" onResizeStart={[Function: onResizeStart]} onResizeStop={[Function: onResizeStop]} style={{...}} grid={{...}} lockAspectRatio={false} lockAspectRatioExtraWidth={0} lockAspectRatioExtraHeight={0} scale={1} resizeRatio={1} snapGap={0}>
                <div style={{...}} className=\\"resize-editor left-parent\\">
                  <McqChooser mcq={{...}} handleMCQSubmit={[Function: handleMCQSubmit]}>
                    <div className=\\"MCQChooser row\\">
                      <Blueprint4.Card className=\\"mcq-content-parent col-xs-12 middle-xs\\" elevation={0} interactive={false}>
                        <div className=\\"bp4-card bp4-elevation-0 mcq-content-parent col-xs-12 middle-xs\\">
                          <div className=\\"row mcq-options-parent between-xs\\">
                            <Blueprint4.Button className=\\"mcq-option col-xs-12\\" active={false} intent=\\"none\\" onClick={[Function (anonymous)]} minimal={true}>
                              <button type=\\"button\\" className=\\"bp4-button bp4-minimal mcq-option col-xs-12\\" onClick={[Function (anonymous)]} disabled={false} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                <Blueprint4.Icon icon={[undefined]} />
                                <span className=\\"bp4-button-text\\">
                                  <Memo(Markdown) content=\\"**Option** \`A\`\\">
                                    <div className=\\"md bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                                  </Memo(Markdown)>
                                </span>
                                <Blueprint4.Icon icon={[undefined]} />
                              </button>
                            </Blueprint4.Button>
                            <Blueprint4.Button className=\\"mcq-option col-xs-12\\" active={false} intent=\\"none\\" onClick={[Function (anonymous)]} minimal={true}>
                              <button type=\\"button\\" className=\\"bp4-button bp4-minimal mcq-option col-xs-12\\" onClick={[Function (anonymous)]} disabled={false} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                <Blueprint4.Icon icon={[undefined]} />
                                <span className=\\"bp4-button-text\\">
                                  <Memo(Markdown) content=\\"### B\\">
                                    <div className=\\"md bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                                  </Memo(Markdown)>
                                </span>
                                <Blueprint4.Icon icon={[undefined]} />
                              </button>
                            </Blueprint4.Button>
                            <Blueprint4.Button className=\\"mcq-option col-xs-12\\" active={false} intent=\\"none\\" onClick={[Function (anonymous)]} minimal={true}>
                              <button type=\\"button\\" className=\\"bp4-button bp4-minimal mcq-option col-xs-12\\" onClick={[Function (anonymous)]} disabled={false} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                <Blueprint4.Icon icon={[undefined]} />
                                <span className=\\"bp4-button-text\\">
                                  <Memo(Markdown) content=\\"C\\">
                                    <div className=\\"md bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                                  </Memo(Markdown)>
                                </span>
                                <Blueprint4.Icon icon={[undefined]} />
                              </button>
                            </Blueprint4.Button>
                            <Blueprint4.Button className=\\"mcq-option col-xs-12\\" active={true} intent=\\"danger\\" onClick={[Function (anonymous)]} minimal={true}>
                              <button type=\\"button\\" className=\\"bp4-button bp4-active bp4-minimal bp4-intent-danger mcq-option col-xs-12\\" onClick={[Function (anonymous)]} disabled={false} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                <Blueprint4.Icon icon={[undefined]} />
                                <span className=\\"bp4-button-text\\">
                                  <Memo(Markdown) content=\\"D\\">
                                    <div className=\\"md bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                                  </Memo(Markdown)>
                                </span>
                                <Blueprint4.Icon icon={[undefined]} />
                              </button>
                            </Blueprint4.Button>
                          </div>
                        </div>
                      </Blueprint4.Card>
                    </div>
                  </McqChooser>
                  <div className={[undefined]} style={[undefined]}>
                    <Resizer direction=\\"right\\" onResizeStart={[Function: bound ]} replaceStyles={[undefined]} className={[undefined]}>
                      <div className=\\"\\" style={{...}} onMouseDown={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} />
                    </Resizer>
                  </div>
                </div>
              </Resizable>
              <div className=\\"right-parent\\">
                <Resizable bounds=\\"parent\\" className=\\"resize-side-content\\" enable={{...}} onResize={[Function: toggleDividerDisplay]} onResizeStop={[Function: onResizeStop]} as=\\"div\\" onResizeStart={[Function: onResizeStart]} style={{...}} grid={{...}} lockAspectRatio={false} lockAspectRatioExtraWidth={0} lockAspectRatioExtraHeight={0} scale={1} resizeRatio={1} snapGap={0}>
                  <div style={{...}} className=\\"resize-side-content\\">
                    <SideContent selectedTabId=\\"question_overview\\" tabs={{...}} onChange={[Function: onChangeTabs]} workspaceLocation=\\"assessment\\">
                      <GenericSideContent tabs={{...}} onChange={[Function: onChangeTabs]} workspaceLocation=\\"assessment\\" renderFunction={[Function: renderFunction]}>
                        <div className=\\"side-content\\">
                          <Blueprint4.Card elevation={0} interactive={false}>
                            <div className=\\"bp4-card bp4-elevation-0\\">
                              <div className=\\"side-content-tabs\\">
                                <Blueprint4.Tabs id=\\"side-content-tabs\\" onChange={[Function (anonymous)]} renderActiveTabPanelOnly={false} selectedTabId=\\"question_overview\\" animate={true} fill={false} large={false} vertical={false}>
                                  <div className=\\"bp4-tabs\\">
                                    <div className=\\"bp4-tab-list\\" onKeyDown={[Function (anonymous)]} onKeyPress={[Function (anonymous)]} role=\\"tablist\\">
                                      <div className=\\"bp4-tab-indicator-wrapper\\" style={{...}}>
                                        <div className=\\"bp4-tab-indicator\\" />
                                      </div>
                                      <Blueprint4.TabTitle id=\\"question_overview\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={true}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_question_overview\\" aria-disabled={false} aria-expanded={true} aria-selected={true} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"question_overview\\" id=\\"bp4-tab-title_side-content-tabs_question_overview\\" role=\\"tab\\" tabIndex={0}>
                                          <Blueprint4.Tooltip2 content=\\"Question 3\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Question 3\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"question_overview-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"ninja\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"ninja\\" className=\\"bp4-icon bp4-icon-ninja\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"ninja\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M20 6s-2.98 2.43-6.12 2.19C13.52 5.31 12.05 0 6 0c0 0 2.41 2.99 2.16 6.12C5.27 6.49 0 7.97 0 14c0 0 2.98-2.43 6.11-2.19C6.47 14.69 7.94 20 14 20c0 0-2.42-2.99-2.16-6.13C14.73 13.51 20 12.02 20 6zm-10 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                      <Blueprint4.TabTitle id=\\"briefing\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={false}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_briefing\\" aria-disabled={false} aria-expanded={false} aria-selected={false} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"briefing\\" id=\\"bp4-tab-title_side-content-tabs_briefing\\" role=\\"tab\\" tabIndex={-1}>
                                          <Blueprint4.Tooltip2 content=\\"Briefing\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Briefing\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"briefing-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"briefcase\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"briefcase\\" className=\\"bp4-icon bp4-icon-briefcase\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"briefcase\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M19 5h-4V2c0-.55-.45-1-1-1H6c-.55 0-1 .45-1 1v3H1c-.55 0-1 .45-1 1v5h4v-1h2v1h8v-1h2v1h4V6c0-.55-.45-1-1-1zm-6 0H7V3h6v2zm3 8h-2v-1H6v1H4v-1H0v6c0 .55.45 1 1 1h18c.55 0 1-.45 1-1v-6h-4v1z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                      <Blueprint4.TabTitle id=\\"autograder\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={false}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_autograder\\" aria-disabled={false} aria-expanded={false} aria-selected={false} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"autograder\\" id=\\"bp4-tab-title_side-content-tabs_autograder\\" role=\\"tab\\" tabIndex={-1}>
                                          <Blueprint4.Tooltip2 content=\\"Autograder\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Autograder\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"autograder-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"airplane\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"airplane\\" className=\\"bp4-icon bp4-icon-airplane\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"airplane\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M20 2c0-1.1-.9-2-2-2-.55 0-1.05.22-1.41.59l-4.84 4.84L2 1 1 3l7.53 5.64L4.17 13H1l-1 1 4 2 2 4 1-1v-3.17l4.36-4.36L17 19l2-1-4.43-9.74 4.84-4.84c.37-.37.59-.87.59-1.42z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_question_overview\\" aria-hidden={false} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_question_overview\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <Memo(Markdown) className=\\"sidecontent-overview\\" content=\\"This is the 3rd question. Oddly enough, it is an ungraded MCQ question that uses the binary tree library! Option C has a null hint!\\" workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <div className=\\"sidecontent-overview bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                                        </Memo(Markdown)>
                                      </div>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_briefing\\" aria-hidden={true} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_briefing\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <Memo(Markdown) className=\\"sidecontent-overview\\" content=\\"This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. \\" workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <div className=\\"sidecontent-overview bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                                        </Memo(Markdown)>
                                      </div>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_autograder\\" aria-hidden={true} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_autograder\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <SideContentAutograder testcases={{...}} autogradingResults={{...}} handleTestcaseEval={[Function: handleTestcaseEval]} workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <div className=\\"Autograder\\">
                                            <Blueprint4.Button className=\\"collapse-button\\" icon=\\"caret-down\\" minimal={true} onClick={[Function (anonymous)]}>
                                              <button type=\\"button\\" className=\\"bp4-button bp4-minimal collapse-button\\" onClick={[Function (anonymous)]} disabled={false} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                <Blueprint4.Icon icon=\\"caret-down\\">
                                                  <span aria-hidden={true} icon=\\"caret-down\\" className=\\"bp4-icon bp4-icon-caret-down\\" title={[undefined]}>
                                                    <svg fill={[undefined]} data-icon=\\"caret-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                      <path d=\\"M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z\\" fillRule=\\"evenodd\\" />
                                                    </svg>
                                                  </span>
                                                </Blueprint4.Icon>
                                                <span className=\\"bp4-button-text\\">
                                                  <span>
                                                    Testcases
                                                  </span>
                                                  <Blueprint4.Tooltip2 content={{...}} placement=\\"left\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                                    <Tooltip2Provider>
                                                      <Blueprint4.Popover2 modifiers={{...}} content={{...}} placement=\\"left\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                        <Manager>
                                                          <Reference>
                                                            <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                              <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                                <Blueprint4.Icon icon=\\"help\\" className=\\"\\" disabled={[undefined]} tabIndex={0}>
                                                                  <span aria-hidden={true} icon=\\"help\\" disabled={[undefined]} tabIndex={0} className=\\"bp4-icon bp4-icon-help\\" title={[undefined]}>
                                                                    <svg fill={[undefined]} data-icon=\\"help\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                      <path d=\\"M8 0C3.58 0 0 3.58 0 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm1 13H7v-2h2v2zm1.93-6.52c-.14.32-.35.64-.62.97L9.25 8.83c-.12.15-.24.29-.28.42-.04.13-.09.3-.09.52V10H7.12V8.88s.05-.51.21-.71L8.4 6.73c.22-.26.35-.49.44-.68.09-.19.12-.38.12-.58 0-.3-.1-.55-.28-.75-.18-.19-.44-.28-.76-.28-.33 0-.59.1-.78.29-.19.19-.33.46-.4.81-.03.11-.1.15-.2.14l-1.7-.25c-.12-.01-.16-.08-.14-.19.12-.82.46-1.47 1.03-1.94.57-.48 1.32-.72 2.25-.72.47 0 .9.07 1.29.22s.72.34 1 .59c.28.25.49.55.65.89.15.35.22.72.22 1.12s-.07.75-.21 1.08z\\" fillRule=\\"evenodd\\" />
                                                                    </svg>
                                                                  </span>
                                                                </Blueprint4.Icon>
                                                              </span>
                                                            </Blueprint4.ResizeSensor2>
                                                          </Reference>
                                                          <Popper innerRef={[Function (anonymous)]} placement=\\"left\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                          </Popper>
                                                        </Manager>
                                                      </Blueprint4.Popover2>
                                                    </Tooltip2Provider>
                                                  </Blueprint4.Tooltip2>
                                                </span>
                                                <Blueprint4.Icon icon={[undefined]} />
                                              </button>
                                            </Blueprint4.Button>
                                            <Blueprint4.Collapse isOpen={true} keepChildrenMounted={true} component=\\"div\\" transitionDuration={200}>
                                              <div className=\\"bp4-collapse\\" style={{...}}>
                                                <div className=\\"bp4-collapse-body\\" style={{...}} aria-hidden={false}>
                                                  <div className=\\"noResults\\">
                                                    There are no testcases provided for this question.
                                                  </div>
                                                </div>
                                              </div>
                                            </Blueprint4.Collapse>
                                            <ControlButton label=\\"Autograder Results\\" icon=\\"caret-down\\" onClick={[Function (anonymous)]} options={{...}}>
                                              <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"collapse-button\\" type={[undefined]} onClick={[Function (anonymous)]} icon={{...}} rightIcon={false}>
                                                <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal collapse-button\\" onClick={[Function (anonymous)]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                  <Blueprint4.Icon icon={{...}}>
                                                    <Blueprint4.Icon icon=\\"caret-down\\" color={[undefined]}>
                                                      <span aria-hidden={true} icon=\\"caret-down\\" className=\\"bp4-icon bp4-icon-caret-down\\" title={[undefined]}>
                                                        <svg fill={[undefined]} data-icon=\\"caret-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                          <path d=\\"M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z\\" fillRule=\\"evenodd\\" />
                                                        </svg>
                                                      </span>
                                                    </Blueprint4.Icon>
                                                  </Blueprint4.Icon>
                                                  <span className=\\"bp4-button-text\\">
                                                    Autograder Results
                                                  </span>
                                                  <Blueprint4.Icon icon={false} />
                                                </button>
                                              </Blueprint4.Button>
                                            </ControlButton>
                                            <Blueprint4.Collapse isOpen={true} keepChildrenMounted={true} component=\\"div\\" transitionDuration={200}>
                                              <div className=\\"bp4-collapse\\" style={{...}}>
                                                <div className=\\"bp4-collapse-body\\" style={{...}} aria-hidden={false}>
                                                  <div className=\\"noResults\\">
                                                    There are no results to show.
                                                  </div>
                                                </div>
                                              </div>
                                            </Blueprint4.Collapse>
                                          </div>
                                        </SideContentAutograder>
                                      </div>
                                    </div>
                                  </div>
                                </Blueprint4.Tabs>
                              </div>
                            </div>
                          </Blueprint4.Card>
                        </div>
                      </GenericSideContent>
                    </SideContent>
                    <div className=\\"side-content-divider\\" />
                    <div className={[undefined]} style={[undefined]}>
                      <Resizer direction=\\"bottom\\" onResizeStart={[Function: bound ]} replaceStyles={[undefined]} className={[undefined]}>
                        <div className=\\"\\" style={{...}} onMouseDown={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} />
                      </Resizer>
                    </div>
                  </div>
                </Resizable>
                <Repl handleBrowseHistoryDown={[Function: handleBrowseHistoryDown]} handleBrowseHistoryUp={[Function: handleBrowseHistoryUp]} handleReplEval={[Function: handleReplEval]} handleReplValueChange={[Function: handleReplValueChange]} output={{...}} replValue=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibrary=\\"NONE\\" replButtons={{...}}>
                  <div className=\\"Repl\\" style={{...}}>
                    <div className=\\"repl-output-parent\\">
                      <HotKeysEnabled className=\\"repl-input-parent row bp4-card bp4-elevation-0\\" handlers={{...}}>
                        <HotKeysWrapper hotKeys={{...}} className=\\"repl-input-parent row bp4-card bp4-elevation-0\\">
                          <div onFocus={[Function: bound _handleFocus]} onBlur={[Function: bound _handleBlur]} tabIndex=\\"-1\\" className=\\"repl-input-parent row bp4-card bp4-elevation-0\\">
                            <ReplInput handleBrowseHistoryDown={[Function: handleBrowseHistoryDown]} handleBrowseHistoryUp={[Function: handleBrowseHistoryUp]} handleReplEval={[Function: handleReplEval]} handleReplValueChange={[Function: handleReplValueChange]} output={{...}} replValue=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibrary=\\"NONE\\" replButtons={{...}}>
                              <ReactAce className=\\"repl-react-ace react-ace\\" mode=\\"source1defaultNONE\\" theme=\\"source\\" height=\\"1px\\" width=\\"100%\\" value=\\"\\" onChange={[Function: handleReplValueChange]} commands={{...}} minLines={1} maxLines={20} fontSize={17} highlightActiveLine={false} showGutter={false} showPrintMargin={false} setOptions={{...}} name=\\"ace-editor\\" focus={false} enableSnippets={false} onPaste={{...}} onLoad={{...}} onScroll={{...}} readOnly={false} tabSize={4} cursorStart={1} editorProps={{...}} style={{...}} scrollMargin={{...}} wrapEnabled={false} enableBasicAutocompletion={false} enableLiveAutocompletion={false} placeholder={{...}} navigateToFileEnd={true}>
                                <div id=\\"ace-editor\\" style={{...}} />
                              </ReactAce>
                              <div className=\\"bp4-button-group bp4-dark\\">
                                <ControlBarEvalButton handleReplEval={[Function: handleReplEval]} isRunning={false}>
                                  <Blueprint4.Tooltip2 content=\\"...or press shift-enter in the REPL\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                    <Tooltip2Provider>
                                      <Blueprint4.Popover2 modifiers={{...}} content=\\"...or press shift-enter in the REPL\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                        <Manager>
                                          <Reference>
                                            <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                              <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                <ControlButton label=\\"Eval\\" icon=\\"code\\" onClick={[Function: handleReplEval]} className=\\"\\" disabled={[undefined]} tabIndex={0}>
                                                  <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: handleReplEval]} icon={{...}} rightIcon={false}>
                                                    <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: handleReplEval]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                      <Blueprint4.Icon icon={{...}}>
                                                        <Blueprint4.Icon icon=\\"code\\" color={[undefined]}>
                                                          <span aria-hidden={true} icon=\\"code\\" className=\\"bp4-icon bp4-icon-code\\" title={[undefined]}>
                                                            <svg fill={[undefined]} data-icon=\\"code\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                              <path d=\\"M15.71 7.29l-3-3a1.003 1.003 0 00-1.42 1.42L13.59 8l-2.29 2.29c-.19.18-.3.43-.3.71a1.003 1.003 0 001.71.71l3-3c.18-.18.29-.43.29-.71 0-.28-.11-.53-.29-.71zM5 5a1.003 1.003 0 00-1.71-.71l-3 3C.11 7.47 0 7.72 0 8c0 .28.11.53.29.71l3 3a1.003 1.003 0 001.42-1.42L2.41 8 4.7 5.71c.19-.18.3-.43.3-.71zm4-3c-.48 0-.87.35-.96.81l-2 10c-.01.06-.04.12-.04.19 0 .55.45 1 1 1 .48 0 .87-.35.96-.81l2-10c.01-.06.04-.12.04-.19 0-.55-.45-1-1-1z\\" fillRule=\\"evenodd\\" />
                                                            </svg>
                                                          </span>
                                                        </Blueprint4.Icon>
                                                      </Blueprint4.Icon>
                                                      <span className=\\"bp4-button-text\\">
                                                        Eval
                                                      </span>
                                                      <Blueprint4.Icon icon={false} />
                                                    </button>
                                                  </Blueprint4.Button>
                                                </ControlButton>
                                              </span>
                                            </Blueprint4.ResizeSensor2>
                                          </Reference>
                                          <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                          </Popper>
                                        </Manager>
                                      </Blueprint4.Popover2>
                                    </Tooltip2Provider>
                                  </Blueprint4.Tooltip2>
                                </ControlBarEvalButton>
                                <ControlBarClearButton handleReplOutputClear={[Function: handleReplOutputClear]}>
                                  <ControlButton label=\\"Clear\\" icon=\\"remove\\" onClick={[Function: handleReplOutputClear]}>
                                    <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: handleReplOutputClear]} icon={{...}} rightIcon={false}>
                                      <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: handleReplOutputClear]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                        <Blueprint4.Icon icon={{...}}>
                                          <Blueprint4.Icon icon=\\"remove\\" color={[undefined]}>
                                            <span aria-hidden={true} icon=\\"remove\\" className=\\"bp4-icon bp4-icon-remove\\" title={[undefined]}>
                                              <svg fill={[undefined]} data-icon=\\"remove\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                <path d=\\"M10.99 6.99h-6c-.55 0-1 .45-1 1s.45 1 1 1h6c.55 0 1-.45 1-1s-.45-1-1-1zm-3-7c-4.42 0-8 3.58-8 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.68 6-6 6z\\" fillRule=\\"evenodd\\" />
                                              </svg>
                                            </span>
                                          </Blueprint4.Icon>
                                        </Blueprint4.Icon>
                                        <span className=\\"bp4-button-text\\">
                                          Clear
                                        </span>
                                        <Blueprint4.Icon icon={false} />
                                      </button>
                                    </Blueprint4.Button>
                                  </ControlButton>
                                </ControlBarClearButton>
                              </div>
                              <MediaQuery minWidth={769} />
                            </ReplInput>
                          </div>
                        </HotKeysWrapper>
                      </HotKeysEnabled>
                    </div>
                  </div>
                </Repl>
              </div>
            </div>
          </div>
        </div>
      </Workspace>
    </div>
  </AssessmentWorkspace>
</Provider>"
`;

exports[`AssessmentWorkspace page with overdue assessment renders correctly 1`] = `
"<Provider store={{...}}>
  <AssessmentWorkspace assessmentId={0} autogradingResults={{...}} notAttempted={true} canSave={false} assessmentConfiguration={{...}} programPrependValue=\\"\\" programPostpendValue=\\"\\" editorTestcases={{...}} hasUnsavedChanges={false} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ] ], instances: [ { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: false, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: false, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: false, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: false, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } } ], invocationCallOrder: [ 6, 7, 8, 9 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handleReplEval={[Function: handleReplEval]} handleSave={[Function: handleSave]} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} isRunning={false} isDebugging={false} enableDebugging={false} output={{...}} questionId={0} replValue=\\"\\" assessment={{...}}>
    <div className=\\"WorkspaceParent bp4-dark\\">
      <Blueprint4.Dialog className=\\"assessment-briefing\\" isOpen={true} canOutsideClickClose={true}>
        <Blueprint4.Overlay className=\\"bp4-overlay-scroll-container\\" isOpen={true} canOutsideClickClose={true} hasBackdrop={true} autoFocus={true} backdropProps={{...}} canEscapeKeyClose={true} enforceFocus={true} lazy={true} shouldReturnFocusOnClose={true} transitionDuration={300} transitionName=\\"bp4-overlay\\" usePortal={true}>
          <Blueprint4.Portal className={[undefined]} container={{...}}>
            <Portal containerInfo={{...}}>
              <TransitionGroup appear={true} aria-live=\\"polite\\" className=\\"bp4-overlay bp4-overlay-open bp4-overlay-scroll-container\\" component=\\"div\\" onKeyDown={[Function (anonymous)]} childFactory={[Function: childFactory]}>
                <div aria-live=\\"polite\\" className=\\"bp4-overlay bp4-overlay-open bp4-overlay-scroll-container\\" onKeyDown={[Function (anonymous)]}>
                  <CSSTransition classNames=\\"bp4-overlay\\" addEndListener={[Function (anonymous)]} timeout={300} unmountOnExit={true} onExited={[Function: bound bound handleExited]} in={true} exit={[undefined]} enter={[undefined]}>
                    <Transition addEndListener={[Function (anonymous)]} timeout={300} unmountOnExit={true} onExited={[Function (anonymous)]} in={true} exit={true} enter={true} onEnter={[Function (anonymous)]} onEntered={[Function (anonymous)]} onEntering={[Function (anonymous)]} onExit={[Function (anonymous)]} onExiting={[Function (anonymous)]} mountOnEnter={false} appear={false}>
                      <div tabIndex={0} className=\\"bp4-overlay-start-focus-trap\\" onFocus={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} />
                    </Transition>
                  </CSSTransition>
                  <CSSTransition classNames=\\"bp4-overlay\\" timeout={300} addEndListener={[Function (anonymous)]} onExited={[Function: bound bound handleExited]} in={true} exit={[undefined]} enter={[undefined]}>
                    <Transition timeout={300} addEndListener={[Function (anonymous)]} onExited={[Function (anonymous)]} in={true} exit={true} enter={true} onEnter={[Function (anonymous)]} onEntered={[Function (anonymous)]} onEntering={[Function (anonymous)]} onExit={[Function (anonymous)]} onExiting={[Function (anonymous)]} mountOnEnter={false} unmountOnExit={false} appear={false}>
                      <div className=\\"bp4-overlay-backdrop\\" onMouseDown={[Function (anonymous)]} />
                    </Transition>
                  </CSSTransition>
                  <CSSTransition classNames=\\"bp4-overlay\\" onEntering={[undefined]} onEntered={[undefined]} onExiting={[undefined]} onExited={[Function: bound bound handleExited]} timeout={300} addEndListener={[Function (anonymous)]} in={true} exit={[undefined]} enter={[undefined]}>
                    <Transition onEntering={[Function (anonymous)]} onEntered={[Function (anonymous)]} onExiting={[Function (anonymous)]} onExited={[Function (anonymous)]} timeout={300} addEndListener={[Function (anonymous)]} in={true} exit={true} enter={true} onEnter={[Function (anonymous)]} onExit={[Function (anonymous)]} mountOnEnter={false} unmountOnExit={false} appear={false}>
                      <div className=\\"bp4-dialog-container bp4-overlay-content\\">
                        <div className=\\"bp4-dialog assessment-briefing\\" role=\\"dialog\\" aria-labelledby={[undefined]} aria-describedby={[undefined]} style={[undefined]}>
                          <Blueprint4.Card elevation={0} interactive={false}>
                            <div className=\\"bp4-card bp4-elevation-0\\">
                              <Memo(Markdown) content=\\"This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. \\">
                                <div className=\\"md bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                              </Memo(Markdown)>
                              <Blueprint4.Button className=\\"assessment-briefing-button\\" onClick={[Function: onClick]} text=\\"Continue\\">
                                <button type=\\"button\\" className=\\"bp4-button assessment-briefing-button\\" onClick={[Function: onClick]} disabled={false} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                  <Blueprint4.Icon icon={[undefined]} />
                                  <span className=\\"bp4-button-text\\">
                                    Continue
                                  </span>
                                  <Blueprint4.Icon icon={[undefined]} />
                                </button>
                              </Blueprint4.Button>
                            </div>
                          </Blueprint4.Card>
                        </div>
                      </div>
                    </Transition>
                  </CSSTransition>
                  <CSSTransition classNames=\\"bp4-overlay\\" addEndListener={[Function (anonymous)]} timeout={300} unmountOnExit={true} onExited={[Function: bound bound handleExited]} in={true} exit={[undefined]} enter={[undefined]}>
                    <Transition addEndListener={[Function (anonymous)]} timeout={300} unmountOnExit={true} onExited={[Function (anonymous)]} in={true} exit={true} enter={true} onEnter={[Function (anonymous)]} onEntered={[Function (anonymous)]} onEntering={[Function (anonymous)]} onExit={[Function (anonymous)]} onExiting={[Function (anonymous)]} mountOnEnter={false} appear={false}>
                      <div tabIndex={0} className=\\"bp4-overlay-end-focus-trap\\" onFocus={[Function (anonymous)]} />
                    </Transition>
                  </CSSTransition>
                </div>
              </TransitionGroup>
            </Portal>
          </Blueprint4.Portal>
        </Blueprint4.Overlay>
      </Blueprint4.Dialog>
      <Blueprint4.Dialog className=\\"assessment-reset\\" icon=\\"error\\" isCloseButtonShown={true} isOpen={false} onClose={[Function: closeOverlay]} title=\\"Confirmation: Reset editor?\\" canOutsideClickClose={true}>
        <Blueprint4.Overlay className=\\"bp4-overlay-scroll-container\\" icon=\\"error\\" isCloseButtonShown={true} isOpen={false} onClose={[Function: closeOverlay]} title=\\"Confirmation: Reset editor?\\" canOutsideClickClose={true} hasBackdrop={true} autoFocus={true} backdropProps={{...}} canEscapeKeyClose={true} enforceFocus={true} lazy={true} shouldReturnFocusOnClose={true} transitionDuration={300} transitionName=\\"bp4-overlay\\" usePortal={true} />
      </Blueprint4.Dialog>
      <Workspace controlBarProps={{...}} editorContainerProps={{...}} handleSideContentHeightChange={[Function: handleSideContentHeightChange]} hasUnsavedChanges={false} mcqProps={{...}} sideBarProps={{...}} sideContentHeight={[undefined]} sideContentProps={{...}} replProps={{...}}>
        <div className=\\"workspace\\">
          <ControlBar editorButtons={{...}} flowButtons={{...}}>
            <div className=\\"ControlBar\\">
              <div className=\\"ControlBar_editor bp4-button-group\\">
                <ControlBarRunButton isEntrypointFileDefined={true} handleEditorEval={[Function: handleEval]}>
                  <Blueprint4.Tooltip2 content=\\"...or press shift-enter in the editor\\" placement=\\"top\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                    <Tooltip2Provider>
                      <Blueprint4.Popover2 modifiers={{...}} content=\\"...or press shift-enter in the editor\\" placement=\\"top\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                        <Manager>
                          <Reference>
                            <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                              <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                <ControlButton label=\\"Run\\" icon=\\"play\\" onClick={[Function: handleEval]} options={{...}} isDisabled={false} className=\\"\\" disabled={[undefined]} tabIndex={0}>
                                  <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className={[undefined]} type={[undefined]} onClick={[Function: handleEval]} icon={{...}} rightIcon={false}>
                                    <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: handleEval]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                      <Blueprint4.Icon icon={{...}}>
                                        <Blueprint4.Icon icon=\\"play\\" color={[undefined]}>
                                          <span aria-hidden={true} icon=\\"play\\" className=\\"bp4-icon bp4-icon-play\\" title={[undefined]}>
                                            <svg fill={[undefined]} data-icon=\\"play\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                              <path d=\\"M12 8c0-.35-.19-.64-.46-.82l.01-.02-6-4-.01.02A.969.969 0 005 3c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1 .21 0 .39-.08.54-.18l.01.02 6-4-.01-.02c.27-.18.46-.47.46-.82z\\" fillRule=\\"evenodd\\" />
                                            </svg>
                                          </span>
                                        </Blueprint4.Icon>
                                      </Blueprint4.Icon>
                                      <span className=\\"bp4-button-text\\">
                                        Run
                                      </span>
                                      <Blueprint4.Icon icon={false} />
                                    </button>
                                  </Blueprint4.Button>
                                </ControlButton>
                              </span>
                            </Blueprint4.ResizeSensor2>
                          </Reference>
                          <Popper innerRef={[Function (anonymous)]} placement=\\"top\\" strategy=\\"absolute\\" modifiers={{...}}>
                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                          </Popper>
                        </Manager>
                      </Blueprint4.Popover2>
                    </Tooltip2Provider>
                  </Blueprint4.Tooltip2>
                </ControlBarRunButton>
                <ControlBarResetButton onClick={[Function: onClickResetTemplate]}>
                  <ControlButton label=\\"Reset\\" icon=\\"repeat\\" onClick={[Function: onClickResetTemplate]}>
                    <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: onClickResetTemplate]} icon={{...}} rightIcon={false}>
                      <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: onClickResetTemplate]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                        <Blueprint4.Icon icon={{...}}>
                          <Blueprint4.Icon icon=\\"repeat\\" color={[undefined]}>
                            <span aria-hidden={true} icon=\\"repeat\\" className=\\"bp4-icon bp4-icon-repeat\\" title={[undefined]}>
                              <svg fill={[undefined]} data-icon=\\"repeat\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                <path d=\\"M10 5c0 .55.45 1 1 1h4c.55 0 1-.45 1-1V1c0-.55-.45-1-1-1s-1 .45-1 1v1.74A7.95 7.95 0 008 0C3.58 0 0 3.58 0 8c0 4.06 3.02 7.4 6.94 7.92.02 0 .04.01.06.01.33.04.66.07 1 .07 4.42 0 8-3.58 8-8 0-.55-.45-1-1-1s-1 .45-1 1c0 3.31-2.69 6-6 6-.71 0-1.37-.15-2-.38v.01C3.67 12.81 2 10.61 2 8c0-3.31 2.69-6 6-6 1.77 0 3.36.78 4.46 2H11c-.55 0-1 .45-1 1z\\" fillRule=\\"evenodd\\" />
                              </svg>
                            </span>
                          </Blueprint4.Icon>
                        </Blueprint4.Icon>
                        <span className=\\"bp4-button-text\\">
                          Reset
                        </span>
                        <Blueprint4.Icon icon={false} />
                      </button>
                    </Blueprint4.Button>
                  </ControlButton>
                </ControlBarResetButton>
                <ControlBarChapterSelect handleChapterSelect={[Function: handleChapterSelect]} isFolderModeEnabled={false} sourceChapter={1} sourceVariant=\\"default\\" disabled={true}>
                  <Blueprint4.Select items={{...}} onItemSelect={[Function: handleChapterSelect]} itemRenderer={[Function (anonymous)]} itemListRenderer={[Function: chapterListRenderer]} filterable={false} disabled={true}>
                    <Blueprint4.QueryList items={{...}} onItemSelect={[Function (anonymous)]} itemRenderer={[Function (anonymous)]} itemListRenderer={[Function: chapterListRenderer]} disabled={true} renderer={[Function (anonymous)]} resetOnQuery={true}>
                      <Blueprint4.Popover autoFocus={false} enforceFocus={false} isOpen={false} disabled={true} position=\\"bottom-left\\" className=\\"\\" onInteraction={[Function (anonymous)]} popoverClassName=\\"bp4-select-popover\\" onOpening={[Function (anonymous)]} onOpened={[Function (anonymous)]} onClosing={[Function (anonymous)]} boundary=\\"scrollParent\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} hoverCloseDelay={300} hoverOpenDelay={150} inheritDarkTheme={true} interactionKind=\\"click\\" minimal={false} modifiers={{...}} openOnTargetFocus={true} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" transitionDuration={300} usePortal={true} wrapperTagName=\\"span\\">
                        <Manager>
                          <span className=\\"bp4-popover-wrapper\\">
                            <Reference innerRef={[Function (anonymous)]}>
                              <InnerReference setReferenceNode={[Function (anonymous)]} innerRef={[Function (anonymous)]}>
                                <Blueprint4.ResizeSensor onResize={[Function (anonymous)]}>
                                  <span onClick={[Function (anonymous)]} aria-haspopup=\\"true\\" className=\\"bp4-popover-target\\">
                                    <div onKeyDown={[Function (anonymous)]} onKeyUp={[undefined]} className=\\"\\" disabled={[undefined]} tabIndex={[undefined]}>
                                      <Blueprint4.Button className=\\"bp4-minimal\\" text=\\"Source §1\\" rightIcon={{...}} disabled={true}>
                                        <button type=\\"button\\" className=\\"bp4-button bp4-disabled bp4-minimal\\" disabled={true} onBlur={[Function (anonymous)]} onClick={[undefined]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={-1}>
                                          <Blueprint4.Icon icon={[undefined]} />
                                          <span className=\\"bp4-button-text\\">
                                            Source §1
                                          </span>
                                          <Blueprint4.Icon icon={{...}} />
                                        </button>
                                      </Blueprint4.Button>
                                    </div>
                                  </span>
                                </Blueprint4.ResizeSensor>
                              </InnerReference>
                            </Reference>
                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover-backdrop\\" backdropProps={{...}} canEscapeKeyClose={true} canOutsideClickClose={true} className={[undefined]} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[Function (anonymous)]} onOpened={[Function (anonymous)]} onOpening={[Function (anonymous)]} transitionDuration={300} transitionName=\\"bp4-popover\\" usePortal={true} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                          </span>
                        </Manager>
                      </Blueprint4.Popover>
                    </Blueprint4.QueryList>
                  </Blueprint4.Select>
                </ControlBarChapterSelect>
              </div>
              <div className=\\"ControlBar_flow bp4-button-group\\">
                <ControlBarPreviousButton onClick={[Function: onClickPrevious]} questionProgress={{...}} />
                <ControlBarQuestionViewButton questionProgress={{...}}>
                  <ControlButton label=\\"Question 1 of 5  \\" isDisabled={true}>
                    <Blueprint4.Button disabled={true} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[undefined]} icon={[undefined]} rightIcon={false}>
                      <button type={[undefined]} disabled={true} className=\\"bp4-button bp4-disabled bp4-minimal\\" onClick={[undefined]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={-1}>
                        <Blueprint4.Icon icon={[undefined]} />
                        <span className=\\"bp4-button-text\\">
                          Question 1 of 5  
                        </span>
                        <Blueprint4.Icon icon={false} />
                      </button>
                    </Blueprint4.Button>
                  </ControlButton>
                </ControlBarQuestionViewButton>
                <ControlBarNextButton onClickNext={[Function: onClickNext]} onClickReturn={[Function: onClickReturn]} questionProgress={{...}}>
                  <ControlButton label=\\"Next\\" icon=\\"arrow-right\\" onClick={[Function: onClickNext]} options={{...}}>
                    <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: onClickNext]} icon={false} rightIcon={{...}}>
                      <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: onClickNext]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                        <Blueprint4.Icon icon={false} />
                        <span className=\\"bp4-button-text\\">
                          Next
                        </span>
                        <Blueprint4.Icon icon={{...}}>
                          <Blueprint4.Icon icon=\\"arrow-right\\" color={[undefined]}>
                            <span aria-hidden={true} icon=\\"arrow-right\\" className=\\"bp4-icon bp4-icon-arrow-right\\" title={[undefined]}>
                              <svg fill={[undefined]} data-icon=\\"arrow-right\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                <path d=\\"M14.7 7.29l-5-5a.965.965 0 00-.71-.3 1.003 1.003 0 00-.71 1.71l3.29 3.29H1.99c-.55 0-1 .45-1 1s.45 1 1 1h9.59l-3.29 3.29a1.003 1.003 0 001.42 1.42l5-5c.18-.18.29-.43.29-.71s-.12-.52-.3-.7z\\" fillRule=\\"evenodd\\" />
                              </svg>
                            </span>
                          </Blueprint4.Icon>
                        </Blueprint4.Icon>
                      </button>
                    </Blueprint4.Button>
                  </ControlButton>
                </ControlBarNextButton>
              </div>
              <div className=\\"ControlBar_editingWorkspace bp4-button-group\\" />
            </div>
          </ControlBar>
          <div className=\\"workspace-parent\\">
            <Resizable enable={{...}} minWidth=\\"auto\\" maxWidth=\\"50%\\" onResize={[Function: toggleSideBarDividerDisplay]} onResizeStop={[Function: onResizeStop]} size={{...}} defaultSize={{...}} as=\\"div\\" onResizeStart={[Function: onResizeStart]} style={{...}} grid={{...}} lockAspectRatio={false} lockAspectRatioExtraWidth={0} lockAspectRatioExtraHeight={0} scale={1} resizeRatio={1} snapGap={0}>
              <div style={{...}} className={[undefined]}>
                <SideBar tabs={{...}} isExpanded={true} expandSideBar={[Function: expandSideBar]} collapseSideBar={[Function: collapseSideBar]}>
                  <div className=\\"sidebar-container\\" />
                </SideBar>
                <div className={[undefined]} style={[undefined]} />
              </div>
            </Resizable>
            <div className=\\"row content-parent\\">
              <div className=\\"editor-divider\\" />
              <Resizable className=\\"resize-editor left-parent\\" enable={{...}} minWidth={0} onResize={[Function: toggleEditorDividerDisplay]} defaultSize={{...}} as=\\"div\\" onResizeStart={[Function: onResizeStart]} onResizeStop={[Function: onResizeStop]} style={{...}} grid={{...}} lockAspectRatio={false} lockAspectRatioExtraWidth={0} lockAspectRatioExtraHeight={0} scale={1} resizeRatio={1} snapGap={0}>
                <div style={{...}} className=\\"resize-editor left-parent\\">
                  <EditorContainer editorVariant=\\"normal\\" isFolderModeEnabled={false} activeEditorTabIndex={0} setActiveEditorTabIndex={[Function (anonymous)]} removeEditorTabByIndex={[Function (anonymous)]} editorTabs={{...}} editorSessionId=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibraryName=\\"NONE\\" handleDeclarationNavigate={[Function: handleDeclarationNavigate]} handleEditorEval={[Function: handleEval]} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ] ], instances: [ { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: false, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: false, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: false, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: false, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } } ], invocationCallOrder: [ 6, 7, 8, 9 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handlePromptAutocomplete={[Function: handlePromptAutocomplete]} isEditorAutorun={false} onChange={[Function: onChangeMethod]} onCursorChange={[Function: onCursorChangeMethod]} onSelectionChange={[Function: onSelectionChangeMethod]}>
                    <div className=\\"editor-container\\">
                      <Component editorVariant=\\"normal\\" editorSessionId=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibraryName=\\"NONE\\" handleDeclarationNavigate={[Function: handleDeclarationNavigate]} handleEditorEval={[Function: handleEval]} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ] ], instances: [ { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: false, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: false, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: false, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: false, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } } ], invocationCallOrder: [ 6, 7, 8, 9 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handlePromptAutocomplete={[Function: handlePromptAutocomplete]} isEditorAutorun={false} onChange={[Function: onChangeMethod]} onCursorChange={[Function: onCursorChangeMethod]} onSelectionChange={[Function: onSelectionChangeMethod]} editorTabIndex={0} editorValue=\\"\\" filePath={[undefined]} highlightedLines={{...}} breakpoints={{...}}>
                        <MockEditor editorVariant=\\"normal\\" editorSessionId=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibraryName=\\"NONE\\" handleDeclarationNavigate={[Function: handleDeclarationNavigate]} handleEditorEval={[Function: handleEval]} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ] ], instances: [ { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: false, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: false, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: false, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: false, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } } ], invocationCallOrder: [ 6, 7, 8, 9 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handlePromptAutocomplete={[Function: handlePromptAutocomplete]} isEditorAutorun={false} onChange={[Function: onChangeMethod]} onCursorChange={[Function: onCursorChangeMethod]} onSelectionChange={[Function: onSelectionChangeMethod]} editorTabIndex={0} editorValue=\\"\\" filePath={[undefined]} highlightedLines={{...}} breakpoints={{...}}>
                          <div id=\\"mock-editor\\" />
                        </MockEditor>
                      </Component>
                    </div>
                  </EditorContainer>
                  <div className={[undefined]} style={[undefined]}>
                    <Resizer direction=\\"right\\" onResizeStart={[Function: bound ]} replaceStyles={[undefined]} className={[undefined]}>
                      <div className=\\"\\" style={{...}} onMouseDown={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} />
                    </Resizer>
                  </div>
                </div>
              </Resizable>
              <div className=\\"right-parent\\">
                <Resizable bounds=\\"parent\\" className=\\"resize-side-content\\" enable={{...}} onResize={[Function: toggleDividerDisplay]} onResizeStop={[Function: onResizeStop]} as=\\"div\\" onResizeStart={[Function: onResizeStart]} style={{...}} grid={{...}} lockAspectRatio={false} lockAspectRatioExtraWidth={0} lockAspectRatioExtraHeight={0} scale={1} resizeRatio={1} snapGap={0}>
                  <div style={{...}} className=\\"resize-side-content\\">
                    <SideContent selectedTabId=\\"question_overview\\" tabs={{...}} onChange={[Function: onChangeTabs]} workspaceLocation=\\"assessment\\">
                      <GenericSideContent tabs={{...}} onChange={[Function: onChangeTabs]} workspaceLocation=\\"assessment\\" renderFunction={[Function: renderFunction]}>
                        <div className=\\"side-content\\">
                          <Blueprint4.Card elevation={0} interactive={false}>
                            <div className=\\"bp4-card bp4-elevation-0\\">
                              <div className=\\"side-content-tabs\\">
                                <Blueprint4.Tabs id=\\"side-content-tabs\\" onChange={[Function (anonymous)]} renderActiveTabPanelOnly={false} selectedTabId=\\"question_overview\\" animate={true} fill={false} large={false} vertical={false}>
                                  <div className=\\"bp4-tabs\\">
                                    <div className=\\"bp4-tab-list\\" onKeyDown={[Function (anonymous)]} onKeyPress={[Function (anonymous)]} role=\\"tablist\\">
                                      <div className=\\"bp4-tab-indicator-wrapper\\" style={{...}}>
                                        <div className=\\"bp4-tab-indicator\\" />
                                      </div>
                                      <Blueprint4.TabTitle id=\\"question_overview\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={true}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_question_overview\\" aria-disabled={false} aria-expanded={true} aria-selected={true} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"question_overview\\" id=\\"bp4-tab-title_side-content-tabs_question_overview\\" role=\\"tab\\" tabIndex={0}>
                                          <Blueprint4.Tooltip2 content=\\"Question 1\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Question 1\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"question_overview-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"ninja\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"ninja\\" className=\\"bp4-icon bp4-icon-ninja\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"ninja\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M20 6s-2.98 2.43-6.12 2.19C13.52 5.31 12.05 0 6 0c0 0 2.41 2.99 2.16 6.12C5.27 6.49 0 7.97 0 14c0 0 2.98-2.43 6.11-2.19C6.47 14.69 7.94 20 14 20c0 0-2.42-2.99-2.16-6.13C14.73 13.51 20 12.02 20 6zm-10 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                      <Blueprint4.TabTitle id=\\"briefing\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={false}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_briefing\\" aria-disabled={false} aria-expanded={false} aria-selected={false} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"briefing\\" id=\\"bp4-tab-title_side-content-tabs_briefing\\" role=\\"tab\\" tabIndex={-1}>
                                          <Blueprint4.Tooltip2 content=\\"Briefing\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Briefing\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"briefing-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"briefcase\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"briefcase\\" className=\\"bp4-icon bp4-icon-briefcase\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"briefcase\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M19 5h-4V2c0-.55-.45-1-1-1H6c-.55 0-1 .45-1 1v3H1c-.55 0-1 .45-1 1v5h4v-1h2v1h8v-1h2v1h4V6c0-.55-.45-1-1-1zm-6 0H7V3h6v2zm3 8h-2v-1H6v1H4v-1H0v6c0 .55.45 1 1 1h18c.55 0 1-.45 1-1v-6h-4v1z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                      <Blueprint4.TabTitle id=\\"autograder\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={false}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_autograder\\" aria-disabled={false} aria-expanded={false} aria-selected={false} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"autograder\\" id=\\"bp4-tab-title_side-content-tabs_autograder\\" role=\\"tab\\" tabIndex={-1}>
                                          <Blueprint4.Tooltip2 content=\\"Autograder\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Autograder\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"autograder-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"airplane\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"airplane\\" className=\\"bp4-icon bp4-icon-airplane\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"airplane\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M20 2c0-1.1-.9-2-2-2-.55 0-1.05.22-1.41.59l-4.84 4.84L2 1 1 3l7.53 5.64L4.17 13H1l-1 1 4 2 2 4 1-1v-3.17l4.36-4.36L17 19l2-1-4.43-9.74 4.84-4.84c.37-.37.59-.87.59-1.42z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_question_overview\\" aria-hidden={false} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_question_overview\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <Memo(Markdown) className=\\"sidecontent-overview\\" content=\\"\\\\n  This question has an id of \`0\`.\\\\n  \\\\n  \`\`\`\\\\n  What\\\\'s your favourite dinner food?\\\\n  \`\`\`\\\\n  \\" workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <div className=\\"sidecontent-overview bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                                        </Memo(Markdown)>
                                      </div>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_briefing\\" aria-hidden={true} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_briefing\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <Memo(Markdown) className=\\"sidecontent-overview\\" content=\\"This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. \\" workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <div className=\\"sidecontent-overview bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                                        </Memo(Markdown)>
                                      </div>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_autograder\\" aria-hidden={true} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_autograder\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <SideContentAutograder testcases={{...}} autogradingResults={{...}} handleTestcaseEval={[Function: handleTestcaseEval]} workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <div className=\\"Autograder\\">
                                            <Blueprint4.Button className=\\"collapse-button\\" icon=\\"caret-down\\" minimal={true} onClick={[Function (anonymous)]}>
                                              <button type=\\"button\\" className=\\"bp4-button bp4-minimal collapse-button\\" onClick={[Function (anonymous)]} disabled={false} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                <Blueprint4.Icon icon=\\"caret-down\\">
                                                  <span aria-hidden={true} icon=\\"caret-down\\" className=\\"bp4-icon bp4-icon-caret-down\\" title={[undefined]}>
                                                    <svg fill={[undefined]} data-icon=\\"caret-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                      <path d=\\"M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z\\" fillRule=\\"evenodd\\" />
                                                    </svg>
                                                  </span>
                                                </Blueprint4.Icon>
                                                <span className=\\"bp4-button-text\\">
                                                  <span>
                                                    Testcases
                                                  </span>
                                                  <Blueprint4.Tooltip2 content={{...}} placement=\\"left\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                                    <Tooltip2Provider>
                                                      <Blueprint4.Popover2 modifiers={{...}} content={{...}} placement=\\"left\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                        <Manager>
                                                          <Reference>
                                                            <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                              <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                                <Blueprint4.Icon icon=\\"help\\" className=\\"\\" disabled={[undefined]} tabIndex={0}>
                                                                  <span aria-hidden={true} icon=\\"help\\" disabled={[undefined]} tabIndex={0} className=\\"bp4-icon bp4-icon-help\\" title={[undefined]}>
                                                                    <svg fill={[undefined]} data-icon=\\"help\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                      <path d=\\"M8 0C3.58 0 0 3.58 0 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm1 13H7v-2h2v2zm1.93-6.52c-.14.32-.35.64-.62.97L9.25 8.83c-.12.15-.24.29-.28.42-.04.13-.09.3-.09.52V10H7.12V8.88s.05-.51.21-.71L8.4 6.73c.22-.26.35-.49.44-.68.09-.19.12-.38.12-.58 0-.3-.1-.55-.28-.75-.18-.19-.44-.28-.76-.28-.33 0-.59.1-.78.29-.19.19-.33.46-.4.81-.03.11-.1.15-.2.14l-1.7-.25c-.12-.01-.16-.08-.14-.19.12-.82.46-1.47 1.03-1.94.57-.48 1.32-.72 2.25-.72.47 0 .9.07 1.29.22s.72.34 1 .59c.28.25.49.55.65.89.15.35.22.72.22 1.12s-.07.75-.21 1.08z\\" fillRule=\\"evenodd\\" />
                                                                    </svg>
                                                                  </span>
                                                                </Blueprint4.Icon>
                                                              </span>
                                                            </Blueprint4.ResizeSensor2>
                                                          </Reference>
                                                          <Popper innerRef={[Function (anonymous)]} placement=\\"left\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                          </Popper>
                                                        </Manager>
                                                      </Blueprint4.Popover2>
                                                    </Tooltip2Provider>
                                                  </Blueprint4.Tooltip2>
                                                </span>
                                                <Blueprint4.Icon icon={[undefined]} />
                                              </button>
                                            </Blueprint4.Button>
                                            <Blueprint4.Collapse isOpen={true} keepChildrenMounted={true} component=\\"div\\" transitionDuration={200}>
                                              <div className=\\"bp4-collapse\\" style={{...}}>
                                                <div className=\\"bp4-collapse-body\\" style={{...}} aria-hidden={false}>
                                                  <div className=\\"noResults\\">
                                                    There are no testcases provided for this question.
                                                  </div>
                                                </div>
                                              </div>
                                            </Blueprint4.Collapse>
                                            <ControlButton label=\\"Autograder Results\\" icon=\\"caret-down\\" onClick={[Function (anonymous)]} options={{...}}>
                                              <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"collapse-button\\" type={[undefined]} onClick={[Function (anonymous)]} icon={{...}} rightIcon={false}>
                                                <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal collapse-button\\" onClick={[Function (anonymous)]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                  <Blueprint4.Icon icon={{...}}>
                                                    <Blueprint4.Icon icon=\\"caret-down\\" color={[undefined]}>
                                                      <span aria-hidden={true} icon=\\"caret-down\\" className=\\"bp4-icon bp4-icon-caret-down\\" title={[undefined]}>
                                                        <svg fill={[undefined]} data-icon=\\"caret-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                          <path d=\\"M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z\\" fillRule=\\"evenodd\\" />
                                                        </svg>
                                                      </span>
                                                    </Blueprint4.Icon>
                                                  </Blueprint4.Icon>
                                                  <span className=\\"bp4-button-text\\">
                                                    Autograder Results
                                                  </span>
                                                  <Blueprint4.Icon icon={false} />
                                                </button>
                                              </Blueprint4.Button>
                                            </ControlButton>
                                            <Blueprint4.Collapse isOpen={true} keepChildrenMounted={true} component=\\"div\\" transitionDuration={200}>
                                              <div className=\\"bp4-collapse\\" style={{...}}>
                                                <div className=\\"bp4-collapse-body\\" style={{...}} aria-hidden={false}>
                                                  <div className=\\"noResults\\">
                                                    There are no results to show.
                                                  </div>
                                                </div>
                                              </div>
                                            </Blueprint4.Collapse>
                                          </div>
                                        </SideContentAutograder>
                                      </div>
                                    </div>
                                  </div>
                                </Blueprint4.Tabs>
                              </div>
                            </div>
                          </Blueprint4.Card>
                        </div>
                      </GenericSideContent>
                    </SideContent>
                    <div className=\\"side-content-divider\\" />
                    <div className={[undefined]} style={[undefined]}>
                      <Resizer direction=\\"bottom\\" onResizeStart={[Function: bound ]} replaceStyles={[undefined]} className={[undefined]}>
                        <div className=\\"\\" style={{...}} onMouseDown={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} />
                      </Resizer>
                    </div>
                  </div>
                </Resizable>
                <Repl handleBrowseHistoryDown={[Function: handleBrowseHistoryDown]} handleBrowseHistoryUp={[Function: handleBrowseHistoryUp]} handleReplEval={[Function: handleReplEval]} handleReplValueChange={[Function: handleReplValueChange]} output={{...}} replValue=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibrary=\\"NONE\\" replButtons={{...}}>
                  <div className=\\"Repl\\" style={{...}}>
                    <div className=\\"repl-output-parent\\">
                      <HotKeysEnabled className=\\"repl-input-parent row bp4-card bp4-elevation-0\\" handlers={{...}}>
                        <HotKeysWrapper hotKeys={{...}} className=\\"repl-input-parent row bp4-card bp4-elevation-0\\">
                          <div onFocus={[Function: bound _handleFocus]} onBlur={[Function: bound _handleBlur]} tabIndex=\\"-1\\" className=\\"repl-input-parent row bp4-card bp4-elevation-0\\">
                            <ReplInput handleBrowseHistoryDown={[Function: handleBrowseHistoryDown]} handleBrowseHistoryUp={[Function: handleBrowseHistoryUp]} handleReplEval={[Function: handleReplEval]} handleReplValueChange={[Function: handleReplValueChange]} output={{...}} replValue=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibrary=\\"NONE\\" replButtons={{...}}>
                              <ReactAce className=\\"repl-react-ace react-ace\\" mode=\\"source1defaultNONE\\" theme=\\"source\\" height=\\"1px\\" width=\\"100%\\" value=\\"\\" onChange={[Function: handleReplValueChange]} commands={{...}} minLines={1} maxLines={20} fontSize={17} highlightActiveLine={false} showGutter={false} showPrintMargin={false} setOptions={{...}} name=\\"ace-editor\\" focus={false} enableSnippets={false} onPaste={{...}} onLoad={{...}} onScroll={{...}} readOnly={false} tabSize={4} cursorStart={1} editorProps={{...}} style={{...}} scrollMargin={{...}} wrapEnabled={false} enableBasicAutocompletion={false} enableLiveAutocompletion={false} placeholder={{...}} navigateToFileEnd={true}>
                                <div id=\\"ace-editor\\" style={{...}} />
                              </ReactAce>
                              <div className=\\"bp4-button-group bp4-dark\\">
                                <ControlBarEvalButton handleReplEval={[Function: handleReplEval]} isRunning={false}>
                                  <Blueprint4.Tooltip2 content=\\"...or press shift-enter in the REPL\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                    <Tooltip2Provider>
                                      <Blueprint4.Popover2 modifiers={{...}} content=\\"...or press shift-enter in the REPL\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                        <Manager>
                                          <Reference>
                                            <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                              <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                <ControlButton label=\\"Eval\\" icon=\\"code\\" onClick={[Function: handleReplEval]} className=\\"\\" disabled={[undefined]} tabIndex={0}>
                                                  <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: handleReplEval]} icon={{...}} rightIcon={false}>
                                                    <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: handleReplEval]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                      <Blueprint4.Icon icon={{...}}>
                                                        <Blueprint4.Icon icon=\\"code\\" color={[undefined]}>
                                                          <span aria-hidden={true} icon=\\"code\\" className=\\"bp4-icon bp4-icon-code\\" title={[undefined]}>
                                                            <svg fill={[undefined]} data-icon=\\"code\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                              <path d=\\"M15.71 7.29l-3-3a1.003 1.003 0 00-1.42 1.42L13.59 8l-2.29 2.29c-.19.18-.3.43-.3.71a1.003 1.003 0 001.71.71l3-3c.18-.18.29-.43.29-.71 0-.28-.11-.53-.29-.71zM5 5a1.003 1.003 0 00-1.71-.71l-3 3C.11 7.47 0 7.72 0 8c0 .28.11.53.29.71l3 3a1.003 1.003 0 001.42-1.42L2.41 8 4.7 5.71c.19-.18.3-.43.3-.71zm4-3c-.48 0-.87.35-.96.81l-2 10c-.01.06-.04.12-.04.19 0 .55.45 1 1 1 .48 0 .87-.35.96-.81l2-10c.01-.06.04-.12.04-.19 0-.55-.45-1-1-1z\\" fillRule=\\"evenodd\\" />
                                                            </svg>
                                                          </span>
                                                        </Blueprint4.Icon>
                                                      </Blueprint4.Icon>
                                                      <span className=\\"bp4-button-text\\">
                                                        Eval
                                                      </span>
                                                      <Blueprint4.Icon icon={false} />
                                                    </button>
                                                  </Blueprint4.Button>
                                                </ControlButton>
                                              </span>
                                            </Blueprint4.ResizeSensor2>
                                          </Reference>
                                          <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                          </Popper>
                                        </Manager>
                                      </Blueprint4.Popover2>
                                    </Tooltip2Provider>
                                  </Blueprint4.Tooltip2>
                                </ControlBarEvalButton>
                                <ControlBarClearButton handleReplOutputClear={[Function: handleReplOutputClear]}>
                                  <ControlButton label=\\"Clear\\" icon=\\"remove\\" onClick={[Function: handleReplOutputClear]}>
                                    <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: handleReplOutputClear]} icon={{...}} rightIcon={false}>
                                      <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: handleReplOutputClear]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                        <Blueprint4.Icon icon={{...}}>
                                          <Blueprint4.Icon icon=\\"remove\\" color={[undefined]}>
                                            <span aria-hidden={true} icon=\\"remove\\" className=\\"bp4-icon bp4-icon-remove\\" title={[undefined]}>
                                              <svg fill={[undefined]} data-icon=\\"remove\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                <path d=\\"M10.99 6.99h-6c-.55 0-1 .45-1 1s.45 1 1 1h6c.55 0 1-.45 1-1s-.45-1-1-1zm-3-7c-4.42 0-8 3.58-8 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.68 6-6 6z\\" fillRule=\\"evenodd\\" />
                                              </svg>
                                            </span>
                                          </Blueprint4.Icon>
                                        </Blueprint4.Icon>
                                        <span className=\\"bp4-button-text\\">
                                          Clear
                                        </span>
                                        <Blueprint4.Icon icon={false} />
                                      </button>
                                    </Blueprint4.Button>
                                  </ControlButton>
                                </ControlBarClearButton>
                              </div>
                              <MediaQuery minWidth={769} />
                            </ReplInput>
                          </div>
                        </HotKeysWrapper>
                      </HotKeysEnabled>
                    </div>
                  </div>
                </Repl>
              </div>
            </div>
          </div>
        </div>
      </Workspace>
    </div>
  </AssessmentWorkspace>
</Provider>"
`;

exports[`AssessmentWorkspace page with programming question renders correctly 1`] = `
"<Provider store={{...}}>
  <AssessmentWorkspace assessmentId={0} autogradingResults={{...}} notAttempted={true} canSave={true} assessmentConfiguration={{...}} programPrependValue=\\"\\" programPostpendValue=\\"\\" editorTestcases={{...}} hasUnsavedChanges={false} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ] ], instances: [ { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } } ], invocationCallOrder: [ 2, 3, 4, 5 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handleReplEval={[Function: handleReplEval]} handleSave={[Function: handleSave]} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} isRunning={false} isDebugging={false} enableDebugging={false} output={{...}} questionId={0} replValue=\\"\\" assessment={{...}}>
    <div className=\\"WorkspaceParent bp4-dark\\">
      <Blueprint4.Dialog className=\\"assessment-briefing\\" isOpen={true} canOutsideClickClose={true}>
        <Blueprint4.Overlay className=\\"bp4-overlay-scroll-container\\" isOpen={true} canOutsideClickClose={true} hasBackdrop={true} autoFocus={true} backdropProps={{...}} canEscapeKeyClose={true} enforceFocus={true} lazy={true} shouldReturnFocusOnClose={true} transitionDuration={300} transitionName=\\"bp4-overlay\\" usePortal={true}>
          <Blueprint4.Portal className={[undefined]} container={{...}}>
            <Portal containerInfo={{...}}>
              <TransitionGroup appear={true} aria-live=\\"polite\\" className=\\"bp4-overlay bp4-overlay-open bp4-overlay-scroll-container\\" component=\\"div\\" onKeyDown={[Function (anonymous)]} childFactory={[Function: childFactory]}>
                <div aria-live=\\"polite\\" className=\\"bp4-overlay bp4-overlay-open bp4-overlay-scroll-container\\" onKeyDown={[Function (anonymous)]}>
                  <CSSTransition classNames=\\"bp4-overlay\\" addEndListener={[Function (anonymous)]} timeout={300} unmountOnExit={true} onExited={[Function: bound bound handleExited]} in={true} exit={[undefined]} enter={[undefined]}>
                    <Transition addEndListener={[Function (anonymous)]} timeout={300} unmountOnExit={true} onExited={[Function (anonymous)]} in={true} exit={true} enter={true} onEnter={[Function (anonymous)]} onEntered={[Function (anonymous)]} onEntering={[Function (anonymous)]} onExit={[Function (anonymous)]} onExiting={[Function (anonymous)]} mountOnEnter={false} appear={false}>
                      <div tabIndex={0} className=\\"bp4-overlay-start-focus-trap\\" onFocus={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} />
                    </Transition>
                  </CSSTransition>
                  <CSSTransition classNames=\\"bp4-overlay\\" timeout={300} addEndListener={[Function (anonymous)]} onExited={[Function: bound bound handleExited]} in={true} exit={[undefined]} enter={[undefined]}>
                    <Transition timeout={300} addEndListener={[Function (anonymous)]} onExited={[Function (anonymous)]} in={true} exit={true} enter={true} onEnter={[Function (anonymous)]} onEntered={[Function (anonymous)]} onEntering={[Function (anonymous)]} onExit={[Function (anonymous)]} onExiting={[Function (anonymous)]} mountOnEnter={false} unmountOnExit={false} appear={false}>
                      <div className=\\"bp4-overlay-backdrop\\" onMouseDown={[Function (anonymous)]} />
                    </Transition>
                  </CSSTransition>
                  <CSSTransition classNames=\\"bp4-overlay\\" onEntering={[undefined]} onEntered={[undefined]} onExiting={[undefined]} onExited={[Function: bound bound handleExited]} timeout={300} addEndListener={[Function (anonymous)]} in={true} exit={[undefined]} enter={[undefined]}>
                    <Transition onEntering={[Function (anonymous)]} onEntered={[Function (anonymous)]} onExiting={[Function (anonymous)]} onExited={[Function (anonymous)]} timeout={300} addEndListener={[Function (anonymous)]} in={true} exit={true} enter={true} onEnter={[Function (anonymous)]} onExit={[Function (anonymous)]} mountOnEnter={false} unmountOnExit={false} appear={false}>
                      <div className=\\"bp4-dialog-container bp4-overlay-content\\">
                        <div className=\\"bp4-dialog assessment-briefing\\" role=\\"dialog\\" aria-labelledby={[undefined]} aria-describedby={[undefined]} style={[undefined]}>
                          <Blueprint4.Card elevation={0} interactive={false}>
                            <div className=\\"bp4-card bp4-elevation-0\\">
                              <Memo(Markdown) content=\\"This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. \\">
                                <div className=\\"md bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                              </Memo(Markdown)>
                              <Blueprint4.Button className=\\"assessment-briefing-button\\" onClick={[Function: onClick]} text=\\"Continue\\">
                                <button type=\\"button\\" className=\\"bp4-button assessment-briefing-button\\" onClick={[Function: onClick]} disabled={false} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                  <Blueprint4.Icon icon={[undefined]} />
                                  <span className=\\"bp4-button-text\\">
                                    Continue
                                  </span>
                                  <Blueprint4.Icon icon={[undefined]} />
                                </button>
                              </Blueprint4.Button>
                            </div>
                          </Blueprint4.Card>
                        </div>
                      </div>
                    </Transition>
                  </CSSTransition>
                  <CSSTransition classNames=\\"bp4-overlay\\" addEndListener={[Function (anonymous)]} timeout={300} unmountOnExit={true} onExited={[Function: bound bound handleExited]} in={true} exit={[undefined]} enter={[undefined]}>
                    <Transition addEndListener={[Function (anonymous)]} timeout={300} unmountOnExit={true} onExited={[Function (anonymous)]} in={true} exit={true} enter={true} onEnter={[Function (anonymous)]} onEntered={[Function (anonymous)]} onEntering={[Function (anonymous)]} onExit={[Function (anonymous)]} onExiting={[Function (anonymous)]} mountOnEnter={false} appear={false}>
                      <div tabIndex={0} className=\\"bp4-overlay-end-focus-trap\\" onFocus={[Function (anonymous)]} />
                    </Transition>
                  </CSSTransition>
                </div>
              </TransitionGroup>
            </Portal>
          </Blueprint4.Portal>
        </Blueprint4.Overlay>
      </Blueprint4.Dialog>
      <Blueprint4.Dialog className=\\"assessment-reset\\" icon=\\"error\\" isCloseButtonShown={true} isOpen={false} onClose={[Function: closeOverlay]} title=\\"Confirmation: Reset editor?\\" canOutsideClickClose={true}>
        <Blueprint4.Overlay className=\\"bp4-overlay-scroll-container\\" icon=\\"error\\" isCloseButtonShown={true} isOpen={false} onClose={[Function: closeOverlay]} title=\\"Confirmation: Reset editor?\\" canOutsideClickClose={true} hasBackdrop={true} autoFocus={true} backdropProps={{...}} canEscapeKeyClose={true} enforceFocus={true} lazy={true} shouldReturnFocusOnClose={true} transitionDuration={300} transitionName=\\"bp4-overlay\\" usePortal={true} />
      </Blueprint4.Dialog>
      <Workspace controlBarProps={{...}} editorContainerProps={{...}} handleSideContentHeightChange={[Function: handleSideContentHeightChange]} hasUnsavedChanges={false} mcqProps={{...}} sideBarProps={{...}} sideContentHeight={[undefined]} sideContentProps={{...}} replProps={{...}}>
        <div className=\\"workspace\\">
          <ControlBar editorButtons={{...}} flowButtons={{...}}>
            <div className=\\"ControlBar\\">
              <div className=\\"ControlBar_editor bp4-button-group\\">
                <ControlBarRunButton isEntrypointFileDefined={true} handleEditorEval={[Function: handleEval]}>
                  <Blueprint4.Tooltip2 content=\\"...or press shift-enter in the editor\\" placement=\\"top\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                    <Tooltip2Provider>
                      <Blueprint4.Popover2 modifiers={{...}} content=\\"...or press shift-enter in the editor\\" placement=\\"top\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                        <Manager>
                          <Reference>
                            <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                              <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                <ControlButton label=\\"Run\\" icon=\\"play\\" onClick={[Function: handleEval]} options={{...}} isDisabled={false} className=\\"\\" disabled={[undefined]} tabIndex={0}>
                                  <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className={[undefined]} type={[undefined]} onClick={[Function: handleEval]} icon={{...}} rightIcon={false}>
                                    <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: handleEval]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                      <Blueprint4.Icon icon={{...}}>
                                        <Blueprint4.Icon icon=\\"play\\" color={[undefined]}>
                                          <span aria-hidden={true} icon=\\"play\\" className=\\"bp4-icon bp4-icon-play\\" title={[undefined]}>
                                            <svg fill={[undefined]} data-icon=\\"play\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                              <path d=\\"M12 8c0-.35-.19-.64-.46-.82l.01-.02-6-4-.01.02A.969.969 0 005 3c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1 .21 0 .39-.08.54-.18l.01.02 6-4-.01-.02c.27-.18.46-.47.46-.82z\\" fillRule=\\"evenodd\\" />
                                            </svg>
                                          </span>
                                        </Blueprint4.Icon>
                                      </Blueprint4.Icon>
                                      <span className=\\"bp4-button-text\\">
                                        Run
                                      </span>
                                      <Blueprint4.Icon icon={false} />
                                    </button>
                                  </Blueprint4.Button>
                                </ControlButton>
                              </span>
                            </Blueprint4.ResizeSensor2>
                          </Reference>
                          <Popper innerRef={[Function (anonymous)]} placement=\\"top\\" strategy=\\"absolute\\" modifiers={{...}}>
                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                          </Popper>
                        </Manager>
                      </Blueprint4.Popover2>
                    </Tooltip2Provider>
                  </Blueprint4.Tooltip2>
                </ControlBarRunButton>
                <ControlButtonSaveButton hasUnsavedChanges={false} onClickSave={[Function: onClickSave]}>
                  <ControlButton label=\\"Save\\" icon=\\"floppy-disk\\" onClick={[Function: onClickSave]} options={{...}}>
                    <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: onClickSave]} icon={{...}} rightIcon={false}>
                      <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: onClickSave]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                        <Blueprint4.Icon icon={{...}}>
                          <Blueprint4.Icon icon=\\"floppy-disk\\" color={[undefined]}>
                            <span aria-hidden={true} icon=\\"floppy-disk\\" className=\\"bp4-icon bp4-icon-floppy-disk\\" title={[undefined]}>
                              <svg fill={[undefined]} data-icon=\\"floppy-disk\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                <path d=\\"M15.71 2.29l-2-2A.997.997 0 0013 0h-1v6H4V0H1C.45 0 0 .45 0 1v14c0 .55.45 1 1 1h14c.55 0 1-.45 1-1V3c0-.28-.11-.53-.29-.71zM14 15H2V9c0-.55.45-1 1-1h10c.55 0 1 .45 1 1v6zM11 1H9v4h2V1z\\" fillRule=\\"evenodd\\" />
                              </svg>
                            </span>
                          </Blueprint4.Icon>
                        </Blueprint4.Icon>
                        <span className=\\"bp4-button-text\\">
                          Save
                        </span>
                        <Blueprint4.Icon icon={false} />
                      </button>
                    </Blueprint4.Button>
                  </ControlButton>
                </ControlButtonSaveButton>
                <ControlBarResetButton onClick={[Function: onClickResetTemplate]}>
                  <ControlButton label=\\"Reset\\" icon=\\"repeat\\" onClick={[Function: onClickResetTemplate]}>
                    <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: onClickResetTemplate]} icon={{...}} rightIcon={false}>
                      <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: onClickResetTemplate]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                        <Blueprint4.Icon icon={{...}}>
                          <Blueprint4.Icon icon=\\"repeat\\" color={[undefined]}>
                            <span aria-hidden={true} icon=\\"repeat\\" className=\\"bp4-icon bp4-icon-repeat\\" title={[undefined]}>
                              <svg fill={[undefined]} data-icon=\\"repeat\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                <path d=\\"M10 5c0 .55.45 1 1 1h4c.55 0 1-.45 1-1V1c0-.55-.45-1-1-1s-1 .45-1 1v1.74A7.95 7.95 0 008 0C3.58 0 0 3.58 0 8c0 4.06 3.02 7.4 6.94 7.92.02 0 .04.01.06.01.33.04.66.07 1 .07 4.42 0 8-3.58 8-8 0-.55-.45-1-1-1s-1 .45-1 1c0 3.31-2.69 6-6 6-.71 0-1.37-.15-2-.38v.01C3.67 12.81 2 10.61 2 8c0-3.31 2.69-6 6-6 1.77 0 3.36.78 4.46 2H11c-.55 0-1 .45-1 1z\\" fillRule=\\"evenodd\\" />
                              </svg>
                            </span>
                          </Blueprint4.Icon>
                        </Blueprint4.Icon>
                        <span className=\\"bp4-button-text\\">
                          Reset
                        </span>
                        <Blueprint4.Icon icon={false} />
                      </button>
                    </Blueprint4.Button>
                  </ControlButton>
                </ControlBarResetButton>
                <ControlBarChapterSelect handleChapterSelect={[Function: handleChapterSelect]} isFolderModeEnabled={false} sourceChapter={1} sourceVariant=\\"default\\" disabled={true}>
                  <Blueprint4.Select items={{...}} onItemSelect={[Function: handleChapterSelect]} itemRenderer={[Function (anonymous)]} itemListRenderer={[Function: chapterListRenderer]} filterable={false} disabled={true}>
                    <Blueprint4.QueryList items={{...}} onItemSelect={[Function (anonymous)]} itemRenderer={[Function (anonymous)]} itemListRenderer={[Function: chapterListRenderer]} disabled={true} renderer={[Function (anonymous)]} resetOnQuery={true}>
                      <Blueprint4.Popover autoFocus={false} enforceFocus={false} isOpen={false} disabled={true} position=\\"bottom-left\\" className=\\"\\" onInteraction={[Function (anonymous)]} popoverClassName=\\"bp4-select-popover\\" onOpening={[Function (anonymous)]} onOpened={[Function (anonymous)]} onClosing={[Function (anonymous)]} boundary=\\"scrollParent\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} hoverCloseDelay={300} hoverOpenDelay={150} inheritDarkTheme={true} interactionKind=\\"click\\" minimal={false} modifiers={{...}} openOnTargetFocus={true} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" transitionDuration={300} usePortal={true} wrapperTagName=\\"span\\">
                        <Manager>
                          <span className=\\"bp4-popover-wrapper\\">
                            <Reference innerRef={[Function (anonymous)]}>
                              <InnerReference setReferenceNode={[Function (anonymous)]} innerRef={[Function (anonymous)]}>
                                <Blueprint4.ResizeSensor onResize={[Function (anonymous)]}>
                                  <span onClick={[Function (anonymous)]} aria-haspopup=\\"true\\" className=\\"bp4-popover-target\\">
                                    <div onKeyDown={[Function (anonymous)]} onKeyUp={[undefined]} className=\\"\\" disabled={[undefined]} tabIndex={[undefined]}>
                                      <Blueprint4.Button className=\\"bp4-minimal\\" text=\\"Source §1\\" rightIcon={{...}} disabled={true}>
                                        <button type=\\"button\\" className=\\"bp4-button bp4-disabled bp4-minimal\\" disabled={true} onBlur={[Function (anonymous)]} onClick={[undefined]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={-1}>
                                          <Blueprint4.Icon icon={[undefined]} />
                                          <span className=\\"bp4-button-text\\">
                                            Source §1
                                          </span>
                                          <Blueprint4.Icon icon={{...}} />
                                        </button>
                                      </Blueprint4.Button>
                                    </div>
                                  </span>
                                </Blueprint4.ResizeSensor>
                              </InnerReference>
                            </Reference>
                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover-backdrop\\" backdropProps={{...}} canEscapeKeyClose={true} canOutsideClickClose={true} className={[undefined]} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[Function (anonymous)]} onOpened={[Function (anonymous)]} onOpening={[Function (anonymous)]} transitionDuration={300} transitionName=\\"bp4-popover\\" usePortal={true} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                          </span>
                        </Manager>
                      </Blueprint4.Popover>
                    </Blueprint4.QueryList>
                  </Blueprint4.Select>
                </ControlBarChapterSelect>
              </div>
              <div className=\\"ControlBar_flow bp4-button-group\\">
                <ControlBarPreviousButton onClick={[Function: onClickPrevious]} questionProgress={{...}} />
                <ControlBarQuestionViewButton questionProgress={{...}}>
                  <ControlButton label=\\"Question 1 of 5  \\" isDisabled={true}>
                    <Blueprint4.Button disabled={true} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[undefined]} icon={[undefined]} rightIcon={false}>
                      <button type={[undefined]} disabled={true} className=\\"bp4-button bp4-disabled bp4-minimal\\" onClick={[undefined]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={-1}>
                        <Blueprint4.Icon icon={[undefined]} />
                        <span className=\\"bp4-button-text\\">
                          Question 1 of 5  
                        </span>
                        <Blueprint4.Icon icon={false} />
                      </button>
                    </Blueprint4.Button>
                  </ControlButton>
                </ControlBarQuestionViewButton>
                <ControlBarNextButton onClickNext={[Function: onClickNext]} onClickReturn={[Function: onClickReturn]} questionProgress={{...}}>
                  <ControlButton label=\\"Next\\" icon=\\"arrow-right\\" onClick={[Function: onClickNext]} options={{...}}>
                    <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: onClickNext]} icon={false} rightIcon={{...}}>
                      <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: onClickNext]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                        <Blueprint4.Icon icon={false} />
                        <span className=\\"bp4-button-text\\">
                          Next
                        </span>
                        <Blueprint4.Icon icon={{...}}>
                          <Blueprint4.Icon icon=\\"arrow-right\\" color={[undefined]}>
                            <span aria-hidden={true} icon=\\"arrow-right\\" className=\\"bp4-icon bp4-icon-arrow-right\\" title={[undefined]}>
                              <svg fill={[undefined]} data-icon=\\"arrow-right\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                <path d=\\"M14.7 7.29l-5-5a.965.965 0 00-.71-.3 1.003 1.003 0 00-.71 1.71l3.29 3.29H1.99c-.55 0-1 .45-1 1s.45 1 1 1h9.59l-3.29 3.29a1.003 1.003 0 001.42 1.42l5-5c.18-.18.29-.43.29-.71s-.12-.52-.3-.7z\\" fillRule=\\"evenodd\\" />
                              </svg>
                            </span>
                          </Blueprint4.Icon>
                        </Blueprint4.Icon>
                      </button>
                    </Blueprint4.Button>
                  </ControlButton>
                </ControlBarNextButton>
              </div>
              <div className=\\"ControlBar_editingWorkspace bp4-button-group\\" />
            </div>
          </ControlBar>
          <div className=\\"workspace-parent\\">
            <Resizable enable={{...}} minWidth=\\"auto\\" maxWidth=\\"50%\\" onResize={[Function: toggleSideBarDividerDisplay]} onResizeStop={[Function: onResizeStop]} size={{...}} defaultSize={{...}} as=\\"div\\" onResizeStart={[Function: onResizeStart]} style={{...}} grid={{...}} lockAspectRatio={false} lockAspectRatioExtraWidth={0} lockAspectRatioExtraHeight={0} scale={1} resizeRatio={1} snapGap={0}>
              <div style={{...}} className={[undefined]}>
                <SideBar tabs={{...}} isExpanded={true} expandSideBar={[Function: expandSideBar]} collapseSideBar={[Function: collapseSideBar]}>
                  <div className=\\"sidebar-container\\" />
                </SideBar>
                <div className={[undefined]} style={[undefined]} />
              </div>
            </Resizable>
            <div className=\\"row content-parent\\">
              <div className=\\"editor-divider\\" />
              <Resizable className=\\"resize-editor left-parent\\" enable={{...}} minWidth={0} onResize={[Function: toggleEditorDividerDisplay]} defaultSize={{...}} as=\\"div\\" onResizeStart={[Function: onResizeStart]} onResizeStop={[Function: onResizeStop]} style={{...}} grid={{...}} lockAspectRatio={false} lockAspectRatioExtraWidth={0} lockAspectRatioExtraHeight={0} scale={1} resizeRatio={1} snapGap={0}>
                <div style={{...}} className=\\"resize-editor left-parent\\">
                  <EditorContainer editorVariant=\\"normal\\" isFolderModeEnabled={false} activeEditorTabIndex={0} setActiveEditorTabIndex={[Function (anonymous)]} removeEditorTabByIndex={[Function (anonymous)]} editorTabs={{...}} editorSessionId=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibraryName=\\"NONE\\" handleDeclarationNavigate={[Function: handleDeclarationNavigate]} handleEditorEval={[Function: handleEval]} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ] ], instances: [ { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } } ], invocationCallOrder: [ 2, 3, 4, 5 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handlePromptAutocomplete={[Function: handlePromptAutocomplete]} isEditorAutorun={false} onChange={[Function: onChangeMethod]} onCursorChange={[Function: onCursorChangeMethod]} onSelectionChange={[Function: onSelectionChangeMethod]}>
                    <div className=\\"editor-container\\">
                      <Component editorVariant=\\"normal\\" editorSessionId=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibraryName=\\"NONE\\" handleDeclarationNavigate={[Function: handleDeclarationNavigate]} handleEditorEval={[Function: handleEval]} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ] ], instances: [ { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } } ], invocationCallOrder: [ 2, 3, 4, 5 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handlePromptAutocomplete={[Function: handlePromptAutocomplete]} isEditorAutorun={false} onChange={[Function: onChangeMethod]} onCursorChange={[Function: onCursorChangeMethod]} onSelectionChange={[Function: onSelectionChangeMethod]} editorTabIndex={0} editorValue=\\"\\" filePath={[undefined]} highlightedLines={{...}} breakpoints={{...}}>
                        <MockEditor editorVariant=\\"normal\\" editorSessionId=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibraryName=\\"NONE\\" handleDeclarationNavigate={[Function: handleDeclarationNavigate]} handleEditorEval={[Function: handleEval]} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ], [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ] ], instances: [ { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } }, { assessmentId: 0, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 1, longSummary: 'This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'An Odessey to Runes' } } ], invocationCallOrder: [ 2, 3, 4, 5 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, 'function answer() {\\\\n      // Write something here!\\\\n  }\\\\n  ' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handlePromptAutocomplete={[Function: handlePromptAutocomplete]} isEditorAutorun={false} onChange={[Function: onChangeMethod]} onCursorChange={[Function: onCursorChangeMethod]} onSelectionChange={[Function: onSelectionChangeMethod]} editorTabIndex={0} editorValue=\\"\\" filePath={[undefined]} highlightedLines={{...}} breakpoints={{...}}>
                          <div id=\\"mock-editor\\" />
                        </MockEditor>
                      </Component>
                    </div>
                  </EditorContainer>
                  <div className={[undefined]} style={[undefined]}>
                    <Resizer direction=\\"right\\" onResizeStart={[Function: bound ]} replaceStyles={[undefined]} className={[undefined]}>
                      <div className=\\"\\" style={{...}} onMouseDown={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} />
                    </Resizer>
                  </div>
                </div>
              </Resizable>
              <div className=\\"right-parent\\">
                <Resizable bounds=\\"parent\\" className=\\"resize-side-content\\" enable={{...}} onResize={[Function: toggleDividerDisplay]} onResizeStop={[Function: onResizeStop]} as=\\"div\\" onResizeStart={[Function: onResizeStart]} style={{...}} grid={{...}} lockAspectRatio={false} lockAspectRatioExtraWidth={0} lockAspectRatioExtraHeight={0} scale={1} resizeRatio={1} snapGap={0}>
                  <div style={{...}} className=\\"resize-side-content\\">
                    <SideContent selectedTabId=\\"question_overview\\" tabs={{...}} onChange={[Function: onChangeTabs]} workspaceLocation=\\"assessment\\">
                      <GenericSideContent tabs={{...}} onChange={[Function: onChangeTabs]} workspaceLocation=\\"assessment\\" renderFunction={[Function: renderFunction]}>
                        <div className=\\"side-content\\">
                          <Blueprint4.Card elevation={0} interactive={false}>
                            <div className=\\"bp4-card bp4-elevation-0\\">
                              <div className=\\"side-content-tabs\\">
                                <Blueprint4.Tabs id=\\"side-content-tabs\\" onChange={[Function (anonymous)]} renderActiveTabPanelOnly={false} selectedTabId=\\"question_overview\\" animate={true} fill={false} large={false} vertical={false}>
                                  <div className=\\"bp4-tabs\\">
                                    <div className=\\"bp4-tab-list\\" onKeyDown={[Function (anonymous)]} onKeyPress={[Function (anonymous)]} role=\\"tablist\\">
                                      <div className=\\"bp4-tab-indicator-wrapper\\" style={{...}}>
                                        <div className=\\"bp4-tab-indicator\\" />
                                      </div>
                                      <Blueprint4.TabTitle id=\\"question_overview\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={true}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_question_overview\\" aria-disabled={false} aria-expanded={true} aria-selected={true} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"question_overview\\" id=\\"bp4-tab-title_side-content-tabs_question_overview\\" role=\\"tab\\" tabIndex={0}>
                                          <Blueprint4.Tooltip2 content=\\"Question 1\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Question 1\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"question_overview-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"ninja\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"ninja\\" className=\\"bp4-icon bp4-icon-ninja\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"ninja\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M20 6s-2.98 2.43-6.12 2.19C13.52 5.31 12.05 0 6 0c0 0 2.41 2.99 2.16 6.12C5.27 6.49 0 7.97 0 14c0 0 2.98-2.43 6.11-2.19C6.47 14.69 7.94 20 14 20c0 0-2.42-2.99-2.16-6.13C14.73 13.51 20 12.02 20 6zm-10 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                      <Blueprint4.TabTitle id=\\"briefing\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={false}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_briefing\\" aria-disabled={false} aria-expanded={false} aria-selected={false} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"briefing\\" id=\\"bp4-tab-title_side-content-tabs_briefing\\" role=\\"tab\\" tabIndex={-1}>
                                          <Blueprint4.Tooltip2 content=\\"Briefing\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Briefing\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"briefing-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"briefcase\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"briefcase\\" className=\\"bp4-icon bp4-icon-briefcase\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"briefcase\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M19 5h-4V2c0-.55-.45-1-1-1H6c-.55 0-1 .45-1 1v3H1c-.55 0-1 .45-1 1v5h4v-1h2v1h8v-1h2v1h4V6c0-.55-.45-1-1-1zm-6 0H7V3h6v2zm3 8h-2v-1H6v1H4v-1H0v6c0 .55.45 1 1 1h18c.55 0 1-.45 1-1v-6h-4v1z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                      <Blueprint4.TabTitle id=\\"autograder\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={false}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_autograder\\" aria-disabled={false} aria-expanded={false} aria-selected={false} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"autograder\\" id=\\"bp4-tab-title_side-content-tabs_autograder\\" role=\\"tab\\" tabIndex={-1}>
                                          <Blueprint4.Tooltip2 content=\\"Autograder\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Autograder\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"autograder-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"airplane\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"airplane\\" className=\\"bp4-icon bp4-icon-airplane\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"airplane\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M20 2c0-1.1-.9-2-2-2-.55 0-1.05.22-1.41.59l-4.84 4.84L2 1 1 3l7.53 5.64L4.17 13H1l-1 1 4 2 2 4 1-1v-3.17l4.36-4.36L17 19l2-1-4.43-9.74 4.84-4.84c.37-.37.59-.87.59-1.42z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_question_overview\\" aria-hidden={false} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_question_overview\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <Memo(Markdown) className=\\"sidecontent-overview\\" content=\\"\\\\n  This question has an id of \`0\`.\\\\n  \\\\n  \`\`\`\\\\n  What\\\\'s your favourite dinner food?\\\\n  \`\`\`\\\\n  \\" workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <div className=\\"sidecontent-overview bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                                        </Memo(Markdown)>
                                      </div>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_briefing\\" aria-hidden={true} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_briefing\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <Memo(Markdown) className=\\"sidecontent-overview\\" content=\\"This is the mission briefing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. \\" workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <div className=\\"sidecontent-overview bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                                        </Memo(Markdown)>
                                      </div>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_autograder\\" aria-hidden={true} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_autograder\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <SideContentAutograder testcases={{...}} autogradingResults={{...}} handleTestcaseEval={[Function: handleTestcaseEval]} workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <div className=\\"Autograder\\">
                                            <Blueprint4.Button className=\\"collapse-button\\" icon=\\"caret-down\\" minimal={true} onClick={[Function (anonymous)]}>
                                              <button type=\\"button\\" className=\\"bp4-button bp4-minimal collapse-button\\" onClick={[Function (anonymous)]} disabled={false} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                <Blueprint4.Icon icon=\\"caret-down\\">
                                                  <span aria-hidden={true} icon=\\"caret-down\\" className=\\"bp4-icon bp4-icon-caret-down\\" title={[undefined]}>
                                                    <svg fill={[undefined]} data-icon=\\"caret-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                      <path d=\\"M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z\\" fillRule=\\"evenodd\\" />
                                                    </svg>
                                                  </span>
                                                </Blueprint4.Icon>
                                                <span className=\\"bp4-button-text\\">
                                                  <span>
                                                    Testcases
                                                  </span>
                                                  <Blueprint4.Tooltip2 content={{...}} placement=\\"left\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                                    <Tooltip2Provider>
                                                      <Blueprint4.Popover2 modifiers={{...}} content={{...}} placement=\\"left\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                        <Manager>
                                                          <Reference>
                                                            <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                              <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                                <Blueprint4.Icon icon=\\"help\\" className=\\"\\" disabled={[undefined]} tabIndex={0}>
                                                                  <span aria-hidden={true} icon=\\"help\\" disabled={[undefined]} tabIndex={0} className=\\"bp4-icon bp4-icon-help\\" title={[undefined]}>
                                                                    <svg fill={[undefined]} data-icon=\\"help\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                      <path d=\\"M8 0C3.58 0 0 3.58 0 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm1 13H7v-2h2v2zm1.93-6.52c-.14.32-.35.64-.62.97L9.25 8.83c-.12.15-.24.29-.28.42-.04.13-.09.3-.09.52V10H7.12V8.88s.05-.51.21-.71L8.4 6.73c.22-.26.35-.49.44-.68.09-.19.12-.38.12-.58 0-.3-.1-.55-.28-.75-.18-.19-.44-.28-.76-.28-.33 0-.59.1-.78.29-.19.19-.33.46-.4.81-.03.11-.1.15-.2.14l-1.7-.25c-.12-.01-.16-.08-.14-.19.12-.82.46-1.47 1.03-1.94.57-.48 1.32-.72 2.25-.72.47 0 .9.07 1.29.22s.72.34 1 .59c.28.25.49.55.65.89.15.35.22.72.22 1.12s-.07.75-.21 1.08z\\" fillRule=\\"evenodd\\" />
                                                                    </svg>
                                                                  </span>
                                                                </Blueprint4.Icon>
                                                              </span>
                                                            </Blueprint4.ResizeSensor2>
                                                          </Reference>
                                                          <Popper innerRef={[Function (anonymous)]} placement=\\"left\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                          </Popper>
                                                        </Manager>
                                                      </Blueprint4.Popover2>
                                                    </Tooltip2Provider>
                                                  </Blueprint4.Tooltip2>
                                                </span>
                                                <Blueprint4.Icon icon={[undefined]} />
                                              </button>
                                            </Blueprint4.Button>
                                            <Blueprint4.Collapse isOpen={true} keepChildrenMounted={true} component=\\"div\\" transitionDuration={200}>
                                              <div className=\\"bp4-collapse\\" style={{...}}>
                                                <div className=\\"bp4-collapse-body\\" style={{...}} aria-hidden={false}>
                                                  <div className=\\"noResults\\">
                                                    There are no testcases provided for this question.
                                                  </div>
                                                </div>
                                              </div>
                                            </Blueprint4.Collapse>
                                            <ControlButton label=\\"Autograder Results\\" icon=\\"caret-down\\" onClick={[Function (anonymous)]} options={{...}}>
                                              <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"collapse-button\\" type={[undefined]} onClick={[Function (anonymous)]} icon={{...}} rightIcon={false}>
                                                <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal collapse-button\\" onClick={[Function (anonymous)]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                  <Blueprint4.Icon icon={{...}}>
                                                    <Blueprint4.Icon icon=\\"caret-down\\" color={[undefined]}>
                                                      <span aria-hidden={true} icon=\\"caret-down\\" className=\\"bp4-icon bp4-icon-caret-down\\" title={[undefined]}>
                                                        <svg fill={[undefined]} data-icon=\\"caret-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                          <path d=\\"M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z\\" fillRule=\\"evenodd\\" />
                                                        </svg>
                                                      </span>
                                                    </Blueprint4.Icon>
                                                  </Blueprint4.Icon>
                                                  <span className=\\"bp4-button-text\\">
                                                    Autograder Results
                                                  </span>
                                                  <Blueprint4.Icon icon={false} />
                                                </button>
                                              </Blueprint4.Button>
                                            </ControlButton>
                                            <Blueprint4.Collapse isOpen={true} keepChildrenMounted={true} component=\\"div\\" transitionDuration={200}>
                                              <div className=\\"bp4-collapse\\" style={{...}}>
                                                <div className=\\"bp4-collapse-body\\" style={{...}} aria-hidden={false}>
                                                  <div className=\\"noResults\\">
                                                    There are no results to show.
                                                  </div>
                                                </div>
                                              </div>
                                            </Blueprint4.Collapse>
                                          </div>
                                        </SideContentAutograder>
                                      </div>
                                    </div>
                                  </div>
                                </Blueprint4.Tabs>
                              </div>
                            </div>
                          </Blueprint4.Card>
                        </div>
                      </GenericSideContent>
                    </SideContent>
                    <div className=\\"side-content-divider\\" />
                    <div className={[undefined]} style={[undefined]}>
                      <Resizer direction=\\"bottom\\" onResizeStart={[Function: bound ]} replaceStyles={[undefined]} className={[undefined]}>
                        <div className=\\"\\" style={{...}} onMouseDown={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} />
                      </Resizer>
                    </div>
                  </div>
                </Resizable>
                <Repl handleBrowseHistoryDown={[Function: handleBrowseHistoryDown]} handleBrowseHistoryUp={[Function: handleBrowseHistoryUp]} handleReplEval={[Function: handleReplEval]} handleReplValueChange={[Function: handleReplValueChange]} output={{...}} replValue=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibrary=\\"NONE\\" replButtons={{...}}>
                  <div className=\\"Repl\\" style={{...}}>
                    <div className=\\"repl-output-parent\\">
                      <HotKeysEnabled className=\\"repl-input-parent row bp4-card bp4-elevation-0\\" handlers={{...}}>
                        <HotKeysWrapper hotKeys={{...}} className=\\"repl-input-parent row bp4-card bp4-elevation-0\\">
                          <div onFocus={[Function: bound _handleFocus]} onBlur={[Function: bound _handleBlur]} tabIndex=\\"-1\\" className=\\"repl-input-parent row bp4-card bp4-elevation-0\\">
                            <ReplInput handleBrowseHistoryDown={[Function: handleBrowseHistoryDown]} handleBrowseHistoryUp={[Function: handleBrowseHistoryUp]} handleReplEval={[Function: handleReplEval]} handleReplValueChange={[Function: handleReplValueChange]} output={{...}} replValue=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibrary=\\"NONE\\" replButtons={{...}}>
                              <ReactAce className=\\"repl-react-ace react-ace\\" mode=\\"source1defaultNONE\\" theme=\\"source\\" height=\\"1px\\" width=\\"100%\\" value=\\"\\" onChange={[Function: handleReplValueChange]} commands={{...}} minLines={1} maxLines={20} fontSize={17} highlightActiveLine={false} showGutter={false} showPrintMargin={false} setOptions={{...}} name=\\"ace-editor\\" focus={false} enableSnippets={false} onPaste={{...}} onLoad={{...}} onScroll={{...}} readOnly={false} tabSize={4} cursorStart={1} editorProps={{...}} style={{...}} scrollMargin={{...}} wrapEnabled={false} enableBasicAutocompletion={false} enableLiveAutocompletion={false} placeholder={{...}} navigateToFileEnd={true}>
                                <div id=\\"ace-editor\\" style={{...}} />
                              </ReactAce>
                              <div className=\\"bp4-button-group bp4-dark\\">
                                <ControlBarEvalButton handleReplEval={[Function: handleReplEval]} isRunning={false}>
                                  <Blueprint4.Tooltip2 content=\\"...or press shift-enter in the REPL\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                    <Tooltip2Provider>
                                      <Blueprint4.Popover2 modifiers={{...}} content=\\"...or press shift-enter in the REPL\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                        <Manager>
                                          <Reference>
                                            <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                              <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                <ControlButton label=\\"Eval\\" icon=\\"code\\" onClick={[Function: handleReplEval]} className=\\"\\" disabled={[undefined]} tabIndex={0}>
                                                  <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: handleReplEval]} icon={{...}} rightIcon={false}>
                                                    <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: handleReplEval]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                      <Blueprint4.Icon icon={{...}}>
                                                        <Blueprint4.Icon icon=\\"code\\" color={[undefined]}>
                                                          <span aria-hidden={true} icon=\\"code\\" className=\\"bp4-icon bp4-icon-code\\" title={[undefined]}>
                                                            <svg fill={[undefined]} data-icon=\\"code\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                              <path d=\\"M15.71 7.29l-3-3a1.003 1.003 0 00-1.42 1.42L13.59 8l-2.29 2.29c-.19.18-.3.43-.3.71a1.003 1.003 0 001.71.71l3-3c.18-.18.29-.43.29-.71 0-.28-.11-.53-.29-.71zM5 5a1.003 1.003 0 00-1.71-.71l-3 3C.11 7.47 0 7.72 0 8c0 .28.11.53.29.71l3 3a1.003 1.003 0 001.42-1.42L2.41 8 4.7 5.71c.19-.18.3-.43.3-.71zm4-3c-.48 0-.87.35-.96.81l-2 10c-.01.06-.04.12-.04.19 0 .55.45 1 1 1 .48 0 .87-.35.96-.81l2-10c.01-.06.04-.12.04-.19 0-.55-.45-1-1-1z\\" fillRule=\\"evenodd\\" />
                                                            </svg>
                                                          </span>
                                                        </Blueprint4.Icon>
                                                      </Blueprint4.Icon>
                                                      <span className=\\"bp4-button-text\\">
                                                        Eval
                                                      </span>
                                                      <Blueprint4.Icon icon={false} />
                                                    </button>
                                                  </Blueprint4.Button>
                                                </ControlButton>
                                              </span>
                                            </Blueprint4.ResizeSensor2>
                                          </Reference>
                                          <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                          </Popper>
                                        </Manager>
                                      </Blueprint4.Popover2>
                                    </Tooltip2Provider>
                                  </Blueprint4.Tooltip2>
                                </ControlBarEvalButton>
                                <ControlBarClearButton handleReplOutputClear={[Function: handleReplOutputClear]}>
                                  <ControlButton label=\\"Clear\\" icon=\\"remove\\" onClick={[Function: handleReplOutputClear]}>
                                    <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: handleReplOutputClear]} icon={{...}} rightIcon={false}>
                                      <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: handleReplOutputClear]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                        <Blueprint4.Icon icon={{...}}>
                                          <Blueprint4.Icon icon=\\"remove\\" color={[undefined]}>
                                            <span aria-hidden={true} icon=\\"remove\\" className=\\"bp4-icon bp4-icon-remove\\" title={[undefined]}>
                                              <svg fill={[undefined]} data-icon=\\"remove\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                <path d=\\"M10.99 6.99h-6c-.55 0-1 .45-1 1s.45 1 1 1h6c.55 0 1-.45 1-1s-.45-1-1-1zm-3-7c-4.42 0-8 3.58-8 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.68 6-6 6z\\" fillRule=\\"evenodd\\" />
                                              </svg>
                                            </span>
                                          </Blueprint4.Icon>
                                        </Blueprint4.Icon>
                                        <span className=\\"bp4-button-text\\">
                                          Clear
                                        </span>
                                        <Blueprint4.Icon icon={false} />
                                      </button>
                                    </Blueprint4.Button>
                                  </ControlButton>
                                </ControlBarClearButton>
                              </div>
                              <MediaQuery minWidth={769} />
                            </ReplInput>
                          </div>
                        </HotKeysWrapper>
                      </HotKeysEnabled>
                    </div>
                  </div>
                </Repl>
              </div>
            </div>
          </div>
        </div>
      </Workspace>
    </div>
  </AssessmentWorkspace>
</Provider>"
`;

exports[`AssessmentWorkspace renders Grading tab correctly if the question has been graded 1`] = `
"<Provider store={{...}}>
  <AssessmentWorkspace assessmentId={4} autogradingResults={{...}} notAttempted={true} canSave={true} assessmentConfiguration={{...}} programPrependValue=\\"\\" programPostpendValue=\\"\\" editorTestcases={{...}} hasUnsavedChanges={false} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, 'function fibonacci(n) {\\\\n      if (n <= 2) {\\\\n          return 1;\\\\n      } else {\\\\n          return fibonacci(n-1) + fibonacci(n-2);\\\\n      }\\\\n  }' ], [ 0, 'function fibonacci(n) {\\\\n      if (n <= 2) {\\\\n          return 1;\\\\n      } else {\\\\n          return fibonacci(n-1) + fibonacci(n-2);\\\\n      }\\\\n  }' ], [ 0, 'function fibonacci(n) {\\\\n      if (n <= 2) {\\\\n          return 1;\\\\n      } else {\\\\n          return fibonacci(n-1) + fibonacci(n-2);\\\\n      }\\\\n  }' ] ], instances: [ { assessmentId: 4, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 4, longSummary: 'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'A Closed Mission' } }, { assessmentId: 4, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 4, longSummary: 'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'A Closed Mission' } }, { assessmentId: 4, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 4, longSummary: 'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'A Closed Mission' } }, { assessmentId: 4, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 4, longSummary: 'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'A Closed Mission' } } ], invocationCallOrder: [ 14, 15, 16, 17 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, 'function fibonacci(n) {\\\\n      if (n <= 2) {\\\\n          return 1;\\\\n      } else {\\\\n          return fibonacci(n-1) + fibonacci(n-2);\\\\n      }\\\\n  }' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handleReplEval={[Function: handleReplEval]} handleSave={[Function: handleSave]} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} isRunning={false} isDebugging={false} enableDebugging={false} output={{...}} questionId={0} replValue=\\"\\" assessment={{...}}>
    <div className=\\"WorkspaceParent bp4-dark\\">
      <Blueprint4.Dialog className=\\"assessment-briefing\\" isOpen={true} canOutsideClickClose={true}>
        <Blueprint4.Overlay className=\\"bp4-overlay-scroll-container\\" isOpen={true} canOutsideClickClose={true} hasBackdrop={true} autoFocus={true} backdropProps={{...}} canEscapeKeyClose={true} enforceFocus={true} lazy={true} shouldReturnFocusOnClose={true} transitionDuration={300} transitionName=\\"bp4-overlay\\" usePortal={true}>
          <Blueprint4.Portal className={[undefined]} container={{...}}>
            <Portal containerInfo={{...}}>
              <TransitionGroup appear={true} aria-live=\\"polite\\" className=\\"bp4-overlay bp4-overlay-open bp4-overlay-scroll-container\\" component=\\"div\\" onKeyDown={[Function (anonymous)]} childFactory={[Function: childFactory]}>
                <div aria-live=\\"polite\\" className=\\"bp4-overlay bp4-overlay-open bp4-overlay-scroll-container\\" onKeyDown={[Function (anonymous)]}>
                  <CSSTransition classNames=\\"bp4-overlay\\" addEndListener={[Function (anonymous)]} timeout={300} unmountOnExit={true} onExited={[Function: bound bound handleExited]} in={true} exit={[undefined]} enter={[undefined]}>
                    <Transition addEndListener={[Function (anonymous)]} timeout={300} unmountOnExit={true} onExited={[Function (anonymous)]} in={true} exit={true} enter={true} onEnter={[Function (anonymous)]} onEntered={[Function (anonymous)]} onEntering={[Function (anonymous)]} onExit={[Function (anonymous)]} onExiting={[Function (anonymous)]} mountOnEnter={false} appear={false}>
                      <div tabIndex={0} className=\\"bp4-overlay-start-focus-trap\\" onFocus={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} />
                    </Transition>
                  </CSSTransition>
                  <CSSTransition classNames=\\"bp4-overlay\\" timeout={300} addEndListener={[Function (anonymous)]} onExited={[Function: bound bound handleExited]} in={true} exit={[undefined]} enter={[undefined]}>
                    <Transition timeout={300} addEndListener={[Function (anonymous)]} onExited={[Function (anonymous)]} in={true} exit={true} enter={true} onEnter={[Function (anonymous)]} onEntered={[Function (anonymous)]} onEntering={[Function (anonymous)]} onExit={[Function (anonymous)]} onExiting={[Function (anonymous)]} mountOnEnter={false} unmountOnExit={false} appear={false}>
                      <div className=\\"bp4-overlay-backdrop\\" onMouseDown={[Function (anonymous)]} />
                    </Transition>
                  </CSSTransition>
                  <CSSTransition classNames=\\"bp4-overlay\\" onEntering={[undefined]} onEntered={[undefined]} onExiting={[undefined]} onExited={[Function: bound bound handleExited]} timeout={300} addEndListener={[Function (anonymous)]} in={true} exit={[undefined]} enter={[undefined]}>
                    <Transition onEntering={[Function (anonymous)]} onEntered={[Function (anonymous)]} onExiting={[Function (anonymous)]} onExited={[Function (anonymous)]} timeout={300} addEndListener={[Function (anonymous)]} in={true} exit={true} enter={true} onEnter={[Function (anonymous)]} onExit={[Function (anonymous)]} mountOnEnter={false} unmountOnExit={false} appear={false}>
                      <div className=\\"bp4-dialog-container bp4-overlay-content\\">
                        <div className=\\"bp4-dialog assessment-briefing\\" role=\\"dialog\\" aria-labelledby={[undefined]} aria-describedby={[undefined]} style={[undefined]}>
                          <Blueprint4.Card elevation={0} interactive={false}>
                            <div className=\\"bp4-card bp4-elevation-0\\">
                              <Memo(Markdown) content=\\"This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. \\">
                                <div className=\\"md bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                              </Memo(Markdown)>
                              <Blueprint4.Button className=\\"assessment-briefing-button\\" onClick={[Function: onClick]} text=\\"Continue\\">
                                <button type=\\"button\\" className=\\"bp4-button assessment-briefing-button\\" onClick={[Function: onClick]} disabled={false} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                  <Blueprint4.Icon icon={[undefined]} />
                                  <span className=\\"bp4-button-text\\">
                                    Continue
                                  </span>
                                  <Blueprint4.Icon icon={[undefined]} />
                                </button>
                              </Blueprint4.Button>
                            </div>
                          </Blueprint4.Card>
                        </div>
                      </div>
                    </Transition>
                  </CSSTransition>
                  <CSSTransition classNames=\\"bp4-overlay\\" addEndListener={[Function (anonymous)]} timeout={300} unmountOnExit={true} onExited={[Function: bound bound handleExited]} in={true} exit={[undefined]} enter={[undefined]}>
                    <Transition addEndListener={[Function (anonymous)]} timeout={300} unmountOnExit={true} onExited={[Function (anonymous)]} in={true} exit={true} enter={true} onEnter={[Function (anonymous)]} onEntered={[Function (anonymous)]} onEntering={[Function (anonymous)]} onExit={[Function (anonymous)]} onExiting={[Function (anonymous)]} mountOnEnter={false} appear={false}>
                      <div tabIndex={0} className=\\"bp4-overlay-end-focus-trap\\" onFocus={[Function (anonymous)]} />
                    </Transition>
                  </CSSTransition>
                </div>
              </TransitionGroup>
            </Portal>
          </Blueprint4.Portal>
        </Blueprint4.Overlay>
      </Blueprint4.Dialog>
      <Blueprint4.Dialog className=\\"assessment-reset\\" icon=\\"error\\" isCloseButtonShown={true} isOpen={false} onClose={[Function: closeOverlay]} title=\\"Confirmation: Reset editor?\\" canOutsideClickClose={true}>
        <Blueprint4.Overlay className=\\"bp4-overlay-scroll-container\\" icon=\\"error\\" isCloseButtonShown={true} isOpen={false} onClose={[Function: closeOverlay]} title=\\"Confirmation: Reset editor?\\" canOutsideClickClose={true} hasBackdrop={true} autoFocus={true} backdropProps={{...}} canEscapeKeyClose={true} enforceFocus={true} lazy={true} shouldReturnFocusOnClose={true} transitionDuration={300} transitionName=\\"bp4-overlay\\" usePortal={true} />
      </Blueprint4.Dialog>
      <Workspace controlBarProps={{...}} editorContainerProps={{...}} handleSideContentHeightChange={[Function: handleSideContentHeightChange]} hasUnsavedChanges={false} mcqProps={{...}} sideBarProps={{...}} sideContentHeight={[undefined]} sideContentProps={{...}} replProps={{...}}>
        <div className=\\"workspace\\">
          <ControlBar editorButtons={{...}} flowButtons={{...}}>
            <div className=\\"ControlBar\\">
              <div className=\\"ControlBar_editor bp4-button-group\\">
                <ControlBarRunButton isEntrypointFileDefined={true} handleEditorEval={[Function: handleEval]}>
                  <Blueprint4.Tooltip2 content=\\"...or press shift-enter in the editor\\" placement=\\"top\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                    <Tooltip2Provider>
                      <Blueprint4.Popover2 modifiers={{...}} content=\\"...or press shift-enter in the editor\\" placement=\\"top\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                        <Manager>
                          <Reference>
                            <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                              <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                <ControlButton label=\\"Run\\" icon=\\"play\\" onClick={[Function: handleEval]} options={{...}} isDisabled={false} className=\\"\\" disabled={[undefined]} tabIndex={0}>
                                  <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className={[undefined]} type={[undefined]} onClick={[Function: handleEval]} icon={{...}} rightIcon={false}>
                                    <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: handleEval]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                      <Blueprint4.Icon icon={{...}}>
                                        <Blueprint4.Icon icon=\\"play\\" color={[undefined]}>
                                          <span aria-hidden={true} icon=\\"play\\" className=\\"bp4-icon bp4-icon-play\\" title={[undefined]}>
                                            <svg fill={[undefined]} data-icon=\\"play\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                              <path d=\\"M12 8c0-.35-.19-.64-.46-.82l.01-.02-6-4-.01.02A.969.969 0 005 3c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1 .21 0 .39-.08.54-.18l.01.02 6-4-.01-.02c.27-.18.46-.47.46-.82z\\" fillRule=\\"evenodd\\" />
                                            </svg>
                                          </span>
                                        </Blueprint4.Icon>
                                      </Blueprint4.Icon>
                                      <span className=\\"bp4-button-text\\">
                                        Run
                                      </span>
                                      <Blueprint4.Icon icon={false} />
                                    </button>
                                  </Blueprint4.Button>
                                </ControlButton>
                              </span>
                            </Blueprint4.ResizeSensor2>
                          </Reference>
                          <Popper innerRef={[Function (anonymous)]} placement=\\"top\\" strategy=\\"absolute\\" modifiers={{...}}>
                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                          </Popper>
                        </Manager>
                      </Blueprint4.Popover2>
                    </Tooltip2Provider>
                  </Blueprint4.Tooltip2>
                </ControlBarRunButton>
                <ControlButtonSaveButton hasUnsavedChanges={false} onClickSave={[Function: onClickSave]}>
                  <ControlButton label=\\"Save\\" icon=\\"floppy-disk\\" onClick={[Function: onClickSave]} options={{...}}>
                    <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: onClickSave]} icon={{...}} rightIcon={false}>
                      <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: onClickSave]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                        <Blueprint4.Icon icon={{...}}>
                          <Blueprint4.Icon icon=\\"floppy-disk\\" color={[undefined]}>
                            <span aria-hidden={true} icon=\\"floppy-disk\\" className=\\"bp4-icon bp4-icon-floppy-disk\\" title={[undefined]}>
                              <svg fill={[undefined]} data-icon=\\"floppy-disk\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                <path d=\\"M15.71 2.29l-2-2A.997.997 0 0013 0h-1v6H4V0H1C.45 0 0 .45 0 1v14c0 .55.45 1 1 1h14c.55 0 1-.45 1-1V3c0-.28-.11-.53-.29-.71zM14 15H2V9c0-.55.45-1 1-1h10c.55 0 1 .45 1 1v6zM11 1H9v4h2V1z\\" fillRule=\\"evenodd\\" />
                              </svg>
                            </span>
                          </Blueprint4.Icon>
                        </Blueprint4.Icon>
                        <span className=\\"bp4-button-text\\">
                          Save
                        </span>
                        <Blueprint4.Icon icon={false} />
                      </button>
                    </Blueprint4.Button>
                  </ControlButton>
                </ControlButtonSaveButton>
                <ControlBarResetButton onClick={[Function: onClickResetTemplate]}>
                  <ControlButton label=\\"Reset\\" icon=\\"repeat\\" onClick={[Function: onClickResetTemplate]}>
                    <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: onClickResetTemplate]} icon={{...}} rightIcon={false}>
                      <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: onClickResetTemplate]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                        <Blueprint4.Icon icon={{...}}>
                          <Blueprint4.Icon icon=\\"repeat\\" color={[undefined]}>
                            <span aria-hidden={true} icon=\\"repeat\\" className=\\"bp4-icon bp4-icon-repeat\\" title={[undefined]}>
                              <svg fill={[undefined]} data-icon=\\"repeat\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                <path d=\\"M10 5c0 .55.45 1 1 1h4c.55 0 1-.45 1-1V1c0-.55-.45-1-1-1s-1 .45-1 1v1.74A7.95 7.95 0 008 0C3.58 0 0 3.58 0 8c0 4.06 3.02 7.4 6.94 7.92.02 0 .04.01.06.01.33.04.66.07 1 .07 4.42 0 8-3.58 8-8 0-.55-.45-1-1-1s-1 .45-1 1c0 3.31-2.69 6-6 6-.71 0-1.37-.15-2-.38v.01C3.67 12.81 2 10.61 2 8c0-3.31 2.69-6 6-6 1.77 0 3.36.78 4.46 2H11c-.55 0-1 .45-1 1z\\" fillRule=\\"evenodd\\" />
                              </svg>
                            </span>
                          </Blueprint4.Icon>
                        </Blueprint4.Icon>
                        <span className=\\"bp4-button-text\\">
                          Reset
                        </span>
                        <Blueprint4.Icon icon={false} />
                      </button>
                    </Blueprint4.Button>
                  </ControlButton>
                </ControlBarResetButton>
                <ControlBarChapterSelect handleChapterSelect={[Function: handleChapterSelect]} isFolderModeEnabled={false} sourceChapter={1} sourceVariant=\\"default\\" disabled={true}>
                  <Blueprint4.Select items={{...}} onItemSelect={[Function: handleChapterSelect]} itemRenderer={[Function (anonymous)]} itemListRenderer={[Function: chapterListRenderer]} filterable={false} disabled={true}>
                    <Blueprint4.QueryList items={{...}} onItemSelect={[Function (anonymous)]} itemRenderer={[Function (anonymous)]} itemListRenderer={[Function: chapterListRenderer]} disabled={true} renderer={[Function (anonymous)]} resetOnQuery={true}>
                      <Blueprint4.Popover autoFocus={false} enforceFocus={false} isOpen={false} disabled={true} position=\\"bottom-left\\" className=\\"\\" onInteraction={[Function (anonymous)]} popoverClassName=\\"bp4-select-popover\\" onOpening={[Function (anonymous)]} onOpened={[Function (anonymous)]} onClosing={[Function (anonymous)]} boundary=\\"scrollParent\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} hoverCloseDelay={300} hoverOpenDelay={150} inheritDarkTheme={true} interactionKind=\\"click\\" minimal={false} modifiers={{...}} openOnTargetFocus={true} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" transitionDuration={300} usePortal={true} wrapperTagName=\\"span\\">
                        <Manager>
                          <span className=\\"bp4-popover-wrapper\\">
                            <Reference innerRef={[Function (anonymous)]}>
                              <InnerReference setReferenceNode={[Function (anonymous)]} innerRef={[Function (anonymous)]}>
                                <Blueprint4.ResizeSensor onResize={[Function (anonymous)]}>
                                  <span onClick={[Function (anonymous)]} aria-haspopup=\\"true\\" className=\\"bp4-popover-target\\">
                                    <div onKeyDown={[Function (anonymous)]} onKeyUp={[undefined]} className=\\"\\" disabled={[undefined]} tabIndex={[undefined]}>
                                      <Blueprint4.Button className=\\"bp4-minimal\\" text=\\"Source §1\\" rightIcon={{...}} disabled={true}>
                                        <button type=\\"button\\" className=\\"bp4-button bp4-disabled bp4-minimal\\" disabled={true} onBlur={[Function (anonymous)]} onClick={[undefined]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={-1}>
                                          <Blueprint4.Icon icon={[undefined]} />
                                          <span className=\\"bp4-button-text\\">
                                            Source §1
                                          </span>
                                          <Blueprint4.Icon icon={{...}} />
                                        </button>
                                      </Blueprint4.Button>
                                    </div>
                                  </span>
                                </Blueprint4.ResizeSensor>
                              </InnerReference>
                            </Reference>
                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover-backdrop\\" backdropProps={{...}} canEscapeKeyClose={true} canOutsideClickClose={true} className={[undefined]} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[Function (anonymous)]} onOpened={[Function (anonymous)]} onOpening={[Function (anonymous)]} transitionDuration={300} transitionName=\\"bp4-popover\\" usePortal={true} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                          </span>
                        </Manager>
                      </Blueprint4.Popover>
                    </Blueprint4.QueryList>
                  </Blueprint4.Select>
                </ControlBarChapterSelect>
              </div>
              <div className=\\"ControlBar_flow bp4-button-group\\">
                <ControlBarPreviousButton onClick={[Function: onClickPrevious]} questionProgress={{...}} />
                <ControlBarQuestionViewButton questionProgress={{...}}>
                  <ControlButton label=\\"Question 1 of 2  \\" isDisabled={true}>
                    <Blueprint4.Button disabled={true} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[undefined]} icon={[undefined]} rightIcon={false}>
                      <button type={[undefined]} disabled={true} className=\\"bp4-button bp4-disabled bp4-minimal\\" onClick={[undefined]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={-1}>
                        <Blueprint4.Icon icon={[undefined]} />
                        <span className=\\"bp4-button-text\\">
                          Question 1 of 2  
                        </span>
                        <Blueprint4.Icon icon={false} />
                      </button>
                    </Blueprint4.Button>
                  </ControlButton>
                </ControlBarQuestionViewButton>
                <ControlBarNextButton onClickNext={[Function: onClickNext]} onClickReturn={[Function: onClickReturn]} questionProgress={{...}}>
                  <ControlButton label=\\"Next\\" icon=\\"arrow-right\\" onClick={[Function: onClickNext]} options={{...}}>
                    <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: onClickNext]} icon={false} rightIcon={{...}}>
                      <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: onClickNext]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                        <Blueprint4.Icon icon={false} />
                        <span className=\\"bp4-button-text\\">
                          Next
                        </span>
                        <Blueprint4.Icon icon={{...}}>
                          <Blueprint4.Icon icon=\\"arrow-right\\" color={[undefined]}>
                            <span aria-hidden={true} icon=\\"arrow-right\\" className=\\"bp4-icon bp4-icon-arrow-right\\" title={[undefined]}>
                              <svg fill={[undefined]} data-icon=\\"arrow-right\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                <path d=\\"M14.7 7.29l-5-5a.965.965 0 00-.71-.3 1.003 1.003 0 00-.71 1.71l3.29 3.29H1.99c-.55 0-1 .45-1 1s.45 1 1 1h9.59l-3.29 3.29a1.003 1.003 0 001.42 1.42l5-5c.18-.18.29-.43.29-.71s-.12-.52-.3-.7z\\" fillRule=\\"evenodd\\" />
                              </svg>
                            </span>
                          </Blueprint4.Icon>
                        </Blueprint4.Icon>
                      </button>
                    </Blueprint4.Button>
                  </ControlButton>
                </ControlBarNextButton>
              </div>
              <div className=\\"ControlBar_editingWorkspace bp4-button-group\\" />
            </div>
          </ControlBar>
          <div className=\\"workspace-parent\\">
            <Resizable enable={{...}} minWidth=\\"auto\\" maxWidth=\\"50%\\" onResize={[Function: toggleSideBarDividerDisplay]} onResizeStop={[Function: onResizeStop]} size={{...}} defaultSize={{...}} as=\\"div\\" onResizeStart={[Function: onResizeStart]} style={{...}} grid={{...}} lockAspectRatio={false} lockAspectRatioExtraWidth={0} lockAspectRatioExtraHeight={0} scale={1} resizeRatio={1} snapGap={0}>
              <div style={{...}} className={[undefined]}>
                <SideBar tabs={{...}} isExpanded={true} expandSideBar={[Function: expandSideBar]} collapseSideBar={[Function: collapseSideBar]}>
                  <div className=\\"sidebar-container\\" />
                </SideBar>
                <div className={[undefined]} style={[undefined]} />
              </div>
            </Resizable>
            <div className=\\"row content-parent\\">
              <div className=\\"editor-divider\\" />
              <Resizable className=\\"resize-editor left-parent\\" enable={{...}} minWidth={0} onResize={[Function: toggleEditorDividerDisplay]} defaultSize={{...}} as=\\"div\\" onResizeStart={[Function: onResizeStart]} onResizeStop={[Function: onResizeStop]} style={{...}} grid={{...}} lockAspectRatio={false} lockAspectRatioExtraWidth={0} lockAspectRatioExtraHeight={0} scale={1} resizeRatio={1} snapGap={0}>
                <div style={{...}} className=\\"resize-editor left-parent\\">
                  <EditorContainer editorVariant=\\"normal\\" isFolderModeEnabled={false} activeEditorTabIndex={0} setActiveEditorTabIndex={[Function (anonymous)]} removeEditorTabByIndex={[Function (anonymous)]} editorTabs={{...}} editorSessionId=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibraryName=\\"NONE\\" handleDeclarationNavigate={[Function: handleDeclarationNavigate]} handleEditorEval={[Function: handleEval]} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, 'function fibonacci(n) {\\\\n      if (n <= 2) {\\\\n          return 1;\\\\n      } else {\\\\n          return fibonacci(n-1) + fibonacci(n-2);\\\\n      }\\\\n  }' ], [ 0, 'function fibonacci(n) {\\\\n      if (n <= 2) {\\\\n          return 1;\\\\n      } else {\\\\n          return fibonacci(n-1) + fibonacci(n-2);\\\\n      }\\\\n  }' ], [ 0, 'function fibonacci(n) {\\\\n      if (n <= 2) {\\\\n          return 1;\\\\n      } else {\\\\n          return fibonacci(n-1) + fibonacci(n-2);\\\\n      }\\\\n  }' ] ], instances: [ { assessmentId: 4, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 4, longSummary: 'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'A Closed Mission' } }, { assessmentId: 4, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 4, longSummary: 'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'A Closed Mission' } }, { assessmentId: 4, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 4, longSummary: 'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'A Closed Mission' } }, { assessmentId: 4, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 4, longSummary: 'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'A Closed Mission' } } ], invocationCallOrder: [ 14, 15, 16, 17 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, 'function fibonacci(n) {\\\\n      if (n <= 2) {\\\\n          return 1;\\\\n      } else {\\\\n          return fibonacci(n-1) + fibonacci(n-2);\\\\n      }\\\\n  }' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handlePromptAutocomplete={[Function: handlePromptAutocomplete]} isEditorAutorun={false} onChange={[Function: onChangeMethod]} onCursorChange={[Function: onCursorChangeMethod]} onSelectionChange={[Function: onSelectionChangeMethod]}>
                    <div className=\\"editor-container\\">
                      <Component editorVariant=\\"normal\\" editorSessionId=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibraryName=\\"NONE\\" handleDeclarationNavigate={[Function: handleDeclarationNavigate]} handleEditorEval={[Function: handleEval]} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, 'function fibonacci(n) {\\\\n      if (n <= 2) {\\\\n          return 1;\\\\n      } else {\\\\n          return fibonacci(n-1) + fibonacci(n-2);\\\\n      }\\\\n  }' ], [ 0, 'function fibonacci(n) {\\\\n      if (n <= 2) {\\\\n          return 1;\\\\n      } else {\\\\n          return fibonacci(n-1) + fibonacci(n-2);\\\\n      }\\\\n  }' ], [ 0, 'function fibonacci(n) {\\\\n      if (n <= 2) {\\\\n          return 1;\\\\n      } else {\\\\n          return fibonacci(n-1) + fibonacci(n-2);\\\\n      }\\\\n  }' ] ], instances: [ { assessmentId: 4, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 4, longSummary: 'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'A Closed Mission' } }, { assessmentId: 4, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 4, longSummary: 'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'A Closed Mission' } }, { assessmentId: 4, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 4, longSummary: 'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'A Closed Mission' } }, { assessmentId: 4, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 4, longSummary: 'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'A Closed Mission' } } ], invocationCallOrder: [ 14, 15, 16, 17 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, 'function fibonacci(n) {\\\\n      if (n <= 2) {\\\\n          return 1;\\\\n      } else {\\\\n          return fibonacci(n-1) + fibonacci(n-2);\\\\n      }\\\\n  }' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handlePromptAutocomplete={[Function: handlePromptAutocomplete]} isEditorAutorun={false} onChange={[Function: onChangeMethod]} onCursorChange={[Function: onCursorChangeMethod]} onSelectionChange={[Function: onSelectionChangeMethod]} editorTabIndex={0} editorValue=\\"\\" filePath={[undefined]} highlightedLines={{...}} breakpoints={{...}}>
                        <MockEditor editorVariant=\\"normal\\" editorSessionId=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibraryName=\\"NONE\\" handleDeclarationNavigate={[Function: handleDeclarationNavigate]} handleEditorEval={[Function: handleEval]} handleEditorValueChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ 0, '' ], [ 0, 'function fibonacci(n) {\\\\n      if (n <= 2) {\\\\n          return 1;\\\\n      } else {\\\\n          return fibonacci(n-1) + fibonacci(n-2);\\\\n      }\\\\n  }' ], [ 0, 'function fibonacci(n) {\\\\n      if (n <= 2) {\\\\n          return 1;\\\\n      } else {\\\\n          return fibonacci(n-1) + fibonacci(n-2);\\\\n      }\\\\n  }' ], [ 0, 'function fibonacci(n) {\\\\n      if (n <= 2) {\\\\n          return 1;\\\\n      } else {\\\\n          return fibonacci(n-1) + fibonacci(n-2);\\\\n      }\\\\n  }' ] ], instances: [ { assessmentId: 4, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 4, longSummary: 'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'A Closed Mission' } }, { assessmentId: 4, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 4, longSummary: 'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'A Closed Mission' } }, { assessmentId: 4, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 4, longSummary: 'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'A Closed Mission' } }, { assessmentId: 4, autogradingResults: [], notAttempted: true, canSave: true, assessmentConfiguration: { assessmentConfigId: 1, type: 'Missions', isManuallyGraded: true, displayInDashboard: true, hoursBeforeEarlyXpDecay: 48, earlySubmissionXp: 200 }, programPrependValue: '', programPostpendValue: '', editorTestcases: [], hasUnsavedChanges: false, handleEditorValueChange: [Circular], handleEditorUpdateBreakpoints: [Function: handleEditorUpdateBreakpoints], handleReplEval: [Function: handleReplEval], handleSave: [Function: handleSave], handleUpdateHasUnsavedChanges: [Function: handleUpdateHasUnsavedChanges], isRunning: false, isDebugging: false, enableDebugging: false, output: [], questionId: 0, replValue: '', assessment: { type: 'Missions', id: 4, longSummary: 'This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. ', missionPDF: 'www.google.com', questions: [Array], title: 'A Closed Mission' } } ], invocationCallOrder: [ 14, 15, 16, 17 ], results: [ Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined }, Object [Object: null prototype] { type: 'return', value: undefined } ], lastCall: [ 0, 'function fibonacci(n) {\\\\n      if (n <= 2) {\\\\n          return 1;\\\\n      } else {\\\\n          return fibonacci(n-1) + fibonacci(n-2);\\\\n      }\\\\n  }' ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} handleUpdateHasUnsavedChanges={[Function: handleUpdateHasUnsavedChanges]} handleEditorUpdateBreakpoints={[Function: handleEditorUpdateBreakpoints]} handlePromptAutocomplete={[Function: handlePromptAutocomplete]} isEditorAutorun={false} onChange={[Function: onChangeMethod]} onCursorChange={[Function: onCursorChangeMethod]} onSelectionChange={[Function: onSelectionChangeMethod]} editorTabIndex={0} editorValue=\\"\\" filePath={[undefined]} highlightedLines={{...}} breakpoints={{...}}>
                          <div id=\\"mock-editor\\" />
                        </MockEditor>
                      </Component>
                    </div>
                  </EditorContainer>
                  <div className={[undefined]} style={[undefined]}>
                    <Resizer direction=\\"right\\" onResizeStart={[Function: bound ]} replaceStyles={[undefined]} className={[undefined]}>
                      <div className=\\"\\" style={{...}} onMouseDown={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} />
                    </Resizer>
                  </div>
                </div>
              </Resizable>
              <div className=\\"right-parent\\">
                <Resizable bounds=\\"parent\\" className=\\"resize-side-content\\" enable={{...}} onResize={[Function: toggleDividerDisplay]} onResizeStop={[Function: onResizeStop]} as=\\"div\\" onResizeStart={[Function: onResizeStart]} style={{...}} grid={{...}} lockAspectRatio={false} lockAspectRatioExtraWidth={0} lockAspectRatioExtraHeight={0} scale={1} resizeRatio={1} snapGap={0}>
                  <div style={{...}} className=\\"resize-side-content\\">
                    <SideContent selectedTabId=\\"grading\\" tabs={{...}} onChange={[Function: onChangeTabs]} workspaceLocation=\\"assessment\\">
                      <GenericSideContent tabs={{...}} onChange={[Function: onChangeTabs]} workspaceLocation=\\"assessment\\" renderFunction={[Function: renderFunction]}>
                        <div className=\\"side-content\\">
                          <Blueprint4.Card elevation={0} interactive={false}>
                            <div className=\\"bp4-card bp4-elevation-0\\">
                              <div className=\\"side-content-tabs\\">
                                <Blueprint4.Tabs id=\\"side-content-tabs\\" onChange={[Function (anonymous)]} renderActiveTabPanelOnly={false} selectedTabId=\\"grading\\" animate={true} fill={false} large={false} vertical={false}>
                                  <div className=\\"bp4-tabs\\">
                                    <div className=\\"bp4-tab-list\\" onKeyDown={[Function (anonymous)]} onKeyPress={[Function (anonymous)]} role=\\"tablist\\">
                                      <div className=\\"bp4-tab-indicator-wrapper\\" style={{...}}>
                                        <div className=\\"bp4-tab-indicator\\" />
                                      </div>
                                      <Blueprint4.TabTitle id=\\"question_overview\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={false}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_question_overview\\" aria-disabled={false} aria-expanded={false} aria-selected={false} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"question_overview\\" id=\\"bp4-tab-title_side-content-tabs_question_overview\\" role=\\"tab\\" tabIndex={-1}>
                                          <Blueprint4.Tooltip2 content=\\"Question 1\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Question 1\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"question_overview-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"ninja\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"ninja\\" className=\\"bp4-icon bp4-icon-ninja\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"ninja\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M20 6s-2.98 2.43-6.12 2.19C13.52 5.31 12.05 0 6 0c0 0 2.41 2.99 2.16 6.12C5.27 6.49 0 7.97 0 14c0 0 2.98-2.43 6.11-2.19C6.47 14.69 7.94 20 14 20c0 0-2.42-2.99-2.16-6.13C14.73 13.51 20 12.02 20 6zm-10 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                      <Blueprint4.TabTitle id=\\"briefing\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={false}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_briefing\\" aria-disabled={false} aria-expanded={false} aria-selected={false} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"briefing\\" id=\\"bp4-tab-title_side-content-tabs_briefing\\" role=\\"tab\\" tabIndex={-1}>
                                          <Blueprint4.Tooltip2 content=\\"Briefing\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Briefing\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"briefing-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"briefcase\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"briefcase\\" className=\\"bp4-icon bp4-icon-briefcase\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"briefcase\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M19 5h-4V2c0-.55-.45-1-1-1H6c-.55 0-1 .45-1 1v3H1c-.55 0-1 .45-1 1v5h4v-1h2v1h8v-1h2v1h4V6c0-.55-.45-1-1-1zm-6 0H7V3h6v2zm3 8h-2v-1H6v1H4v-1H0v6c0 .55.45 1 1 1h18c.55 0 1-.45 1-1v-6h-4v1z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                      <Blueprint4.TabTitle id=\\"autograder\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={false}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_autograder\\" aria-disabled={false} aria-expanded={false} aria-selected={false} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"autograder\\" id=\\"bp4-tab-title_side-content-tabs_autograder\\" role=\\"tab\\" tabIndex={-1}>
                                          <Blueprint4.Tooltip2 content=\\"Autograder\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Autograder\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"autograder-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"airplane\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"airplane\\" className=\\"bp4-icon bp4-icon-airplane\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"airplane\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M20 2c0-1.1-.9-2-2-2-.55 0-1.05.22-1.41.59l-4.84 4.84L2 1 1 3l7.53 5.64L4.17 13H1l-1 1 4 2 2 4 1-1v-3.17l4.36-4.36L17 19l2-1-4.43-9.74 4.84-4.84c.37-.37.59-.87.59-1.42z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                      <Blueprint4.TabTitle id=\\"grading\\" title={{...}} disabled={false} className=\\"side-content-tab\\" panel={{...}} parentId=\\"side-content-tabs\\" onClick={[Function (anonymous)]} selected={true}>
                                        <div onClick={[Function (anonymous)]} aria-controls=\\"bp4-tab-panel_side-content-tabs_grading\\" aria-disabled={false} aria-expanded={true} aria-selected={true} className=\\"bp4-tab side-content-tab\\" data-tab-id=\\"grading\\" id=\\"bp4-tab-title_side-content-tabs_grading\\" role=\\"tab\\" tabIndex={0}>
                                          <Blueprint4.Tooltip2 content=\\"Report Card\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                            <Tooltip2Provider>
                                              <Blueprint4.Popover2 modifiers={{...}} content=\\"Report Card\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                <Manager>
                                                  <Reference>
                                                    <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                      <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                        <div className=\\"side-content-tooltip\\" id=\\"grading-icon\\" disabled={[undefined]} tabIndex={0}>
                                                          <Blueprint4.Icon icon=\\"tick\\" iconSize={20}>
                                                            <span aria-hidden={true} icon=\\"tick\\" className=\\"bp4-icon bp4-icon-tick\\" title={[undefined]}>
                                                              <svg fill={[undefined]} data-icon=\\"tick\\" width={20} height={20} viewBox=\\"0 0 20 20\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                <path d=\\"M17 4c-.28 0-.53.11-.71.29L7 13.59 3.71 10.3A.965.965 0 003 10a1.003 1.003 0 00-.71 1.71l4 4c.18.18.43.29.71.29s.53-.11.71-.29l10-10A1.003 1.003 0 0017 4z\\" fillRule=\\"evenodd\\" />
                                                              </svg>
                                                            </span>
                                                          </Blueprint4.Icon>
                                                        </div>
                                                      </span>
                                                    </Blueprint4.ResizeSensor2>
                                                  </Reference>
                                                  <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                    <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                  </Popper>
                                                </Manager>
                                              </Blueprint4.Popover2>
                                            </Tooltip2Provider>
                                          </Blueprint4.Tooltip2>
                                        </div>
                                      </Blueprint4.TabTitle>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_question_overview\\" aria-hidden={true} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_question_overview\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <Memo(Markdown) className=\\"sidecontent-overview\\" content=\\"You can see autograding results!!!\\" workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <div className=\\"sidecontent-overview bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                                        </Memo(Markdown)>
                                      </div>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_briefing\\" aria-hidden={true} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_briefing\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <Memo(Markdown) className=\\"sidecontent-overview\\" content=\\"This is the closed mission briefing. The save button should not be there. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas viverra, sem scelerisque ultricies ullamcorper, sem nibh sollicitudin enim, at ultricies sem orci eget odio. Pellentesque varius et mauris quis vestibulum. Etiam in egestas dolor. Nunc consectetur, sapien sodales accumsan convallis, lectus mi tempus ipsum, vel ornare metus turpis sed justo. Vivamus at tellus sed ex convallis commodo at in lectus. Pellentesque pharetra pulvinar sapien pellentesque facilisis. Curabitur efficitur malesuada urna sed aliquam. Quisque massa metus, aliquam in sagittis non, cursus in sem. Morbi vel nunc at nunc pharetra lobortis. Aliquam feugiat ultricies ipsum vel sollicitudin. Vivamus nulla massa, hendrerit sit amet nibh quis, porttitor convallis nisi. \\" workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <div className=\\"sidecontent-overview bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                                        </Memo(Markdown)>
                                      </div>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_autograder\\" aria-hidden={true} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_autograder\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <SideContentAutograder testcases={{...}} autogradingResults={{...}} handleTestcaseEval={[Function: handleTestcaseEval]} workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <div className=\\"Autograder\\">
                                            <Blueprint4.Button className=\\"collapse-button\\" icon=\\"caret-down\\" minimal={true} onClick={[Function (anonymous)]}>
                                              <button type=\\"button\\" className=\\"bp4-button bp4-minimal collapse-button\\" onClick={[Function (anonymous)]} disabled={false} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                <Blueprint4.Icon icon=\\"caret-down\\">
                                                  <span aria-hidden={true} icon=\\"caret-down\\" className=\\"bp4-icon bp4-icon-caret-down\\" title={[undefined]}>
                                                    <svg fill={[undefined]} data-icon=\\"caret-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                      <path d=\\"M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z\\" fillRule=\\"evenodd\\" />
                                                    </svg>
                                                  </span>
                                                </Blueprint4.Icon>
                                                <span className=\\"bp4-button-text\\">
                                                  <span>
                                                    Testcases
                                                  </span>
                                                  <Blueprint4.Tooltip2 content={{...}} placement=\\"left\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                                    <Tooltip2Provider>
                                                      <Blueprint4.Popover2 modifiers={{...}} content={{...}} placement=\\"left\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                                        <Manager>
                                                          <Reference>
                                                            <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                                              <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                                <Blueprint4.Icon icon=\\"help\\" className=\\"\\" disabled={[undefined]} tabIndex={0}>
                                                                  <span aria-hidden={true} icon=\\"help\\" disabled={[undefined]} tabIndex={0} className=\\"bp4-icon bp4-icon-help\\" title={[undefined]}>
                                                                    <svg fill={[undefined]} data-icon=\\"help\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                                      <path d=\\"M8 0C3.58 0 0 3.58 0 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm1 13H7v-2h2v2zm1.93-6.52c-.14.32-.35.64-.62.97L9.25 8.83c-.12.15-.24.29-.28.42-.04.13-.09.3-.09.52V10H7.12V8.88s.05-.51.21-.71L8.4 6.73c.22-.26.35-.49.44-.68.09-.19.12-.38.12-.58 0-.3-.1-.55-.28-.75-.18-.19-.44-.28-.76-.28-.33 0-.59.1-.78.29-.19.19-.33.46-.4.81-.03.11-.1.15-.2.14l-1.7-.25c-.12-.01-.16-.08-.14-.19.12-.82.46-1.47 1.03-1.94.57-.48 1.32-.72 2.25-.72.47 0 .9.07 1.29.22s.72.34 1 .59c.28.25.49.55.65.89.15.35.22.72.22 1.12s-.07.75-.21 1.08z\\" fillRule=\\"evenodd\\" />
                                                                    </svg>
                                                                  </span>
                                                                </Blueprint4.Icon>
                                                              </span>
                                                            </Blueprint4.ResizeSensor2>
                                                          </Reference>
                                                          <Popper innerRef={[Function (anonymous)]} placement=\\"left\\" strategy=\\"absolute\\" modifiers={{...}}>
                                                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                                          </Popper>
                                                        </Manager>
                                                      </Blueprint4.Popover2>
                                                    </Tooltip2Provider>
                                                  </Blueprint4.Tooltip2>
                                                </span>
                                                <Blueprint4.Icon icon={[undefined]} />
                                              </button>
                                            </Blueprint4.Button>
                                            <Blueprint4.Collapse isOpen={true} keepChildrenMounted={true} component=\\"div\\" transitionDuration={200}>
                                              <div className=\\"bp4-collapse\\" style={{...}}>
                                                <div className=\\"bp4-collapse-body\\" style={{...}} aria-hidden={false}>
                                                  <div className=\\"noResults\\">
                                                    There are no testcases provided for this question.
                                                  </div>
                                                </div>
                                              </div>
                                            </Blueprint4.Collapse>
                                            <ControlButton label=\\"Autograder Results\\" icon=\\"caret-down\\" onClick={[Function (anonymous)]} options={{...}}>
                                              <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"collapse-button\\" type={[undefined]} onClick={[Function (anonymous)]} icon={{...}} rightIcon={false}>
                                                <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal collapse-button\\" onClick={[Function (anonymous)]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                  <Blueprint4.Icon icon={{...}}>
                                                    <Blueprint4.Icon icon=\\"caret-down\\" color={[undefined]}>
                                                      <span aria-hidden={true} icon=\\"caret-down\\" className=\\"bp4-icon bp4-icon-caret-down\\" title={[undefined]}>
                                                        <svg fill={[undefined]} data-icon=\\"caret-down\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                          <path d=\\"M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z\\" fillRule=\\"evenodd\\" />
                                                        </svg>
                                                      </span>
                                                    </Blueprint4.Icon>
                                                  </Blueprint4.Icon>
                                                  <span className=\\"bp4-button-text\\">
                                                    Autograder Results
                                                  </span>
                                                  <Blueprint4.Icon icon={false} />
                                                </button>
                                              </Blueprint4.Button>
                                            </ControlButton>
                                            <Blueprint4.Collapse isOpen={true} keepChildrenMounted={true} component=\\"div\\" transitionDuration={200}>
                                              <div className=\\"bp4-collapse\\" style={{...}}>
                                                <div className=\\"bp4-collapse-body\\" style={{...}} aria-hidden={false}>
                                                  <div className=\\"noResults\\">
                                                    There are no results to show.
                                                  </div>
                                                </div>
                                              </div>
                                            </Blueprint4.Collapse>
                                          </div>
                                        </SideContentAutograder>
                                      </div>
                                    </div>
                                    <div aria-labelledby=\\"bp4-tab-title_side-content-tabs_grading\\" aria-hidden={false} className=\\"bp4-tab-panel side-content-tab\\" id=\\"bp4-tab-panel_side-content-tabs_grading\\" role=\\"tabpanel\\">
                                      <div className=\\"side-content-text\\">
                                        <AssessmentWorkspaceGradingResult graderName=\\"avenger\\" gradedAt=\\"2038-06-18T05:24:26.026Z\\" xp={0} maxXp={2} comments=\\"Good job. You are awarded the full marks!\\\\n  \\\\n  ----\\\\n  ## markdown test\\\\n  \\\\n  # header\\\\n  \\\\n  **bold**\\\\n  \\\\n  _italics_\\\\n  \\\\n  * list\\\\n  \\\\n  1. numbered list\\\\n  \\\\n  - [] checkboxes\\\\n  \\\\n  > quote\\\\n  \\\\n      code\\\\n  \\\\n  [link to Source Academy](https://sourceacademy.nus.edu.sg)  \\\\n  \\\\n  ![](image-url-goes-here)\\" workspaceLocation=\\"assessment\\" editorWidth={[undefined]} sideContentHeight={[undefined]}>
                                          <div className=\\"GradingResult\\">
                                            <div className=\\"grading-result-table\\">
                                              <HTMLTable>
                                                <table className=\\"bp4-html-table\\">
                                                  <tbody>
                                                    <tr>
                                                      <th>
                                                        XP:
                                                      </th>
                                                      <td>
                                                        <Blueprint4.Text ellipsize={false}>
                                                          <div className=\\"\\" title={[undefined]}>
                                                            0
                                                             / 
                                                            2
                                                          </div>
                                                        </Blueprint4.Text>
                                                      </td>
                                                    </tr>
                                                    <tr>
                                                      <th>
                                                        Comments:
                                                      </th>
                                                      <td />
                                                    </tr>
                                                  </tbody>
                                                </table>
                                              </HTMLTable>
                                              <HTMLTable>
                                                <table className=\\"bp4-html-table\\">
                                                  <tbody>
                                                    <tr>
                                                      <td>
                                                        <Blueprint4.Divider>
                                                          <div className=\\"bp4-divider\\" />
                                                        </Blueprint4.Divider>
                                                        <Memo(Markdown) content=\\"Good job. You are awarded the full marks!\\\\n  \\\\n  ----\\\\n  ## markdown test\\\\n  \\\\n  # header\\\\n  \\\\n  **bold**\\\\n  \\\\n  _italics_\\\\n  \\\\n  * list\\\\n  \\\\n  1. numbered list\\\\n  \\\\n  - [] checkboxes\\\\n  \\\\n  > quote\\\\n  \\\\n      code\\\\n  \\\\n  [link to Source Academy](https://sourceacademy.nus.edu.sg)  \\\\n  \\\\n  ![](image-url-goes-here)\\" simplifiedAutoLink={true} strikethrough={true} tasklists={true} openLinksInNewWindow={true}>
                                                          <div className=\\"md bp4-running-text\\" dangerouslySetInnerHTML={{...}} />
                                                        </Memo(Markdown)>
                                                        <Blueprint4.Divider>
                                                          <div className=\\"bp4-divider\\" />
                                                        </Blueprint4.Divider>
                                                      </td>
                                                    </tr>
                                                  </tbody>
                                                </table>
                                              </HTMLTable>
                                              <br />
                                              <div className=\\"grading-result-info\\">
                                                <Blueprint4.Text ellipsize={false}>
                                                  <div className=\\"\\" title={[undefined]}>
                                                    Graded by 
                                                    <b>
                                                      avenger
                                                    </b>
                                                     on 
                                                    18th June, 13:24
                                                  </div>
                                                </Blueprint4.Text>
                                              </div>
                                            </div>
                                          </div>
                                        </AssessmentWorkspaceGradingResult>
                                      </div>
                                    </div>
                                  </div>
                                </Blueprint4.Tabs>
                              </div>
                            </div>
                          </Blueprint4.Card>
                        </div>
                      </GenericSideContent>
                    </SideContent>
                    <div className=\\"side-content-divider\\" />
                    <div className={[undefined]} style={[undefined]}>
                      <Resizer direction=\\"bottom\\" onResizeStart={[Function: bound ]} replaceStyles={[undefined]} className={[undefined]}>
                        <div className=\\"\\" style={{...}} onMouseDown={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} />
                      </Resizer>
                    </div>
                  </div>
                </Resizable>
                <Repl handleBrowseHistoryDown={[Function: handleBrowseHistoryDown]} handleBrowseHistoryUp={[Function: handleBrowseHistoryUp]} handleReplEval={[Function: handleReplEval]} handleReplValueChange={[Function: handleReplValueChange]} output={{...}} replValue=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibrary=\\"NONE\\" replButtons={{...}}>
                  <div className=\\"Repl\\" style={{...}}>
                    <div className=\\"repl-output-parent\\">
                      <HotKeysEnabled className=\\"repl-input-parent row bp4-card bp4-elevation-0\\" handlers={{...}}>
                        <HotKeysWrapper hotKeys={{...}} className=\\"repl-input-parent row bp4-card bp4-elevation-0\\">
                          <div onFocus={[Function: bound _handleFocus]} onBlur={[Function: bound _handleBlur]} tabIndex=\\"-1\\" className=\\"repl-input-parent row bp4-card bp4-elevation-0\\">
                            <ReplInput handleBrowseHistoryDown={[Function: handleBrowseHistoryDown]} handleBrowseHistoryUp={[Function: handleBrowseHistoryUp]} handleReplEval={[Function: handleReplEval]} handleReplValueChange={[Function: handleReplValueChange]} output={{...}} replValue=\\"\\" sourceChapter={1} sourceVariant=\\"default\\" externalLibrary=\\"NONE\\" replButtons={{...}}>
                              <ReactAce className=\\"repl-react-ace react-ace\\" mode=\\"source1defaultNONE\\" theme=\\"source\\" height=\\"1px\\" width=\\"100%\\" value=\\"\\" onChange={[Function: handleReplValueChange]} commands={{...}} minLines={1} maxLines={20} fontSize={17} highlightActiveLine={false} showGutter={false} showPrintMargin={false} setOptions={{...}} name=\\"ace-editor\\" focus={false} enableSnippets={false} onPaste={{...}} onLoad={{...}} onScroll={{...}} readOnly={false} tabSize={4} cursorStart={1} editorProps={{...}} style={{...}} scrollMargin={{...}} wrapEnabled={false} enableBasicAutocompletion={false} enableLiveAutocompletion={false} placeholder={{...}} navigateToFileEnd={true}>
                                <div id=\\"ace-editor\\" style={{...}} />
                              </ReactAce>
                              <div className=\\"bp4-button-group bp4-dark\\">
                                <ControlBarEvalButton handleReplEval={[Function: handleReplEval]} isRunning={false}>
                                  <Blueprint4.Tooltip2 content=\\"...or press shift-enter in the REPL\\" compact={false} hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100}>
                                    <Tooltip2Provider>
                                      <Blueprint4.Popover2 modifiers={{...}} content=\\"...or press shift-enter in the REPL\\" hoverCloseDelay={0} hoverOpenDelay={100} interactionKind=\\"hover-target\\" minimal={false} transitionDuration={100} autoFocus={false} canEscapeKeyClose={false} disabled={false} enforceFocus={false} lazy={true} popoverClassName=\\"bp4-tooltip2\\" portalContainer={[undefined]} boundary=\\"clippingParents\\" captureDismiss={false} defaultIsOpen={false} fill={false} hasBackdrop={false} inheritDarkTheme={true} matchTargetWidth={false} openOnTargetFocus={true} positioningStrategy=\\"absolute\\" renderTarget={[undefined]} shouldReturnFocusOnClose={false} targetTagName=\\"span\\" usePortal={true}>
                                        <Manager>
                                          <Reference>
                                            <Blueprint4.ResizeSensor2 targetRef={[Function (anonymous)]} onResize={[Function (anonymous)]}>
                                              <span aria-haspopup={[undefined]} className=\\"bp4-popover2-target\\" onBlur={[Function (anonymous)]} onContextMenu={[Function (anonymous)]} onFocus={[Function (anonymous)]} onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]}>
                                                <ControlButton label=\\"Eval\\" icon=\\"code\\" onClick={[Function: handleReplEval]} className=\\"\\" disabled={[undefined]} tabIndex={0}>
                                                  <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: handleReplEval]} icon={{...}} rightIcon={false}>
                                                    <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: handleReplEval]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                                      <Blueprint4.Icon icon={{...}}>
                                                        <Blueprint4.Icon icon=\\"code\\" color={[undefined]}>
                                                          <span aria-hidden={true} icon=\\"code\\" className=\\"bp4-icon bp4-icon-code\\" title={[undefined]}>
                                                            <svg fill={[undefined]} data-icon=\\"code\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                              <path d=\\"M15.71 7.29l-3-3a1.003 1.003 0 00-1.42 1.42L13.59 8l-2.29 2.29c-.19.18-.3.43-.3.71a1.003 1.003 0 001.71.71l3-3c.18-.18.29-.43.29-.71 0-.28-.11-.53-.29-.71zM5 5a1.003 1.003 0 00-1.71-.71l-3 3C.11 7.47 0 7.72 0 8c0 .28.11.53.29.71l3 3a1.003 1.003 0 001.42-1.42L2.41 8 4.7 5.71c.19-.18.3-.43.3-.71zm4-3c-.48 0-.87.35-.96.81l-2 10c-.01.06-.04.12-.04.19 0 .55.45 1 1 1 .48 0 .87-.35.96-.81l2-10c.01-.06.04-.12.04-.19 0-.55-.45-1-1-1z\\" fillRule=\\"evenodd\\" />
                                                            </svg>
                                                          </span>
                                                        </Blueprint4.Icon>
                                                      </Blueprint4.Icon>
                                                      <span className=\\"bp4-button-text\\">
                                                        Eval
                                                      </span>
                                                      <Blueprint4.Icon icon={false} />
                                                    </button>
                                                  </Blueprint4.Button>
                                                </ControlButton>
                                              </span>
                                            </Blueprint4.ResizeSensor2>
                                          </Reference>
                                          <Popper innerRef={[Function (anonymous)]} placement=\\"auto\\" strategy=\\"absolute\\" modifiers={{...}}>
                                            <Blueprint4.Overlay autoFocus={false} backdropClassName=\\"bp4-popover2-backdrop\\" backdropProps={{...}} canEscapeKeyClose={false} canOutsideClickClose={false} enforceFocus={false} hasBackdrop={false} isOpen={false} onClose={[Function (anonymous)]} onClosed={[undefined]} onClosing={[undefined]} onOpened={[undefined]} onOpening={[undefined]} transitionDuration={100} transitionName=\\"bp4-popover2\\" usePortal={true} portalClassName={[undefined]} portalContainer={[undefined]} shouldReturnFocusOnClose={false} lazy={true} />
                                          </Popper>
                                        </Manager>
                                      </Blueprint4.Popover2>
                                    </Tooltip2Provider>
                                  </Blueprint4.Tooltip2>
                                </ControlBarEvalButton>
                                <ControlBarClearButton handleReplOutputClear={[Function: handleReplOutputClear]}>
                                  <ControlButton label=\\"Clear\\" icon=\\"remove\\" onClick={[Function: handleReplOutputClear]}>
                                    <Blueprint4.Button disabled={false} fill={false} intent=\\"none\\" minimal={true} className=\\"\\" type={[undefined]} onClick={[Function: handleReplOutputClear]} icon={{...}} rightIcon={false}>
                                      <button type={[undefined]} disabled={false} className=\\"bp4-button bp4-minimal\\" onClick={[Function: handleReplOutputClear]} onBlur={[Function (anonymous)]} onFocus={[undefined]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} tabIndex={[undefined]}>
                                        <Blueprint4.Icon icon={{...}}>
                                          <Blueprint4.Icon icon=\\"remove\\" color={[undefined]}>
                                            <span aria-hidden={true} icon=\\"remove\\" className=\\"bp4-icon bp4-icon-remove\\" title={[undefined]}>
                                              <svg fill={[undefined]} data-icon=\\"remove\\" width={16} height={16} viewBox=\\"0 0 16 16\\" aria-labelledby={[undefined]} role=\\"img\\">
                                                <path d=\\"M10.99 6.99h-6c-.55 0-1 .45-1 1s.45 1 1 1h6c.55 0 1-.45 1-1s-.45-1-1-1zm-3-7c-4.42 0-8 3.58-8 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.68 6-6 6z\\" fillRule=\\"evenodd\\" />
                                              </svg>
                                            </span>
                                          </Blueprint4.Icon>
                                        </Blueprint4.Icon>
                                        <span className=\\"bp4-button-text\\">
                                          Clear
                                        </span>
                                        <Blueprint4.Icon icon={false} />
                                      </button>
                                    </Blueprint4.Button>
                                  </ControlButton>
                                </ControlBarClearButton>
                              </div>
                              <MediaQuery minWidth={769} />
                            </ReplInput>
                          </div>
                        </HotKeysWrapper>
                      </HotKeysEnabled>
                    </div>
                  </div>
                </Repl>
              </div>
            </div>
          </div>
        </div>
      </Workspace>
    </div>
  </AssessmentWorkspace>
</Provider>"
`;
